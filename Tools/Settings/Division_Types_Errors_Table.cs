//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
using System;
using System.Data;
using System.Xml;
using System.Runtime.Serialization;


namespace DLC.Tools.Settings 
{
	[Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Diagnostics.DebuggerStepThrough()]
	[System.ComponentModel.ToolboxItem(true)]
	public class Division_Types_Errors_Table : DataSet 
	{
   
		private Volume_Error_TypeDataTable tableVolume_Error_Type;
    
		private Division_TypeDataTable tableDivision_Type;
    
		private File_Error_TypeDataTable tableFile_Error_Type;
       
		public Division_Types_Errors_Table() 
		{
			this.InitClass();
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
    
		protected Division_Types_Errors_Table(SerializationInfo info, StreamingContext context) 
		{
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) 
			{
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
				if ((ds.Tables["Volume_Error_Type"] != null)) 
				{
					this.Tables.Add(new Volume_Error_TypeDataTable(ds.Tables["Volume_Error_Type"]));
				}
				if ((ds.Tables["Division_Type"] != null)) 
				{
					this.Tables.Add(new Division_TypeDataTable(ds.Tables["Division_Type"]));
				}
				if ((ds.Tables["File_Error_Type"] != null)) 
				{
					this.Tables.Add(new File_Error_TypeDataTable(ds.Tables["File_Error_Type"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else 
			{
				this.InitClass();
			}
			this.GetSerializationData(info, context);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
    
   
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public Volume_Error_TypeDataTable Volume_Error_Type 
		{
			get 
			{
				return this.tableVolume_Error_Type;
			}
		}
    
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public Division_TypeDataTable Division_Type 
		{
			get 
			{
				return this.tableDivision_Type;
			}
		}
    
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public File_Error_TypeDataTable File_Error_Type 
		{
			get 
			{
				return this.tableFile_Error_Type;
			}
		}
    
		public override DataSet Clone() 
		{
			Division_Types_Errors_Table cln = ((Division_Types_Errors_Table)(base.Clone()));
			cln.InitVars();
			return cln;
		}
    
		protected override bool ShouldSerializeTables() 
		{
			return false;
		}
    
		protected override bool ShouldSerializeRelations() 
		{
			return false;
		}
    
		protected override void ReadXmlSerializable(XmlReader reader) 
		{
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["Volume_Error_Type"] != null)) 
			{
				this.Tables.Add(new Volume_Error_TypeDataTable(ds.Tables["Volume_Error_Type"]));
			}
			if ((ds.Tables["Division_Type"] != null)) 
			{
				this.Tables.Add(new Division_TypeDataTable(ds.Tables["Division_Type"]));
			}
			if ((ds.Tables["File_Error_Type"] != null)) 
			{
				this.Tables.Add(new File_Error_TypeDataTable(ds.Tables["File_Error_Type"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
    
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() 
		{
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(new XmlTextWriter(stream, null));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
		}
    
		internal void InitVars() 
		{
			this.tableVolume_Error_Type = ((Volume_Error_TypeDataTable)(this.Tables["Volume_Error_Type"]));
			if ((this.tableVolume_Error_Type != null)) 
			{
				this.tableVolume_Error_Type.InitVars();
			}
			this.tableDivision_Type = ((Division_TypeDataTable)(this.Tables["Division_Type"]));
			if ((this.tableDivision_Type != null)) 
			{
				this.tableDivision_Type.InitVars();
			}
			this.tableFile_Error_Type = ((File_Error_TypeDataTable)(this.Tables["File_Error_Type"]));
			if ((this.tableFile_Error_Type != null)) 
			{
				this.tableFile_Error_Type.InitVars();
			}
		}
    
		private void InitClass() 
		{
			this.DataSetName = "App_Wide_Tables";
			this.Prefix = "";
			this.Namespace = "";
			this.Locale = new System.Globalization.CultureInfo("en-US");
			this.CaseSensitive = false;
			this.EnforceConstraints = true;
			this.tableVolume_Error_Type = new Volume_Error_TypeDataTable();
			this.Tables.Add(this.tableVolume_Error_Type);
			this.tableDivision_Type = new Division_TypeDataTable();
			this.Tables.Add(this.tableDivision_Type);
			this.tableFile_Error_Type = new File_Error_TypeDataTable();
			this.Tables.Add(this.tableFile_Error_Type);
		}
    
		private bool ShouldSerializeVolume_Status() 
		{
			return false;
		}
    
		private bool ShouldSerializeVolume_Error_Type() 
		{
			return false;
		}
    
		private bool ShouldSerializeDivision_Type() 
		{
			return false;
		}
    
		private bool ShouldSerializeFile_Error_Type() 
		{
			return false;
		}
    
		private bool ShouldSerializeFile_Type() 
		{
			return false;
		}
    
		private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) 
		{
			if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) 
			{
				this.InitVars();
			}
		}

		public delegate void Volume_Error_TypeRowChangeEventHandler(object sender, Volume_Error_TypeRowChangeEvent e);
    
		public delegate void Division_TypeRowChangeEventHandler(object sender, Division_TypeRowChangeEvent e);
    
		public delegate void File_Error_TypeRowChangeEventHandler(object sender, File_Error_TypeRowChangeEvent e);
    
  
		[System.Diagnostics.DebuggerStepThrough()]
			public class Volume_Error_TypeDataTable : DataTable, System.Collections.IEnumerable 
		{
        
			private DataColumn columnVolumeErrorTypeID;
        
			private DataColumn columnShortDesc;
        
			private DataColumn columnLongDesc;
        
			private DataColumn columnUserSelectable;

			private DataColumn columnEnglish;
			
			private DataColumn columnFrench;

			private DataColumn columnSpanish;
        
			internal Volume_Error_TypeDataTable() : 
				base("Volume_Error_Type") 
			{
				this.InitClass();
			}
        
			internal Volume_Error_TypeDataTable(DataTable table) : 
				base(table.TableName) 
			{
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) 
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) 
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) 
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
				this.DisplayExpression = table.DisplayExpression;
			}
        
			[System.ComponentModel.Browsable(false)]
			public int Count 
			{
				get 
				{
					return this.Rows.Count;
				}
			}
        
			internal DataColumn VolumeErrorTypeIDColumn 
			{
				get 
				{
					return this.columnVolumeErrorTypeID;
				}
			}
        
			internal DataColumn ShortDescColumn 
			{
				get 
				{
					return this.columnShortDesc;
				}
			}
        
			internal DataColumn LongDescColumn 
			{
				get 
				{
					return this.columnLongDesc;
				}
			}
        
			internal DataColumn UserSelectableColumn 
			{
				get 
				{
					return this.columnUserSelectable;
				}
			}

			internal DataColumn EnglishColumn 
			{
				get 
				{
					return this.columnEnglish;
				}
			}

			internal DataColumn SpanishColumn 
			{
				get 
				{
					return this.columnSpanish;
				}
			}

			internal DataColumn FrenchColumn 
			{
				get 
				{
					return this.columnFrench;
				}
			}
        
			public Volume_Error_TypeRow this[int index] 
			{
				get 
				{
					return ((Volume_Error_TypeRow)(this.Rows[index]));
				}
			}
        
			public event Volume_Error_TypeRowChangeEventHandler Volume_Error_TypeRowChanged;
        
			public event Volume_Error_TypeRowChangeEventHandler Volume_Error_TypeRowChanging;
        
			public event Volume_Error_TypeRowChangeEventHandler Volume_Error_TypeRowDeleted;
        
			public event Volume_Error_TypeRowChangeEventHandler Volume_Error_TypeRowDeleting;
        
			public void AddVolume_Error_TypeRow(Volume_Error_TypeRow row) 
			{
				this.Rows.Add(row);
			}
        
			public Volume_Error_TypeRow AddVolume_Error_TypeRow(int VolumeErrorTypeID, string ShortDesc, string LongDesc, bool UserSelectable) 
			{
				Volume_Error_TypeRow rowVolume_Error_TypeRow = ((Volume_Error_TypeRow)(this.NewRow()));
				rowVolume_Error_TypeRow.ItemArray = new object[] {
																	 VolumeErrorTypeID,
																	 ShortDesc,
																	 LongDesc,
																	 UserSelectable};
				this.Rows.Add(rowVolume_Error_TypeRow);
				return rowVolume_Error_TypeRow;
			}
        
			public System.Collections.IEnumerator GetEnumerator() 
			{
				return this.Rows.GetEnumerator();
			}
        
			public override DataTable Clone() 
			{
				Volume_Error_TypeDataTable cln = ((Volume_Error_TypeDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
        
			protected override DataTable CreateInstance() 
			{
				return new Volume_Error_TypeDataTable();
			}
        
			internal void InitVars() 
			{
				this.columnVolumeErrorTypeID = this.Columns["VolumeErrorTypeID"];
				this.columnShortDesc = this.Columns["ShortDesc"];
				this.columnLongDesc = this.Columns["LongDesc"];
				this.columnUserSelectable = this.Columns["UserSelectable"];
				this.columnEnglish = this.Columns["English"];
				this.columnFrench = this.Columns["French"];
				this.columnSpanish = this.Columns["Spanish"];
			}
        
			private void InitClass() 
			{
				this.columnVolumeErrorTypeID = new DataColumn("VolumeErrorTypeID", typeof(int), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnVolumeErrorTypeID);
				this.columnShortDesc = new DataColumn("ShortDesc", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnShortDesc);
				this.columnLongDesc = new DataColumn("LongDesc", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnLongDesc);
				this.columnUserSelectable = new DataColumn("UserSelectable", typeof(bool), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnUserSelectable);
				this.columnEnglish = new DataColumn("English", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnEnglish);
				this.columnFrench = new DataColumn("French", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnFrench);
				this.columnSpanish = new DataColumn("Spanish", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnSpanish);
			}
        
			public Volume_Error_TypeRow NewVolume_Error_TypeRow() 
			{
				return ((Volume_Error_TypeRow)(this.NewRow()));
			}
        
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
			{
				return new Volume_Error_TypeRow(builder);
			}
        
			protected override System.Type GetRowType() 
			{
				return typeof(Volume_Error_TypeRow);
			}
        
			protected override void OnRowChanged(DataRowChangeEventArgs e) 
			{
				base.OnRowChanged(e);
				if ((this.Volume_Error_TypeRowChanged != null)) 
				{
					this.Volume_Error_TypeRowChanged(this, new Volume_Error_TypeRowChangeEvent(((Volume_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowChanging(DataRowChangeEventArgs e) 
			{
				base.OnRowChanging(e);
				if ((this.Volume_Error_TypeRowChanging != null)) 
				{
					this.Volume_Error_TypeRowChanging(this, new Volume_Error_TypeRowChangeEvent(((Volume_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowDeleted(DataRowChangeEventArgs e) 
			{
				base.OnRowDeleted(e);
				if ((this.Volume_Error_TypeRowDeleted != null)) 
				{
					this.Volume_Error_TypeRowDeleted(this, new Volume_Error_TypeRowChangeEvent(((Volume_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowDeleting(DataRowChangeEventArgs e) 
			{
				base.OnRowDeleting(e);
				if ((this.Volume_Error_TypeRowDeleting != null)) 
				{
					this.Volume_Error_TypeRowDeleting(this, new Volume_Error_TypeRowChangeEvent(((Volume_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			public void RemoveVolume_Error_TypeRow(Volume_Error_TypeRow row) 
			{
				this.Rows.Remove(row);
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class Volume_Error_TypeRow : DataRow 
		{
        
			private Volume_Error_TypeDataTable tableVolume_Error_Type;
        
			internal Volume_Error_TypeRow(DataRowBuilder rb) : 
				base(rb) 
			{
				this.tableVolume_Error_Type = ((Volume_Error_TypeDataTable)(this.Table));
			}
        
			public int VolumeErrorTypeID 
			{
				get 
				{
					try 
					{
						return ((int)(this[this.tableVolume_Error_Type.VolumeErrorTypeIDColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.VolumeErrorTypeIDColumn] = value;
				}
			}
        
			public string ShortDesc 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableVolume_Error_Type.ShortDescColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.ShortDescColumn] = value;
				}
			}
        
			public string LongDesc 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableVolume_Error_Type.LongDescColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.LongDescColumn] = value;
				}
			}
        
			public bool UserSelectable 
			{
				get 
				{
					try 
					{
						return ((bool)(this[this.tableVolume_Error_Type.UserSelectableColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.UserSelectableColumn] = value;
				}
			}

			public string English 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableVolume_Error_Type.EnglishColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.EnglishColumn] = value;
				}
			}

			public string French 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableVolume_Error_Type.FrenchColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.FrenchColumn] = value;
				}
			}

			public string Spanish 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableVolume_Error_Type.SpanishColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableVolume_Error_Type.SpanishColumn] = value;
				}
			}
        
			public bool IsVolumeErrorTypeIDNull() 
			{
				return this.IsNull(this.tableVolume_Error_Type.VolumeErrorTypeIDColumn);
			}
        
			public void SetVolumeErrorTypeIDNull() 
			{
				this[this.tableVolume_Error_Type.VolumeErrorTypeIDColumn] = System.Convert.DBNull;
			}
        
			public bool IsShortDescNull() 
			{
				return this.IsNull(this.tableVolume_Error_Type.ShortDescColumn);
			}
        
			public void SetShortDescNull() 
			{
				this[this.tableVolume_Error_Type.ShortDescColumn] = System.Convert.DBNull;
			}
        
			public bool IsLongDescNull() 
			{
				return this.IsNull(this.tableVolume_Error_Type.LongDescColumn);
			}
        
			public void SetLongDescNull() 
			{
				this[this.tableVolume_Error_Type.LongDescColumn] = System.Convert.DBNull;
			}
        
			public bool IsUserSelectableNull() 
			{
				return this.IsNull(this.tableVolume_Error_Type.UserSelectableColumn);
			}
        
			public void SetUserSelectableNull() 
			{
				this[this.tableVolume_Error_Type.UserSelectableColumn] = System.Convert.DBNull;
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class Volume_Error_TypeRowChangeEvent : EventArgs 
		{
        
			private Volume_Error_TypeRow eventRow;
        
			private DataRowAction eventAction;
        
			public Volume_Error_TypeRowChangeEvent(Volume_Error_TypeRow row, DataRowAction action) 
			{
				this.eventRow = row;
				this.eventAction = action;
			}
        
			public Volume_Error_TypeRow Row 
			{
				get 
				{
					return this.eventRow;
				}
			}
        
			public DataRowAction Action 
			{
				get 
				{
					return this.eventAction;
				}
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class Division_TypeDataTable : DataTable, System.Collections.IEnumerable 
		{
        
			private DataColumn columnDivisionTypeID;
        
			private DataColumn columnTypeName;
        
			private DataColumn columnActiveType;
        
			private DataColumn columnNamedDivision;
        
			private DataColumn columnBaseTypeName;

			private DataColumn columnEnglish;

			private DataColumn columnFrench;

			private DataColumn columnSpanish;

        
			internal Division_TypeDataTable() : 
				base("Division_Type") 
			{
				this.InitClass();
			}
        
			internal Division_TypeDataTable(DataTable table) : 
				base(table.TableName) 
			{
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) 
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) 
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) 
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
				this.DisplayExpression = table.DisplayExpression;
			}
        
			[System.ComponentModel.Browsable(false)]
			public int Count 
			{
				get 
				{
					return this.Rows.Count;
				}
			}
        
			internal DataColumn DivisionTypeIDColumn 
			{
				get 
				{
					return this.columnDivisionTypeID;
				}
			}
        
			internal DataColumn TypeNameColumn 
			{
				get 
				{
					return this.columnTypeName;
				}
			}
        
			internal DataColumn ActiveTypeColumn 
			{
				get 
				{
					return this.columnActiveType;
				}
			}
        
			internal DataColumn NamedDivisionColumn 
			{
				get 
				{
					return this.columnNamedDivision;
				}
			}
        
			internal DataColumn BaseTypeNameColumn 
			{
				get 
				{
					return this.columnBaseTypeName;
				}
			}

			internal DataColumn EnglishColumn 
			{
				get 
				{
					return this.columnEnglish;
				}
			}

			internal DataColumn FrenchColumn 
			{
				get 
				{
					return this.columnFrench;
				}
			}

			internal DataColumn SpanishColumn 
			{
				get 
				{
					return this.columnSpanish;
				}
			}
        
			public Division_TypeRow this[int index] 
			{
				get 
				{
					return ((Division_TypeRow)(this.Rows[index]));
				}
			}
        
			public event Division_TypeRowChangeEventHandler Division_TypeRowChanged;
        
			public event Division_TypeRowChangeEventHandler Division_TypeRowChanging;
        
			public event Division_TypeRowChangeEventHandler Division_TypeRowDeleted;
        
			public event Division_TypeRowChangeEventHandler Division_TypeRowDeleting;
        
			public void AddDivision_TypeRow(Division_TypeRow row) 
			{
				this.Rows.Add(row);
			}
        
			public Division_TypeRow AddDivision_TypeRow(int DivisionTypeID, string TypeName, bool ActiveType, bool NamedDivision, string BaseTypeName, string English, string Spanish, string French ) 
			{
				Division_TypeRow rowDivision_TypeRow = ((Division_TypeRow)(this.NewRow()));
				rowDivision_TypeRow.ItemArray = new object[] {
																 DivisionTypeID,
																 TypeName,
																 ActiveType,
																 NamedDivision,
																 BaseTypeName,
																 English,
																 French,
																 Spanish};
				this.Rows.Add(rowDivision_TypeRow);
				return rowDivision_TypeRow;
			}
        
			public System.Collections.IEnumerator GetEnumerator() 
			{
				return this.Rows.GetEnumerator();
			}
        
			public override DataTable Clone() 
			{
				Division_TypeDataTable cln = ((Division_TypeDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
        
			protected override DataTable CreateInstance() 
			{
				return new Division_TypeDataTable();
			}
        
			internal void InitVars() 
			{
				this.columnDivisionTypeID = this.Columns["DivisionTypeID"];
				this.columnTypeName = this.Columns["TypeName"];
				this.columnActiveType = this.Columns["ActiveType"];
				this.columnNamedDivision = this.Columns["NamedDivision"];
				this.columnBaseTypeName = this.Columns["BaseTypeName"];
				this.columnEnglish = this.Columns["English"];
				this.columnFrench = this.Columns["French"];
				this.columnSpanish = this.Columns["Spanish"];
			}
        
			private void InitClass() 
			{
				this.columnDivisionTypeID = new DataColumn("DivisionTypeID", typeof(int), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnDivisionTypeID);
				this.columnTypeName = new DataColumn("TypeName", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnTypeName);
				this.columnActiveType = new DataColumn("ActiveType", typeof(bool), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnActiveType);
				this.columnNamedDivision = new DataColumn("NamedDivision", typeof(bool), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnNamedDivision);
				this.columnBaseTypeName = new DataColumn("BaseTypeName", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnBaseTypeName);
				this.columnEnglish = new DataColumn("English", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnEnglish);
				this.columnFrench = new DataColumn("French", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnFrench);
				this.columnSpanish = new DataColumn("Spanish", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnSpanish);
			}
        
			public Division_TypeRow NewDivision_TypeRow() 
			{
				return ((Division_TypeRow)(this.NewRow()));
			}
        
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
			{
				return new Division_TypeRow(builder);
			}
        
			protected override System.Type GetRowType() 
			{
				return typeof(Division_TypeRow);
			}
        
			protected override void OnRowChanged(DataRowChangeEventArgs e) 
			{
				base.OnRowChanged(e);
				if ((this.Division_TypeRowChanged != null)) 
				{
					this.Division_TypeRowChanged(this, new Division_TypeRowChangeEvent(((Division_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowChanging(DataRowChangeEventArgs e) 
			{
				base.OnRowChanging(e);
				if ((this.Division_TypeRowChanging != null)) 
				{
					this.Division_TypeRowChanging(this, new Division_TypeRowChangeEvent(((Division_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowDeleted(DataRowChangeEventArgs e) 
			{
				base.OnRowDeleted(e);
				if ((this.Division_TypeRowDeleted != null)) 
				{
					this.Division_TypeRowDeleted(this, new Division_TypeRowChangeEvent(((Division_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowDeleting(DataRowChangeEventArgs e) 
			{
				base.OnRowDeleting(e);
				if ((this.Division_TypeRowDeleting != null)) 
				{
					this.Division_TypeRowDeleting(this, new Division_TypeRowChangeEvent(((Division_TypeRow)(e.Row)), e.Action));
				}
			}
        
			public void RemoveDivision_TypeRow(Division_TypeRow row) 
			{
				this.Rows.Remove(row);
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class Division_TypeRow : DataRow 
		{
        
			private Division_TypeDataTable tableDivision_Type;
        
			internal Division_TypeRow(DataRowBuilder rb) : 
				base(rb) 
			{
				this.tableDivision_Type = ((Division_TypeDataTable)(this.Table));
			}
        
			public int DivisionTypeID 
			{
				get 
				{
					try 
					{
						return ((int)(this[this.tableDivision_Type.DivisionTypeIDColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.DivisionTypeIDColumn] = value;
				}
			}
        
			public string TypeName 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableDivision_Type.TypeNameColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.TypeNameColumn] = value;
				}
			}
        
			public bool ActiveType 
			{
				get 
				{
					try 
					{
						return ((bool)(this[this.tableDivision_Type.ActiveTypeColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.ActiveTypeColumn] = value;
				}
			}
        
			public bool NamedDivision 
			{
				get 
				{
					try 
					{
						return ((bool)(this[this.tableDivision_Type.NamedDivisionColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.NamedDivisionColumn] = value;
				}
			}
        
			public string BaseTypeName 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableDivision_Type.BaseTypeNameColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.BaseTypeNameColumn] = value;
				}
			}

			public string English 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableDivision_Type.EnglishColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.EnglishColumn] = value;
				}
			}

			public string French 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableDivision_Type.FrenchColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.FrenchColumn] = value;
				}
			}

			public string Spanish
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableDivision_Type.SpanishColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableDivision_Type.SpanishColumn] = value;
				}
			}
        
			public bool IsDivisionTypeIDNull() 
			{
				return this.IsNull(this.tableDivision_Type.DivisionTypeIDColumn);
			}
        
			public void SetDivisionTypeIDNull() 
			{
				this[this.tableDivision_Type.DivisionTypeIDColumn] = System.Convert.DBNull;
			}
        
			public bool IsTypeNameNull() 
			{
				return this.IsNull(this.tableDivision_Type.TypeNameColumn);
			}
        
			public void SetTypeNameNull() 
			{
				this[this.tableDivision_Type.TypeNameColumn] = System.Convert.DBNull;
			}
        
			public bool IsActiveTypeNull() 
			{
				return this.IsNull(this.tableDivision_Type.ActiveTypeColumn);
			}
        
			public void SetActiveTypeNull() 
			{
				this[this.tableDivision_Type.ActiveTypeColumn] = System.Convert.DBNull;
			}
        
			public bool IsNamedDivisionNull() 
			{
				return this.IsNull(this.tableDivision_Type.NamedDivisionColumn);
			}
        
			public void SetNamedDivisionNull() 
			{
				this[this.tableDivision_Type.NamedDivisionColumn] = System.Convert.DBNull;
			}
        
			public bool IsBaseTypeNameNull() 
			{
				return this.IsNull(this.tableDivision_Type.BaseTypeNameColumn);
			}
        
			public void SetBaseTypeNameNull() 
			{
				this[this.tableDivision_Type.BaseTypeNameColumn] = System.Convert.DBNull;
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class Division_TypeRowChangeEvent : EventArgs 
		{
        
			private Division_TypeRow eventRow;
        
			private DataRowAction eventAction;
        
			public Division_TypeRowChangeEvent(Division_TypeRow row, DataRowAction action) 
			{
				this.eventRow = row;
				this.eventAction = action;
			}
        
			public Division_TypeRow Row 
			{
				get 
				{
					return this.eventRow;
				}
			}
        
			public DataRowAction Action 
			{
				get 
				{
					return this.eventAction;
				}
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class File_Error_TypeDataTable : DataTable, System.Collections.IEnumerable 
		{
        
			private DataColumn columnFileErrorTypeID;
        
			private DataColumn columnShortDesc;
        
			private DataColumn columnLongDesc;
        
			internal File_Error_TypeDataTable() : 
				base("File_Error_Type") 
			{
				this.InitClass();
			}
        
			internal File_Error_TypeDataTable(DataTable table) : 
				base(table.TableName) 
			{
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) 
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) 
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) 
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
				this.DisplayExpression = table.DisplayExpression;
			}
        
			[System.ComponentModel.Browsable(false)]
			public int Count 
			{
				get 
				{
					return this.Rows.Count;
				}
			}
        
			internal DataColumn FileErrorTypeIDColumn 
			{
				get 
				{
					return this.columnFileErrorTypeID;
				}
			}
        
			internal DataColumn ShortDescColumn 
			{
				get 
				{
					return this.columnShortDesc;
				}
			}
        
			internal DataColumn LongDescColumn 
			{
				get 
				{
					return this.columnLongDesc;
				}
			}
        
			public File_Error_TypeRow this[int index] 
			{
				get 
				{
					return ((File_Error_TypeRow)(this.Rows[index]));
				}
			}
        
			public event File_Error_TypeRowChangeEventHandler File_Error_TypeRowChanged;
        
			public event File_Error_TypeRowChangeEventHandler File_Error_TypeRowChanging;
        
			public event File_Error_TypeRowChangeEventHandler File_Error_TypeRowDeleted;
        
			public event File_Error_TypeRowChangeEventHandler File_Error_TypeRowDeleting;
        
			public void AddFile_Error_TypeRow(File_Error_TypeRow row) 
			{
				this.Rows.Add(row);
			}
        
			public File_Error_TypeRow AddFile_Error_TypeRow(int FileErrorTypeID, string ShortDesc, string LongDesc) 
			{
				File_Error_TypeRow rowFile_Error_TypeRow = ((File_Error_TypeRow)(this.NewRow()));
				rowFile_Error_TypeRow.ItemArray = new object[] {
																   FileErrorTypeID,
																   ShortDesc,
																   LongDesc};
				this.Rows.Add(rowFile_Error_TypeRow);
				return rowFile_Error_TypeRow;
			}
        
			public System.Collections.IEnumerator GetEnumerator() 
			{
				return this.Rows.GetEnumerator();
			}
        
			public override DataTable Clone() 
			{
				File_Error_TypeDataTable cln = ((File_Error_TypeDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
        
			protected override DataTable CreateInstance() 
			{
				return new File_Error_TypeDataTable();
			}
        
			internal void InitVars() 
			{
				this.columnFileErrorTypeID = this.Columns["FileErrorTypeID"];
				this.columnShortDesc = this.Columns["ShortDesc"];
				this.columnLongDesc = this.Columns["LongDesc"];
			}
        
			private void InitClass() 
			{
				this.columnFileErrorTypeID = new DataColumn("FileErrorTypeID", typeof(int), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnFileErrorTypeID);
				this.columnShortDesc = new DataColumn("ShortDesc", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnShortDesc);
				this.columnLongDesc = new DataColumn("LongDesc", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnLongDesc);
			}
        
			public File_Error_TypeRow NewFile_Error_TypeRow() 
			{
				return ((File_Error_TypeRow)(this.NewRow()));
			}
        
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
			{
				return new File_Error_TypeRow(builder);
			}
        
			protected override System.Type GetRowType() 
			{
				return typeof(File_Error_TypeRow);
			}
        
			protected override void OnRowChanged(DataRowChangeEventArgs e) 
			{
				base.OnRowChanged(e);
				if ((this.File_Error_TypeRowChanged != null)) 
				{
					this.File_Error_TypeRowChanged(this, new File_Error_TypeRowChangeEvent(((File_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowChanging(DataRowChangeEventArgs e) 
			{
				base.OnRowChanging(e);
				if ((this.File_Error_TypeRowChanging != null)) 
				{
					this.File_Error_TypeRowChanging(this, new File_Error_TypeRowChangeEvent(((File_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowDeleted(DataRowChangeEventArgs e) 
			{
				base.OnRowDeleted(e);
				if ((this.File_Error_TypeRowDeleted != null)) 
				{
					this.File_Error_TypeRowDeleted(this, new File_Error_TypeRowChangeEvent(((File_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			protected override void OnRowDeleting(DataRowChangeEventArgs e) 
			{
				base.OnRowDeleting(e);
				if ((this.File_Error_TypeRowDeleting != null)) 
				{
					this.File_Error_TypeRowDeleting(this, new File_Error_TypeRowChangeEvent(((File_Error_TypeRow)(e.Row)), e.Action));
				}
			}
        
			public void RemoveFile_Error_TypeRow(File_Error_TypeRow row) 
			{
				this.Rows.Remove(row);
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class File_Error_TypeRow : DataRow 
		{
        
			private File_Error_TypeDataTable tableFile_Error_Type;
        
			internal File_Error_TypeRow(DataRowBuilder rb) : 
				base(rb) 
			{
				this.tableFile_Error_Type = ((File_Error_TypeDataTable)(this.Table));
			}
        
			public int FileErrorTypeID 
			{
				get 
				{
					try 
					{
						return ((int)(this[this.tableFile_Error_Type.FileErrorTypeIDColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableFile_Error_Type.FileErrorTypeIDColumn] = value;
				}
			}
        
			public string ShortDesc 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableFile_Error_Type.ShortDescColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableFile_Error_Type.ShortDescColumn] = value;
				}
			}
        
			public string LongDesc 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableFile_Error_Type.LongDescColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set 
				{
					this[this.tableFile_Error_Type.LongDescColumn] = value;
				}
			}
        
			public bool IsFileErrorTypeIDNull() 
			{
				return this.IsNull(this.tableFile_Error_Type.FileErrorTypeIDColumn);
			}
        
			public void SetFileErrorTypeIDNull() 
			{
				this[this.tableFile_Error_Type.FileErrorTypeIDColumn] = System.Convert.DBNull;
			}
        
			public bool IsShortDescNull() 
			{
				return this.IsNull(this.tableFile_Error_Type.ShortDescColumn);
			}
        
			public void SetShortDescNull() 
			{
				this[this.tableFile_Error_Type.ShortDescColumn] = System.Convert.DBNull;
			}
        
			public bool IsLongDescNull() 
			{
				return this.IsNull(this.tableFile_Error_Type.LongDescColumn);
			}
        
			public void SetLongDescNull() 
			{
				this[this.tableFile_Error_Type.LongDescColumn] = System.Convert.DBNull;
			}
		}
    
		[System.Diagnostics.DebuggerStepThrough()]
			public class File_Error_TypeRowChangeEvent : EventArgs 
		{
        
			private File_Error_TypeRow eventRow;
        
			private DataRowAction eventAction;
        
			public File_Error_TypeRowChangeEvent(File_Error_TypeRow row, DataRowAction action) 
			{
				this.eventRow = row;
				this.eventAction = action;
			}
        
			public File_Error_TypeRow Row 
			{
				get 
				{
					return this.eventRow;
				}
			}
        
			public DataRowAction Action 
			{
				get 
				{
					return this.eventAction;
				}
			}
		}
	}
}

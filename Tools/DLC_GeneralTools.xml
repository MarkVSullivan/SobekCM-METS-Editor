<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DLC_Tools</name>
    </assembly>
    <members>
        <member name="F:DLC.Tools.Forms.ErrorMessageBox_Internal.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DLC.Tools.Forms.ErrorMessageBox_Internal.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DLC.Tools.Forms.ErrorMessageBox_Internal.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DLC.Tools.CD_Packer_Exception">
            <summary> CD_Packer_Exception is a custom exception which is thrown if there is a run away process
            detected in the CD Packing object. <br/> <br/> </summary>
            <remarks> This is thrown from a <see cref="T:DLC.Tools.CD_Packer"/> class when more than 200 CD's are packed in one 
            session.  This prevents potentially hundreds of thousands of new CD folders from being created in one 
            session if there is an error.  <br/> <br/>
            This class extends the <see cref="T:System.ApplicationException"/> class. </remarks>
        </member>
        <member name="M:DLC.Tools.CD_Packer_Exception.#ctor(System.String)">
            <summary> Constructor passes a message to the base objects constructor. </summary>
            <param name="message"> Custome message explaining the error which was detected. </param>
        </member>
        <member name="T:DLC.Tools.CD_Packer">
            <summary> The CD_Packer object is used to pack CD's from a provided directory, 
            or adds each file individually. <br /> <br /> </summary>
            <remarks> Object written in C# by Mark V Sullivan ( 7/3/2003 ) using DataObjectGenerator. </remarks> 
        </member>
        <member name="F:DLC.Tools.CD_Packer.cD_Capacity">
            <summary> Private int variable stores the total possible capacity (in MB) for the CD's to be packed. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.currentCD">
            <summary> Private int variable stores the CD number which is currently being packed. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.directory">
            <summary> Private string variable stores the directory in which to pack these CDs. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.firstCD">
            <summary> Private int variable stores the number for the first CD to pack. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.nextCD">
            <summary> Private int variable holds the NEXT number.  This is in the case that there is
            a half-completed CD already in the 'Burn' directory. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.thisCD">
            <summary> Private newCdObject object stores the object used to pack the current cd. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.packedTextBibIds">
            <summary> Private ArrayList holds the bib id's of all the textual material
            which was packed to CD. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.packedImageBibIds">
            <summary> Private ArrayList holds the bib id's of all the visual material
            which was packed to CD. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.institutionCodes">
            <summary> Private string array holds the collection of different institution codes used
            to identify if a foler name is in the Bib ID format. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.NewCdsPacked">
            <summary> Stores the number of new CD's which were created during the life of this object.
            If the number of CD's ever exceeds 500, abort the Thread. </summary>
        </member>
        <member name="M:DLC.Tools.CD_Packer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary> Constructor for the CD_Packer class </summary>
            <param name="directory"> The directory in which to pack these CDs. </param>
            <param name="firstCD"> The number for the first CD to pack. </param>
            <remarks> This uses the default DVD Capacity (4.4 GB) for CD's. </remarks>
        </member>
        <member name="M:DLC.Tools.CD_Packer.#ctor(System.String,System.Int32,System.Int32)">
            <summary> Constructor for the CD_Packer class. </summary>
            <param name="directory"> The directory in which to pack these CDs. </param>
            <param name="firstCD"> The number for the first CD to pack. </param>
            <param name="CD_Capacity"> Capacity for the media (in MB) </param>
        </member>
        <member name="M:DLC.Tools.CD_Packer.AddDirectory(System.String)">
            <summary> Add all the folders under a certain root directory.  </summary>
            <param name="rootDirectory"> Directory from which to pack </param>
            <returns> The number of the last CD which was packed </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.Add(System.String,System.String)">
            <summary> Add one file to the current CD </summary>
            <param name="pathFile"> Source path and filename for the file to add </param>
            <param name="CdSubDirectory"> Sub directory on the CD to move the file to </param>
            <returns> The CD number this file was placed upon </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.Add(System.String,System.String,System.String)">
            <summary> Adds a group of files to the current CD into a subdirectory
            as specified.  The group is specified by path and search pattern </summary>
            <param name="path"> Source path for the search pattern </param>
            <param name="searchPattern"> Search pattern of files to add </param>
            <param name="CdSubDirectory"> Sub directory on the CD to move the file to </param>
            <returns> The CD number this file was placed upon, or -1 </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.ClearPackedList">
            <summary> Clears the lists of all the text and images
            which have been packed since the last clearing. </summary>
        </member>
        <member name="M:DLC.Tools.CD_Packer.createNextCD">
            <summary> Helper method will make the folder for the next CD, etc.  Checks to make
            sure that no more than 500 CD's are ever packed in one session. </summary>
            <returns></returns>
            <exception cref="T:DLC.Tools.CD_Packer_Exception"> Throws a CD_Packer_Exception if more than 50 CD's were 
            packed in one session.   This prevents run away processes from creating thousands of new CD
            folders.  </exception>
        </member>
        <member name="M:DLC.Tools.CD_Packer.isBibIdFormat(System.String)">
            <summary> Private helper method used to check if a folder name is in 
            Bib ID form. </summary>
            <param name="toTest"> String to test for Bib-Id-ness </param>
            <returns> TRUE if this could be a bib id, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.addDirLogic(System.String,System.String)">
            <summary> Private helper method that actually adds a directory,
            subdirectory, and folders to CD's which are being packed. </summary>
            <param name="rootDirectory"></param>
            <param name="bibId"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.getDirSize(System.String,System.Decimal)">
            <summary> Private helper method computes the total size of a directory, 
            including all files in sub directories </summary>
            <param name="directory"> Directory from which to check </param>
            <param name="size"> Size of the directory computed so far </param>
            <returns> Size of the folder </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.incompleteCD">
            <summary> Private helper method which checks to see if there is a incompletely
            packed CD already in this folder.  If there is, it returns this CD number. </summary>
            <returns> Either the incomplete CD number, or -1 </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.incrementCD">
            <summary> Private helper method increments the CD number </summary>
        </member>
        <member name="E:DLC.Tools.CD_Packer.New_CD_Created">
            <summary> Event is fired each time a new CD folder is created </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.CD_Capacity">
            <summary> Gets and sets the total possible capacity (in MB) for the CD's to be packed. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.CurrentCD">
            <summary> Gets and sets the CD number which is currently being packed. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.Current_CD_Size">
            <summary> Gets the size of the files in the current CD </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.CD_Directory">
            <summary> Gets and sets the directory in which to pack these CDs. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.FirstCD">
            <summary> Gets the number for the first CD to pack. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.PackedTextBibIds">
            <summary> Gets the collection that holds the bib id's of all the
            textual material which was packed to CD. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.PackedImageBibIds">
            <summary> Gets the collection that holds the bib id's of all the
            visual material which was packed to CD. </summary>
        </member>
        <member name="T:DLC.Tools.CD_Packer.newCdObject">
            <summary>
            The newCdObject is a private object under the CD_Packer class.  
            This object holds all the information for a specific CD, such as 
            the CD number, directory, and size.  It is this object that actually packs 
            the CD's as well.<br />
            </summary>
            <remarks> Object written in C# by Mark V Sullivan ( 7/3/2003 ) using DataObjectGenerator. </remarks> 
        </member>
        <member name="F:DLC.Tools.CD_Packer.newCdObject.capacity">
            <summary> Private int variable stores the total possible capacity of this CD. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.newCdObject.cdNumber">
            <summary> Private int variable stores the number for this CD. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.newCdObject.directory">
            <summary> Private string variable stores the root directory 
            under which this CD will be packed. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.newCdObject.error">
            <summary> Private boolean flag holds the value which indicates an error
            was encountered during a previous operation. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.newCdObject.processDirectory">
            <summary> Private string variable stores the name of this directory while 
            it is in process. </summary>
        </member>
        <member name="F:DLC.Tools.CD_Packer.newCdObject.size">
            <summary> Private long variable stores the current size of files in this CD. </summary>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.#ctor(System.Int32,System.Int32,System.String)">
            <summary> Constructor for the newCdObject class. </summary>
            <param name="capacity"> The total possible capacity of this CD. </param>
            <param name="cdNumber"> The number for this CD. </param>
            <param name="directory"> The directory where this CD will be packed. </param>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.Add(System.String,System.String)">
            <summary> Public method adds a single file to this CD into a subdirectory
            as specified. </summary>
            <param name="pathFile"> Source path and filename for the file to add </param>
            <param name="CdSubDirectory"> Sub directory on the CD to move the file to </param>
            <returns> TRUE if able to add this, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.Add(System.String,System.String,System.String)">
            <summary> Public method adds a group of files to this CD into a subdirectory
            as specified.  The group is specified by path and search pattern </summary>
            <param name="path"> Source path for the search pattern </param>
            <param name="searchPattern"> Search pattern of files to add </param>
            <param name="CdSubDirectory"> Sub directory on the CD to move the file to </param>
            <returns> TRUE if able to add this, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.AddFolder(System.String,System.String,System.Decimal)">
            <summary> Public method which adds an entire folder and all 
            subfolders to this CD. </summary>
            <param name="path"> Root directory to move </param>
            <param name="bibId"> Bib ID for this material </param>
            <param name="dirSize"> Size of the directory </param>
            <returns> TRUE if it was added, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.Delete">
            <summary> Public method deletes the folder for this CD if there
            are no files packed into it. </summary>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.Finalize">
            <summary> Public method that finalizes this CD, by changing the folder
            name to remove the ' - incomplete' label, and sets this CD to accept
            no more items to pack. </summary>
        </member>
        <member name="M:DLC.Tools.CD_Packer.newCdObject.setCurrentSize(System.String)">
            <summary> Private helper method determines the current size of the CD
            on the hard disk.  Used during construction if the CD already exists. This method
            calls itself recursively for any sub-directories which exist. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.newCdObject.Capacity">
            <summary> Gets the total possible capacity of this CD. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.newCdObject.CdNumber">
            <summary> Gets the number for this CD. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.newCdObject.Error">
            <summary> Gets the error flag. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.newCdObject.FreeSpace">
            <summary> Property computes the amound of free space left on this CD. </summary>
        </member>
        <member name="P:DLC.Tools.CD_Packer.newCdObject.Size">
            <summary> Gets the current size of all the files in this CD. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.Database.iDatabase.Valid_Bib_VID(System.String,System.String)" -->
        <member name="M:DLC.Tools.Database.iDatabase.Get_QC_Log(System.String,System.String)">
            <summary> Gets all of the QC logs for a particular volume </summary>
            <param name="volumeid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Submit_QC_Log(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> Submit a log about QCing a volume </summary>
            <param name="volumeid"> </param>
            <param name="notes"> </param>
            <param name="scanqc"> </param>
            <param name="qcstatusid"> </param>
            <param name="volumeerrortypeid"> </param>
            <param name="storage_location"> </param>
            <remarks> This method calls the stored procedure 'CS_Submit_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Get_Volumes_in_QC(System.String)">
            <summary> Returns all of the volumes currently in QC process </summary>
            <param name="date"> Date from which to return the volumes ready </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Volumes_in_QC'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.PreQC_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been Pre-QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_PreQC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Get_Bibliographic_Data(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Builds a bib package using the database of choice for any additionally needed information </summary>
            <param name="bibid"> Bib ID</param>
            <param name="volumeid"> VID</param>
            <param name="destination_directory">Directory in which to save the METS file and look for data</param>
            <param name="mets_directory">Directory where pre-assembled METS files are stored</param>
            <param name="marc_directory">Directory where MARC XML files are stored</param>
            <param name="project_directory">Directory where PROJECT-LEVEL METS files are stored</param>
            <param name="xml_directory">Directory where necessary XML helper files are stored</param>
            <param name="app_name">Name of this application</param>
            <param name="user_name">Name of this user</param>
            <returns>Completely built bibliographic package, or NULL</returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Metadata_Complete(System.String,System.String)">
            <summary> Sets the date for metadata completion  </summary>
            <param name="bibid">Bib ID for this material</param>
            <param name="vid">VID for this material</param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Go_UFDC_Complete(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> Marks an item as having been GoUFDCd... and sent through whole system </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <param name="ftped"></param>
            <param name="hasText"></param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Go_FDA_Complete(System.String,System.String)">
            <summary> Marks an item as having been FTP'd to FDA </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.FDA_FTP_Log(System.String,System.Boolean,System.Int32)">
            <summary> Store the log of this fda ftp </summary>
            <param name="Package"></param>
            <param name="isError"></param>
            <param name="PackageSize"></param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Get_Minimum_Info_For_FTP(System.String,System.String)">
            <summary> Gets minimum information to validate before FTPing </summary>
            <param name="bibid">BibID for this item</param>
            <param name="vid">Volume ID for this item</param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Check_CD_Existence(System.String)">
            <summary> Checks to see if information exists for this cd number </summary>
            <param name="cdnumber"> CD Number </param>
            <returns>TRUE if it exists, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Delete_ArchiveNumber(System.String)">
            <summary> Delete all information tied to a CD </summary>
            <param name="archiveNumber"> Archive identifier </param>
            <returns>TRUE if successul, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Save_Basic_CD_Info(System.String,System.String)">
            <summary> Save the basic information about an archival CD or DVD </summary>
            <param name="archiveNumber"></param>
            <param name="serialNumber"></param>
            <returns>Archive Media ID for subsequent additions</returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary> Saves the connection between a CD and a volume and stores the file range </summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <param name="totalFiles"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary> Saves information about a single file on a CD for an existing volume </summary>
            <param name="volumeid">Primary key for the volume </param>
            <param name="fileName">Name of this file</param>
            <param name="fileSize">Size of this file</param>
            <param name="dateCreated">Date this file was created</param>
            <param name="dateModified">Date this file was modified</param>
            <param name="extension">Extension for this file</param>
            <param name="archiveMediaID">Primary key for the archive CD or DVD</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Refresh_Importer_Tables">
            <summary> Method refreshes all of the importer tables </summary>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.UFDC_Online_Edit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as been editing online through UFDC </summary>
            <param name="bibid">BibID for the item edited</param>
            <param name="vid">VID for the item edited </param>
            <param name="user">User name who did the edit</param>
            <param name="usernotes">Any user notes about this edit</param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.UFDC_Online_Submit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been submitted online </summary>
            <param name="bibid">BibID for the item submitted </param>
            <param name="vid">VID for the item submitted </param>
            <param name="user">User name who submitted this item</param>
            <param name="usernotes">Any user notes about this new item</param>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Validate_UFDC_Item(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary> Validate that the UFDC Item can be saved to the current database type </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="checkCopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.Save_To_Database(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary> Saves a UFDC Item to the tracking database </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <param name="check_CopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="NewItemFlag">Flag tells if this is a new item or not</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation or tracking save failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.iDatabase.FDA_Report_Save(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary> Save the information about a FDA report to the database </summary>
            <param name="Package">ID of the submission package sent to FDA.  (End user's id)</param>
            <param name="IEID">Intellectual Entity ID assigned by FDA</param>
            <param name="FdaReportType">Type of FDA report received</param>
            <param name="Report_Date">Date FDA was generated</param>
            <param name="Account">Account information for the FDA submission package</param>
            <param name="Project">Project information for the FDA submission package</param>
            <param name="Warnings">Number of warnings in this package</param>
            <param name="BibID">Bibliographic Identifier</param>
            <param name="VID">Volume Identifier</param>
            <returns>Primary key for the report in the database, or -1 on failure</returns>
            <remarks>This calls the FDA_Report_Save stored procedure in the database</remarks>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.DB_Type">
            <summary> Gets the database type </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Show_Errors">
            <summary> Gets and sets a flag if this database should show errors messages  </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Bib_VID_List">
            <summary> Get the list of Bib ID's and VIDS from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Get_PortableDrives">
            <summary> Gets the list of portable drives </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Get_Volumes_QCd">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Volumes_QCd'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.CD_Number">
            <summary> Gets or sets the CD number from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.is_Admin">
            <summary> Gets a flag indicating if this is an Administrator </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Project_Codes">
            <summary> Gets the list of all valid project codes </summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Material_Types">
            <summary> Gets the list of all valid material types</summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Locations">
            <summary> Gets the list of all locations from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.iDatabase.Bib_VID_List_With_External_Identifiers">
            <summary> Gets the list of all items with any specific external 
            identifiers from the database to ensure no replication is occurring </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.Database.Database_XML.Valid_Bib_VID(System.String,System.String)" -->
        <member name="M:DLC.Tools.Database.Database_XML.Get_QC_Log(System.String,System.String)">
            <summary> Gets all of the QC logs for a particular volume </summary>
            <param name="volumeid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Submit_QC_Log(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> Submit a log about QCing a volume </summary>
            <param name="volumeid"> </param>
            <param name="notes"> </param>
            <param name="scanqc"> </param>
            <param name="qcstatusid"> </param>
            <param name="volumeerrortypeid"> </param>
            <param name="storage_location"> </param>
            <remarks> This method calls the stored procedure 'CS_Submit_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Get_Volumes_in_QC(System.String)">
            <summary> Returns all of the volumes currently in QC process </summary>
            <param name="date"> Date from which to return the volumes ready </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Volumes_in_QC'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.PreQC_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been Pre-QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_PreQC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.QC_Complete(System.String,System.String)">
            <summary> Marks an item as having been QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_QC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Get_Bibliographic_Data(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Builds a bib package using the database of choice for any additionally needed information </summary>
            <param name="bibid"> Bib ID</param>
            <param name="volumeid"> VID</param>
            <param name="destination_directory">Directory in which to save the METS file and look for data</param>
            <param name="mets_directory">Directory where pre-assembled METS files are stored</param>
            <param name="marc_directory">Directory where MARC XML files are stored</param>
            <param name="project_directory">Directory where PROJECT-LEVEL METS files are stored</param>
            <param name="xml_directory">Directory where necessary XML helper files are stored</param>
            <param name="app_name">Name of this application</param>
            <param name="user_name">Name of this user</param>
            <returns>Completely built bibliographic package, or NULL</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Metadata_Complete(System.String,System.String)">
            <summary> Sets the date for metadata completion  </summary>
            <param name="bibid">Bib ID for this material</param>
            <param name="vid">VID for this material</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Go_UFDC_Complete(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> Marks an item as having been GoUFDCd... and sent through whole system </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <param name="ftped"></param>
            <param name="hasText"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Go_FDA_Complete(System.String,System.String)">
            <summary> Marks an item as having been FTP'd to FDA </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.FDA_FTP_Log(System.String,System.Boolean,System.Int32)">
            <summary> Store the log of this fda ftp </summary>
            <param name="Package"></param>
            <param name="isError"></param>
            <param name="PackageSize"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Get_Minimum_Info_For_FTP(System.String,System.String)">
            <summary> Gets minimum information to validate before FTPing </summary>
            <param name="bibid">BibID for this item</param>
            <param name="vid">Volume ID for this item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Check_CD_Existence(System.String)">
            <summary> Checks to see if information exists for this cd number </summary>
            <param name="cdnumber"> CD Number </param>
            <returns>TRUE if it exists, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Delete_ArchiveNumber(System.String)">
            <summary> Delete all information tied to a CD </summary>
            <param name="archiveNumber"> Archive identifier </param>
            <returns>TRUE if successul, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Save_Basic_CD_Info(System.String,System.String)">
            <summary> Save the basic information about an archival CD or DVD </summary>
            <param name="archiveNumber"></param>
            <param name="serialNumber"></param>
            <returns>Archive Media ID for subsequent additions</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary> Saves the connection between a CD and a volume and stores the file range </summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <param name="totalFiles"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary> Saves information about a single file on a CD for an existing volume </summary>
            <param name="volumeid">Primary key for the volume </param>
            <param name="fileName">Name of this file</param>
            <param name="fileSize">Size of this file</param>
            <param name="dateCreated">Date this file was created</param>
            <param name="dateModified">Date this file was modified</param>
            <param name="extension">Extension for this file</param>
            <param name="archiveMediaID">Primary key for the archive CD or DVD</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Refresh_Importer_Tables">
            <summary> Method refreshes all of the importer tables </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.UFDC_Online_Edit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as been editing online through UFDC </summary>
            <param name="bibid">BibID for the item edited</param>
            <param name="vid">VID for the item edited </param>
            <param name="user">User name who did the edit</param>
            <param name="usernotes">Any user notes about this edit</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.UFDC_Online_Submit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been submitted online </summary>
            <param name="bibid">BibID for the item submitted </param>
            <param name="vid">VID for the item submitted </param>
            <param name="user">User name who submitted this item</param>
            <param name="usernotes">Any user notes about this new item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Validate_UFDC_Item(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary> Validate that the UFDC Item can be saved to the current database type </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="checkCopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.Save_To_Database(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary> Saves a UFDC Item to the tracking database </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <param name="check_CopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="NewItemFlag">Flag tells if this is a new item or not</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation or tracking save failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_XML.FDA_Report_Save(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary> Save the information about a FDA report to the database </summary>
            <param name="Package">ID of the submission package sent to FDA.  (End user's id)</param>
            <param name="IEID">Intellectual Entity ID assigned by FDA</param>
            <param name="FdaReportType">Type of FDA report received</param>
            <param name="Report_Date">Date FDA was generated</param>
            <param name="Account">Account information for the FDA submission package</param>
            <param name="Project">Project information for the FDA submission package</param>
            <param name="Warnings">Number of warnings in this package</param>
            <param name="BibID">Bibliographic Identifier</param>
            <param name="VID">Volume Identifier</param>
            <returns>Primary key for the report in the database, or -1 on failure</returns>
            <remarks>This calls the FDA_Report_Save stored procedure in the database</remarks>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.DB_Type">
            <summary> Gets the database type </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Show_Errors">
            <summary> Gets and sets a flag if this database should show errors messages  </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Bib_VID_List">
            <summary> Get the list of Bib ID's and VIDS from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Get_PortableDrives">
            <summary> Gets the list of portable drives </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Get_Volumes_QCd">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Volumes_QCd'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.CD_Number">
            <summary> Gets or sets the CD number from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.is_Admin">
            <summary> Gets a flag indicating if this is an Administrator </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Project_Codes">
            <summary> Gets the list of all valid project codes </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Material_Types">
            <summary> Gets the list of all valid material types</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Locations">
            <summary> Gets the list of all locations from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_XML.Bib_VID_List_With_External_Identifiers">
            <summary> Gets the list of all items with any specific external 
            identifiers from the database to ensure no replication is occurring </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.Database.Database_Gateway.Valid_Bib_VID(System.String,System.String)" -->
        <member name="M:DLC.Tools.Database.Database_Gateway.Get_QC_Log(System.String,System.String)">
            <summary> Gets all of the QC logs for a particular volume </summary>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Submit_QC_Log(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> Submit a log about QCing a volume </summary>
            <param name="volumeid"> </param>
            <param name="notes"> </param>
            <param name="scanqc"> </param>
            <param name="qcstatusid"> </param>
            <param name="volumeerrortypeid"> </param>
            <param name="storage_location"> </param>
            <remarks> This method calls the stored procedure 'CS_Submit_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Get_Volumes_in_QC(System.String)">
            <summary> Returns all of the volumes currently in QC process </summary>
            <param name="date"> Date from which to return the volumes ready </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Volumes_in_QC'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.PreQC_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been Pre-QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_PreQC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Get_Bibliographic_Data(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Builds a bib package using the database of choice for any additionally needed information </summary>
            <param name="bibid"> Bib ID</param>
            <param name="volumeid"> VID</param>
            <param name="destination_directory">Directory in which to save the METS file and look for data</param>
            <param name="mets_directory">Directory where pre-assembled METS files are stored</param>
            <param name="marc_directory">Directory where MARC XML files are stored</param>
            <param name="project_directory">Directory where PROJECT-LEVEL METS files are stored</param>
            <param name="xml_directory">Directory where necessary XML helper files are stored</param>
            <param name="app_name">Name of this application</param>
            <param name="user_name">Name of this user</param>
            <returns>Completely built bibliographic package, or NULL</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Metadata_Complete(System.String,System.String)">
            <summary> Sets the date for metadata completion  </summary>
            <param name="bibid">Bib ID for this material</param>
            <param name="vid">VID for this material</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Go_UFDC_Complete(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> Marks an item as having been GoUFDCd... and sent through whole system </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <param name="ftped"></param>
            <param name="hasText"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Go_FDA_Complete(System.String,System.String)">
            <summary> Marks an item as having been FTP'd to FDA </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.FDA_FTP_Log(System.String,System.Boolean,System.Int32)">
            <summary> Store the log of this fda ftp </summary>
            <param name="Package"></param>
            <param name="isError"></param>
            <param name="PackageSize"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Get_Minimum_Info_For_FTP(System.String,System.String)">
            <summary> Gets minimum information to validate before FTPing </summary>
            <param name="bibid">BibID for this item</param>
            <param name="vid">Volume ID for this item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Check_CD_Existence(System.String)">
            <summary> Checks to see if information exists for this cd number </summary>
            <param name="cdnumber"> CD Number </param>
            <returns>TRUE if it exists, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Delete_ArchiveNumber(System.String)">
            <summary> Delete all information tied to a CD </summary>
            <param name="archiveNumber"> Archive identifier </param>
            <returns>TRUE if successul, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Save_Basic_CD_Info(System.String,System.String)">
            <summary> Save the basic information about an archival CD or DVD </summary>
            <param name="archiveNumber"></param>
            <param name="serialNumber"></param>
            <returns>Archive Media ID for subsequent additions</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary> Saves the connection between a CD and a volume and stores the file range </summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <param name="totalFiles"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary> Saves information about a single file on a CD for an existing volume </summary>
            <param name="volumeid">Primary key for the volume </param>
            <param name="fileName">Name of this file</param>
            <param name="fileSize">Size of this file</param>
            <param name="dateCreated">Date this file was created</param>
            <param name="dateModified">Date this file was modified</param>
            <param name="extension">Extension for this file</param>
            <param name="archiveMediaID">Primary key for the archive CD or DVD</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Refresh_Importer_Tables">
            <summary> Method refreshes all of the importer tables </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.UFDC_Online_Edit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as been editing online through UFDC </summary>
            <param name="bibid">BibID for the item edited</param>
            <param name="vid">VID for the item edited </param>
            <param name="user">User name who did the edit</param>
            <param name="usernotes">Any user notes about this edit</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.UFDC_Online_Submit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been submitted online </summary>
            <param name="bibid">BibID for the item submitted </param>
            <param name="vid">VID for the item submitted </param>
            <param name="user">User name who submitted this item</param>
            <param name="usernotes">Any user notes about this new item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Validate_UFDC_Item(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary> Validate that the UFDC Item can be saved to the current database type </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="checkCopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.Save_To_Database(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary> Saves a UFDC Item to the tracking database </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <param name="check_CopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="NewItemFlag">Flag tells if this is a new item or not</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation or tracking save failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.is_bibid_format(System.String)">
            <summary> Gets a flag indicating if the provided string appears to be in bib id format </summary>
            <param name="test_string"> string to check for bib id format </param>
            <returns> TRUE if this string appears to be in bib id format, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Gateway.FDA_Report_Save(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary> Save the information about a FDA report to the database </summary>
            <param name="Package">ID of the submission package sent to FDA.  (End user's id)</param>
            <param name="IEID">Intellectual Entity ID assigned by FDA</param>
            <param name="FdaReportType">Type of FDA report received</param>
            <param name="Report_Date">Date FDA was generated</param>
            <param name="Account">Account information for the FDA submission package</param>
            <param name="Project">Project information for the FDA submission package</param>
            <param name="Warnings">Number of warnings in this package</param>
            <param name="BibID">Bibliographic Identifier</param>
            <param name="VID">Volume Identifier</param>
            <returns>Primary key for the report in the database, or -1 on failure</returns>
            <remarks>This calls the FDA_Report_Save stored procedure in the database</remarks>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Bib_VID_List">
            <summary> Get the list of Bib ID's and VIDS from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Get_PortableDrives">
            <summary> Gets the list of portable drives </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Get_Volumes_QCd">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Volumes_QCd'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.CD_Number">
            <summary> Gets or sets the CD number from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.is_Admin">
            <summary> Gets a flag indicating if this is an Administrator </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Project_Codes">
            <summary> Gets the list of all valid project codes </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Material_Types">
            <summary> Gets the list of all valid material types</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Locations">
            <summary> Gets the list of all locations from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Languages">
            <summary> Gets the list of all languages from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Gateway.Bib_VID_List_With_External_Identifiers">
            <summary> Gets the list of all items with any specific external 
            identifiers from the database to ensure no replication is occurring </summary>
        </member>
        <member name="T:DLC.Tools.Settings.Derivative_Creation_Software">
            <summary> Software used to create the JPEG derivatives </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Derivative_Creation_Software.None">
            <summary> No software is installed to create the JPEG derivatives </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Derivative_Creation_Software.Photoshop_CS">
            <summary> Adobe Photoshop CS </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Derivative_Creation_Software.ImageMagick">
            <summary> ImageMagick </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Derivative_Creation_Software.PaintNET">
            <summary> Paint.NET (Not currently in use) </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Derivative_Creation_Software.Kakadu">
            <summary> Kakadu (used for JPEG2000) </summary>
        </member>
        <member name="T:DLC.Tools.Settings.Automatic_Numbering_Enum">
            <summary> Enumeration for the different forms of automatic numbering </summary>
            <remarks> This controls whether the new pagination cascades down through all the pages </remarks>
        </member>
        <member name="F:DLC.Tools.Settings.Automatic_Numbering_Enum.None">
            <summary> No automatic renumbering cascade </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Automatic_Numbering_Enum.Division">
            <summary> Automatically renumber the same division </summary>
        </member>
        <member name="F:DLC.Tools.Settings.Automatic_Numbering_Enum.Document">
            <summary> Automatically renumber the entire document </summary>
        </member>
        <member name="T:DLC.Tools.Settings.DLC_UserSettings">
            <summary> QC_UserSettings is a static class which holds all of the settings for this 
            particular user and assemply in the Isolated Storage. </summary>
        </member>
        <member name="T:DLC.Tools.IS_UserSettings">
            <summary> IS_UserSettings is an abstract, static class which uses Isolated Storage and XML to
            store and retrive the settings for an application's user.
            </summary>
            <remarks> Object created by Mark V Sullivan (2004) for University of Florida's Digital Library Center. </remarks>
        </member>
        <member name="F:DLC.Tools.IS_UserSettings.dsSettings">
            <summary> Holds the DataSet which has all of the settings for this user </summary>
        </member>
        <member name="F:DLC.Tools.IS_UserSettings.userSettings">
            <summary> DataRow which holds the specific values </summary>
        </member>
        <member name="F:DLC.Tools.IS_UserSettings.fileName">
            <summary> Name of the file which stores these settings </summary>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.#cctor">
            <summary> Static constructor for the IS_UserSettings base class </summary>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Create_DataSet">
            <summary> Method creates a new DataSet to house the user information </summary>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Read_XML_File">
            <summary> Reads the user settings from a XML file in Isolated Storage </summary>
            <returns> TRUE if the XML file already existed, otherwise FALSE </returns>
            <remarks> If the XML file does not exist, an empty DataSet is created </remarks>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Read_XML_File(System.String)">
            <summary> Reads the user settings from a XML file in Isolated Storage </summary>
            <param name="fileName"> Name of the file </param>
            <returns> TRUE if the XML file already existed, otherwise FALSE </returns>
            <remarks> If the XML file does not exist, an empty DataSet is created </remarks>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Write_XML_File">
            <summary> Writes the user settings to a XML file in Isolated Storage </summary>
            <returns> TRUE if the XML file is successfully written, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Write_XML_File(System.String)">
            <summary> Writes the user settings to a XML file in Isolated Storage </summary>
            <param name="fileName"> Name of the file </param>
            <returns> TRUE if the XML file is successfully written, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Add_Setting(System.String,System.Int32)">
            <summary> Set a value in the current user setting. </summary>
            <param name="SettingName"> Name of the setting </param>
            <param name="newValue"> New value for the setting </param>
            <remarks> If the setting name already exists, the value will be changed
            to match the new value. </remarks>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Add_Setting(System.String,System.String)">
            <summary> Set a value in the current user setting. </summary>
            <param name="SettingName"> Name of the setting </param>
            <param name="newValue"> New value for the setting </param>
            <remarks> If the setting name already exists, the value will be changed
            to match the new value. </remarks>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Get_Int_Setting(System.String)">
            <summary> Gets a pre-existing integer setting for this user  </summary>
            <param name="SettingName"> Name of the setting to fetch </param>
            <returns> Value of the integer setting, or -1 if the setting was not found </returns>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Get_String_Setting(System.String)">
            <summary> Gets a pre-existing string setting for this user  </summary>
            <param name="SettingName"> Name of the setting to fetch </param>
            <returns> Value of the string setting, or an empty string if the setting was not found </returns>
        </member>
        <member name="M:DLC.Tools.IS_UserSettings.Contains(System.String)">
            <summary> Checks to see if a particular setting already exists for this user </summary>
            <param name="SettingName"> Name of the setting to look for </param>
            <returns> TRUE if the setting exists, otherwise FALSE </returns>
        </member>
        <member name="P:DLC.Tools.IS_UserSettings.FileName">
            <summary> Gets and sets the name of the file which stores the user settings </summary>
        </member>
        <member name="F:DLC.Tools.Settings.DLC_UserSettings.fileName">
            <summary> Name of the XML file used to store the QC settings </summary>
        </member>
        <member name="F:DLC.Tools.Settings.DLC_UserSettings.custom_black">
            <summary> Off black color used for the fonts </summary>
        </member>
        <member name="M:DLC.Tools.Settings.DLC_UserSettings.#cctor">
            <summary> Static constructor for the QC_UserSettings class. </summary>
        </member>
        <member name="M:DLC.Tools.Settings.DLC_UserSettings.Load(System.Boolean)">
            <summary> Load the individual user settings </summary>
        </member>
        <member name="M:DLC.Tools.Settings.DLC_UserSettings.Save">
            <summary> Save the individual user settings </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Hansard_Special_Project">
            <summary> Flag indicates if this is for the Hansard Special Project </summary>
            <remarks>This flag is not stored between launches of the QC application</remarks>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Automatic_Numbering">
            <summary> Indicates the type or automatic numbering cascading to occur </summary>
            <remarks>This flag is not stored between launches of the QC application</remarks>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Language">
            <summary> Gets and sets the Language ID to use for this application </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Name_Divisions">
            <summary> Gets and sets the flag that indicates if the divisions which
            can carry a name should be named.   </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Background_Color">
            <summary> Gets and sets the color to use for the background on the main
             image panel. </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Page_Color">
            <summary> Gets and sets the color to use for the background color to use
            for each page on the main image panel. </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Text_Color">
            <summary> Gets and sets the color to use for the text related to
            a single page on the main image panel </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Selected_Color">
            <summary> Gets and sets the color to use for the background on the main
             image panel for a selected page. </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Approval_Reqd_For_Adobe">
            <summary> Gets and sets the flag which indicates if approval is needed for 
            automating adobe </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Autocrop">
            <summary> Gets and sets the flag which indicates if autocropping should occur
            automatically when rotating images small angles. </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Last_Rotation_Angle">
            <summary> Gets and sets the last rotation angle used </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Role">
            <summary> Gets and sets the last rotation angle used </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Stop_For_Errors">
            <summary> Gets or sets the flag to indicate that processing should stop 
            when the first error is encountered. </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.Derivative_Software">
            <summary> Gets and sets the type of software to use to create derivatives </summary>
        </member>
        <member name="P:DLC.Tools.Settings.DLC_UserSettings.JPEG2000_Derivative_Software">
            <summary> Gets and sets the type of software to use to create derivatives </summary>
        </member>
        <member name="T:DLC.Tools.IO.CS_TrackingDB_Tiny">
            <summary> CS_TrackingDatabase is the main object used to query the database for information </summary>
            <remarks> This class contains a static constructor and contains mostly static 
            members.   Since this is a database class, it does not make sense to have multiple
            instances to access a single database. <br /><br />
            Object created for University of Florida's Digital Library Center.  </remarks>
        </member>
        <member name="F:DLC.Tools.IO.CS_TrackingDB_Tiny.connectionString">
            <summary> Private constant string variable stores the connection string 
            to get to the Tracking Database on the SQL server. </summary>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.#cctor">
            <summary> Constructor for the CS_TrackingDB_Tiny class. </summary>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.is_bibid_format(System.String)">
            <summary> Gets a flag indicating if the provided string appears to be in 
            bib id format </summary>
            <param name="test_string"> string to check for bib id format </param>
            <returns> TRUE if this string appears to be in bib id format, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.is_valid_bibid(System.String)">
            <summary> Check to see if this is a valid bib id </summary>
            <param name="test_string"> String to test </param>
            <returns> TRUE if this is valid, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.BibID_From_Receiving(System.Int32)">
            <summary> Gets the BIB ID from the Receving ID by doing a lookup against the complete
            list of VIDS and BIBS. </summary>
            <param name="ReceivingID"> Receiving ID to check for </param>
            <returns> BIB ID for this material </returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.VID_From_Receiving(System.Int32)">
            <summary> Gets the VID from the Receving ID by doing a lookup against the complete
            list of VIDS and BIBS. </summary>
            <param name="VolumeID"> Volume ID to check for </param>
            <returns> VID for this material </returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Type_From_Receiving(System.Int32)">
            <summary> Gets the Resource Type from the Receving ID by doing a lookup against the complete
            list of VIDS and BIBS. </summary>
            <param name="ReceivingID"> Receiving ID to check for </param>
            <returns> Material Type</returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Refresh">
            <summary> Refreshes the list of bibs and vids </summary>
        </member>
        <member name="F:DLC.Tools.IO.CS_TrackingDB_Tiny.THROW_EXCEPTIONS">
            <summary> Flag indicates whether exceptions should be thrown </summary>
            <remarks> If this flag is set to TRUE, a <see cref="!:CS_Sample_Exception"/> 
            will be thrown if any error occurs while accessing the database. </remarks>
        </member>
        <member name="F:DLC.Tools.IO.CS_TrackingDB_Tiny.DISPLAY_ERRORS">
            <summary> Flag indicates whether a message should be displayed when
            errors occur. </summary>
            <remarks> Set this flag to TRUE to show a message box when errors occur. </remarks>
        </member>
        <member name="F:DLC.Tools.IO.CS_TrackingDB_Tiny.DISPLAY_INNER_EXCEPTIONS">
            <summary> Flag indicates if the text of the internal exception should
            be included in any message or exception thrown.  </summary>
            <remarks> Set to TRUE to show the text from the inner exception. </remarks>
        </member>
        <member name="F:DLC.Tools.IO.CS_TrackingDB_Tiny.ERROR_STRING">
            <summary> Error string displayed in the case of an error </summary>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.exception_caught(System.String,System.Exception)">
            <summary> Method is called when an exception is caught while accessing the database. </summary>
            <param name="stored_procedure_name"> Name of the stored procedure called </param>
            <param name="exception"> Exception caught while accessing the database </param>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Set_NextCD(System.Int32)">
            <summary> Stored Procedure to set the next cd number Written by: Mark Sullivan ( 9/28/2004 ) </summary>
            <param name="nextcd"> </param>
            <remarks> This method calls the stored procedure 'CS_Set_NextCD'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_All_Bib_List">
            <summary> Gets the list of bib id's with some summary information about each </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Bib_List'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Receiving_From_Bib(System.String,System.String)">
            <summary> Gets the receiving id from the bib id </summary>
            <param name="institutionCode"> Code for the institutions </param>
            <param name="bibid"> 8-digit number portion of the bib id </param>
            <remarks> This method calls the stored procedure 'CS_Receiving_From_Bib'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_All_Bibs_VIDS">
            <summary> Gets a list of all the volumes and bibs </summary>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_All_Bibs_VIDS'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_Archive_FileType">
            <summary>Method used to get all the archive file types</summary>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Check_CD_Existence(System.Int32)">
            <summary>Check to see if a CD has been sorted or not</summary>
            <param name="cdnumber"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Delete_ArchiveNumber(System.Int32)">
            <summary> Method used to delete a archive meets the specified number</summary>
            <param name="archiveNumber"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Save_Basic_CD_Info(System.Int32,System.String)">
            <summary> stored procedure used to save the basic CD informaton and get the ID for this CD(ArchiveMedia)</summary>
            <param name="cdnumber"></param>
            <param name="cdserialNum"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Stored procedures used to save the file range for a volume on a CD</summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_All_File_CheckSums(System.Int32)">
            <summary>static method used to get all the files and their check sums on the CD</summary>
            <param name="archiveMediaID"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_CD_Infor_By_CDNumber(System.Int32)">
            <summary>static method used to get the cd information by the cd number</summary>
            <param name="cdNumber"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_CD_Files_By_CDNumber(System.Int32)">
            <summary>static method used to get all files and their checksums for a specific cd number</summary>
            <param name="cdNumber"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>Stored procedure used to save the check sum(s) for each file</summary>
            <param name="volumeid"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="dateCreated"></param>
            <param name="dateModified"></param>
            <param name="extension"></param>
            <param name="archiveMediaID"></param>
            <param name="checksumType1"></param>
            <param name="checkSum1"></param>
            <param name="checksumType2"></param>
            <param name="checkSum2"></param>
            <returns></returns>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Bib_Length">
            <summary> Gets the length of the bib id </summary>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Bib_List">
            <summary> Gets the table which has a small bit of information for each bib id in the 
            tracking database.  </summary>
            <remarks> This can also be SET, and can be used to test applications away from the
            actual SQL database. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Bib_VID_List">
            <summary> Gets the table which has a small bit of information for each bib id in the 
            tracking database.  </summary>
            <remarks> This can also be SET, and can be used to test applications away from the
            actual SQL database. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_NextCD">
            <summary> Stored Procedure to get the next cd number Written by: Mark Sullivan ( 9/28/2004 ) </summary>
            <remarks> This property calls the stored procedure 'CS_Get_NextCD'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_PortableDrives">
            <summary> Get all the portable drive information </summary>
            <remarks> This property calls the stored procedure 'CS_Get_PortableDrives'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_All_CDArchives">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_CDArchives'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_Current_User_App_Roles">
            <summary> Get flags which indicate the type of user role </summary>
            <remarks> This property calls the stored procedure 'CS_Get_Current_User_App_Roles'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.IO.CS_TrackingDB_Tiny.Get_FTP_Server_Info">
            <summary> Get information about all the FTP servers </summary>
            <remarks> This property calls the stored procedure 'CS_Get_FTP_Server_Info'. </remarks>
            <exception cref="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="T:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception">
            <summary> CS_TrackingDatabase_Exception is an exception which can be thrown when there
            is an error while accessing the database.  This extends the <see cref="T:System.ApplicationException"/>
            class.  </summary>
        </member>
        <member name="M:DLC.Tools.IO.CS_TrackingDB_Tiny.CS_TrackingDatabase_Exception.#ctor(System.String)">
            <summary> Constructor for a new CS_TrackingDatabase_Exception object </summary>
            <param name="exceptionText"> Text of the exception to be displayed </param>
        </member>
        <member name="T:DLC.Tools.StartUp.VersionChecker">
             <summary>
             VersionChecker is a class used to check against a XML versioning database file on the network
             drives to determine if a newer version of an application is available. <br /> <br /> </summary>
             <remarks>  This object should be used as an application is launched to check against the XML
             versioning database on the network.  If there is a later version of the calling application, then this class
             will tell whether the update is mandatory.  If the update is requested, another Process
             can be launched to do the update. <br /> <br />
             To use this class, a custom versioning section (shown below) must exist in the Application Config file.  An example
             file is <a href="example.exe.config.html">here</a>, and below are just the sections needed.  This section must include 
             information on where the XML versioning database sits, as well as the application name and current version.
             <code>
            	&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            	&lt;configuration&gt;
            
            		&lt;!-- Define a custom section for VersionChecking                            --&gt;
            		&lt;configSections&gt;
            			&lt;section name=&quot;VersionChecker&quot;  type=&quot;System.Configuration.NameValueSectionHandler&quot; /&gt;
            		&lt;/configSections&gt;
               
            		&lt;!-- Below is information to allow for VersionChecking prior to execution.  --&gt;
            		&lt;!-- XML_Directory holds all the centralized version information and then   --&gt;
            		&lt;!-- the AppName and Version allow for checking this particular app.        --&gt;
            		&lt;VersionChecker&gt;
            			&lt;add key=&quot;XML_Directory&quot; value=&quot;\\Smathersnt12\DLCdocs\ScanQC\People\Mark\Applications\Versioning&quot; /&gt;
            			&lt;add key=&quot;AppName&quot; value=&quot;Aerial Image Collector&quot; /&gt;
            			&lt;add key=&quot;Version&quot; value=&quot;2.1.0&quot; /&gt;
            		&lt;/VersionChecker&gt;
               
            	&lt;/configuration&gt; 
             </code>
             <br /> Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
             <example> EXAMPLE 1: Example <a href="VersioningDB.xml">Versioning XML database</a> can be found below and 
             <a href="VersioningDB.xml">here</a>.  The <a href="VersioningDB.xsd">Versioning XSD file</a> can be 
             found <a href="VersioningDB.xsd">here</a>:
             <code>
            	&lt;VersionChecker xmlns=&quot;DLC&quot;&gt;
            		&lt;Application&gt;
            			&lt;Name&gt;DLC CD Manager&lt;/Name&gt;
            			&lt;NewVersion&gt;1.1.2&lt;/NewVersion&gt;
            			&lt;LastOldVersion&gt;1.0.2&lt;/LastOldVersion&gt;
            			&lt;SetupFile&gt;\\Smathersnt12\DLCdocs\ScanQC\People\Mark\SetupFiles\DLC CD Manager\Upgrade Only\Setup.exe&lt;/SetupFile&gt;
            			&lt;Mandatory&gt;true&lt;/Mandatory&gt;
            		&lt;/Application&gt;
            		&lt;Application&gt;
            			&lt;Name&gt;DLC FTP Application&lt;/Name&gt;
            			&lt;NewVersion&gt;2.1.3&lt;/NewVersion&gt;
            			&lt;LastOldVersion&gt;2.0.0&lt;/LastOldVersion&gt;
            			&lt;SetupFile&gt;\\Smathersnt12\DLCdocs\ScanQC\People\Mark\SetupFiles\DLC FTP Application\Upgrade Only\Setup.exe&lt;/SetupFile&gt;
            			&lt;Mandatory&gt;true&lt;/Mandatory&gt;
            		&lt;/Application&gt;
            		&lt;Application&gt;
            			&lt;Name&gt;DLC TimeTracker&lt;/Name&gt;
            			&lt;NewVersion&gt;1.1.5&lt;/NewVersion&gt;
            			&lt;LastOldVersion&gt;1.0.0&lt;/LastOldVersion&gt;
            			&lt;SetupFile&gt;\\Smathersnt12\DLCdocs\ScanQC\People\Mark\SetupFiles\DLC TimeTracker\Upgrade Only\Setup.exe&lt;/SetupFile&gt;
            			&lt;Mandatory&gt;false&lt;/Mandatory&gt;
            		&lt;/Application&gt;
            	&lt;/VersionChecker&gt;
             </code>
             <br /> <br /> EXAMPLE 2: Below is an example of a program which performs this version check.
             <code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using GeneralTools;
            
            	namespace DLC.Tools
            	{
            		public class Startup
            		{
            			static void Main() 
            			{
            				// Create a version checker to see if this is the latest version
            				VersionChecker versionChecker = new VersionChecker();
            
            				// Update this application, as necessary
            				versionChecker.UpdateAsNecessary();
            
            				// Only continue if this application is not being updated
            				if ( !versionChecker.Updating )
            				{
            					// Now, if an error was encountered anywhere, show an error message
            					if ( versionChecker.Error )
            						MessageBox.Show("An error was encountered while performing the routine Version check.              \n\n" +
            							"Your application may not be the most recent version.","Version Check Error", MessageBoxButtons.OK, 
            							MessageBoxIcon.Warning  );
            
            					// Now, launch the actual work
            					Application.Run( new MainForm() );
            				}
            			}
            		}
            	} 
             </code> </example>
        </member>
        <member name="F:DLC.Tools.StartUp.VersionChecker.versioning">
            <summary> Private DataTable class holds the information from the XML versioning
            database to verify versioning against. </summary>
        </member>
        <member name="F:DLC.Tools.StartUp.VersionChecker.error">
            <summary> Private boolean flag indicates if an error occurred during any of 
            the processed. </summary>
        </member>
        <member name="F:DLC.Tools.StartUp.VersionChecker.updating">
            <summary> Flag indicates if the update() function has been called. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionChecker.#ctor">
            <summary> Constructor for a new VersionChecker object. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionChecker.UpdateExists">
            <summary> Checks to see if a later version of the calling application exists. </summary>
            <returns> TRUE if this is not the latest version </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionChecker.UpdateMandatory">
            <summary> Checks to see if any update for this is mandatory or not. </summary>
            <returns> TRUE if there is a mandatory update available </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionChecker.UpdateAsNecessary">
            <summary> Performs all of the querying to determine if this application needs to be
            updated, queries the user, and updates as necessary. </summary>
            <returns> TRUE if it is updating, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionChecker.Update">
            <summary> Runs the MSI file for this application from the network location. </summary>
            <remarks> The calling application should quit immediately after calling this. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionChecker.CreateXML">
            <summary> Method used to build the initial XML and XML schemas. </summary>
            <remarks> This remains here just in case it is ever needed again </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="P:DLC.Tools.StartUp.VersionChecker.Error">
            <summary> Returns TRUE if an error occurred anywhere, otherwise FALSE. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="P:DLC.Tools.StartUp.VersionChecker.Updating">
            <summary> Returns TRUE if the application is updating, otherwise FALSE.  </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class. </example>
        </member>
        <member name="T:DLC.Tools.IO.myDriveInfo_Collection">
            <summary>  collection of <see cref="T:DLC.Tools.IO.myDriveInfo"/> objects for a bib id. This is used to 
            iterate through, add, remove, and confirm the existence of drives within this collection. <br/> <br/></summary>
            <remarks> Written by Mark Sullivan (2005) </remarks>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.#ctor">
            <summary> Constructor for the myDriveInfo_Collection object. </summary>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.Add(DLC.Tools.IO.myDriveInfo)">
            <summary> Add a new myDriveInfo to this collection. </summary>
            <param name="myDriveInfo"> myDriveInfo object for this new myDriveInfo </param>
            <returns> The index for this new Divsion </returns>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.Insert(System.Int32,DLC.Tools.IO.myDriveInfo)">
            <summary> Insert a new myDriveInfo into a specified index in this collection.  </summary>
            <param name="Index"> Index specifying location to insert new myDriveInfo </param>
            <param name="myDriveInfo"> myDriveInfo object for this new myDriveInfo </param>
            <exception cref="T:System.Exception"> Throws an <see cref="T:System.Exception"/> if there is 
            an index out of bounds error. </exception>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.RemoveAt(System.Int32)">
            <summary> Remove an existing myDriveInfo from this collection. </summary>
            <param name="Index"> Index of the item to remove. </param>
            <exception cref="T:System.Exception"> Throws a <see cref="T:System.Exception"/> if there is 
            an index out of bounds error. </exception>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.Remove(DLC.Tools.IO.myDriveInfo)">
            <summary> Remove an existing myDriveInfo from this collection. </summary>
            <param name="myDriveInfo"> myDriveInfo to remove from this collection. </param>
            <exception cref="T:System.Exception"> Throws a <see cref="T:System.Exception"/> if the specified
            <see cref="T:DLC.Tools.IO.myDriveInfo"/> object to remove is not in this collection. </exception>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.Contains(DLC.Tools.IO.myDriveInfo)">
            <summary> Check to see if a myDriveInfo currently exists in this collection.  </summary>
            <param name="myDriveInfo"> myDriveInfo to check for existence in this collection. </param>
            <returns>TRUE if the provided myDriveInfo is already part of this myDriveInfo Collection </returns>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.GetEnumerator">
            <summary> Return an enumerator to step through this collection of myDriveInfos. </summary>
            <returns> A Type-Safe myDriveInfoEnumerator</returns>
            <remarks> This version is used in the C# Compiler to detect type conflicts at compilation. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.System#Collections#IEnumerable#GetEnumerator">
            <summary> Return an enumerator to step through this collection of myDriveInfos. </summary>
            <returns> A IEnumerator object to step through this collection of myDriveInfos. </returns>
            <remarks> Explicit interface implementation to support interoperability with other common 
            language runtime-compatible langueages. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.myDriveInfo_Collection.Item(System.Int32)">
            <summary> Address a single drive from this Collection, by index. </summary>
        </member>
        <member name="T:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator">
            <summary> Inner class implements the <see cref="T:System.Collections.IEnumerator"/> interface and iterates through 
            the <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/> in this collection. <br/> <br/> </summary>
            <remarks> Inclusion of this strongly-typed iterator allows the use of the foreach .. in structure to 
            iterate through all of the <see cref="T:DLC.Tools.IO.myDriveInfo"/> objects in the 
            <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/> object. </remarks>
        </member>
        <member name="F:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.position">
            <summary> Stores the current position within the <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/>. </summary>
        </member>
        <member name="F:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.myDriveInfos">
            <summary> Reference to the <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/> to iterate through. </summary>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.#ctor(DLC.Tools.IO.myDriveInfo_Collection)">
            <summary> Constructore creates a new myDriveInfoEnumerator to iterate through
            the <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/>. </summary>
            <param name="myDriveInfo_Collection"> <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/> to iterate through </param>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.MoveNext">
            <summary> Move to the next <see cref="T:DLC.Tools.IO.myDriveInfo"/> in this <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/>. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> Method is required by the IEnumerator interface. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.Reset">
            <summary> Reset to the position just before the first position.  
            Ready for the MoveNext() method to be called. </summary>
            <remarks> Method is required by the IEnumerator interface. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.Current">
            <summary> Return the current <see cref="T:DLC.Tools.IO.myDriveInfo"/> from the <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/>. </summary>
            <remarks> This type-safe version is used in the C# Compiler to detect type conflicts at compilation. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.myDriveInfo_Collection.myDriveInfoEnumerator.System#Collections#IEnumerator#Current">
            <summary> Return the current object from the <see cref="T:DLC.Tools.IO.myDriveInfo_Collection"/>. </summary>
            <remarks> Explicit interface implementation to support interoperability with other common 
            language runtime-compatible langueages. </remarks>
        </member>
        <member name="M:DLC.Tools.Settings.Division_Types_Errors_Reader.get_Division_Types_Table(System.Boolean)">
            <summary> Gets the division table applicable to the current
            type of class.  </summary>
            <remarks>This returns a trimmed down list if this is an image class
            item, and the complete list if this is a text class item. </remarks>
            <param name="imageClass"></param>
        </member>
        <member name="M:DLC.Tools.Settings.Division_Types_Errors_Reader.Division_Type(System.Int32)">
            <summary> Gets the name of the division type </summary>
            <param name="divTypeID"> Division Type ID </param>
            <returns> Name of the division </returns>
        </member>
        <member name="P:DLC.Tools.Settings.Division_Types_Errors_Reader.Volume_Error_Types_Table">
            <summary> Gets the table of possible volume error types </summary>
        </member>
        <member name="P:DLC.Tools.Settings.Division_Types_Errors_Reader.Division_Types_Table">
            <summary> Gets the complete table of possible division types</summary>
        </member>
        <member name="P:DLC.Tools.Settings.Division_Types_Errors_Reader.Image_Division_Types_Table">
            <summary> Gets the table of division types for an image class item</summary>
        </member>
        <member name="P:DLC.Tools.Settings.Division_Types_Errors_Reader.File_Error_Types_Table">
            <summary> Gets the table of possible file error types </summary>
        </member>
        <member name="T:DLC.Tools.IO.DirectoryCrawler_UserDefinedCollection">
            <summary> DirectoryCrawler_UserDefinedCollection is a collection of the user defined
            fields which have been added to this DirectoryCrawler.
            </summary>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_UserDefinedCollection.#ctor">
            <summary> Constructor for a new DirectoryCrawler_UserDefinedCollection </summary>
        </member>
        <member name="T:DLC.Tools.IO.DirectoryCrawler">
             <summary> DirectoryCrawler is a class which will check a directory, and every subdirectory,
             and compile a list of all the files. <br /> <br /> </summary>
             <remarks> Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
             <example> EXAMPLE 1: The example below generates the following output files: <ul>
             <li type="circle" /> <a href="DirCrawlerExample.html"> XHTML Output File </a>
             <li type="circle" /> <a href="DirCrawlerExample.txt"> Text Output File </a>
             <li type="circle" /> <a href="DirCrawlerExample.xml"> XML Output File </a> and associated <a href="DirCrawlerExample.xsd"> XSD File </a>
             </ul>
             <code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using CustomTools.IO;
            	using CustomTools.Forms;
            
            	namespace CustomTools
            	{
            		public class DirectoryCrawler_Example
            		{
            			static void Main() 
            			{
            				// Create a new DirectoryCrawler object to iterate through directories
            				DirectoryCrawler searcher = new DirectoryCrawler();
            
            				// Set the first starting directory, and then the user defined field
            				searcher.StartingDirectory = "F:\\";
            				searcher.UserDefinedField = "DVD Drive";
            
            				// Tell the searcher to iterate through the just set information
            				searcher.Iterate();
            
            				// Now, iterate through another drive/directory
            				searcher.Iterate( "G:\\", "CD Rom" );
            
            				// Display this data set
            				ShowDataTable shower = new ShowDataTable( searcher.DataSet );
            				shower.ShowDialog();
            
            				// Output to HTML, Text, and XML
            				searcher.CreateHTML( "C:\\DirCrawlerExample" );
            				searcher.CreateText( "C:\\DirCrawlerExample" );
            				searcher.CreateXML( "C:\\DirCrawlerExample" );
            				
            				// Print out the name of each file to the Console window by iterating through the File Collection
            				foreach ( DirectoryCrawler_File thisFile in searcher.Files )
            					Console.WriteLine( thisFile.Name + "." + thisFile.Extension + " from the user defined search '" + thisFile.UserDefined + "'" );
            			}
            		}
            	} 
             </code> <br /> <br />
             Below is what is printed to the Console when the application above is executed:
             <code>
            	43.TIF from the user defined search 'DVD Drive'
            	44.TIF from the user defined search 'DVD Drive'
            	45.TIF from the user defined search 'DVD Drive'
            	46.TIF from the user defined search 'DVD Drive'
            	47.TIF from the user defined search 'DVD Drive'
            	48.TIF from the user defined search 'DVD Drive'
            	49.TIF from the user defined search 'DVD Drive'
            	50.TIF from the user defined search 'DVD Drive'
            	51.TIF from the user defined search 'DVD Drive'
            	52.TIF from the user defined search 'DVD Drive'
            	53.TIF from the user defined search 'DVD Drive'
            	54.TIF from the user defined search 'DVD Drive'
            	55.TIF from the user defined search 'DVD Drive'
            	56.TIF from the user defined search 'DVD Drive'
            	12057_1938_INDEX_19.JPG from the user defined search 'CD Rom'
            	12057_1938_INDEX_19.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_19.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_2.JPG from the user defined search 'CD Rom'
            	12057_1938_INDEX_2.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_19_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_20.JPG from the user defined search 'CD Rom'
            	12057_1938_INDEX_20.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_2.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_21.JPG from the user defined search 'CD Rom'
            	12057_1938_INDEX_21.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_2_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_21_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_23_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_23.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_21.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_24.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_22.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_23.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_22.SID from the user defined search 'CD Rom'
            	12057_1938_INDEX_20.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_24.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_22.JPG from the user defined search 'CD Rom'
            	12057_1938_INDEX_23.JPG from the user defined search 'CD Rom'
            	12057_1938_INDEX_20_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_22_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_24_prcss.TIF from the user defined search 'CD Rom'
            	12057_1938_INDEX_24.JPG from the user defined search 'CD Rom' 
             </code> </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.formatIdentifier">
            <summary> Private integer value which holds the format type. 0-HTML, 1-Text, 2-XML, 3-Access, 4-Display </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.startingDirectory">
            <summary> Private string value holds the starting directory for iteration purposes. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.startingDirectoryList">
            <summary> Private string value holds the starting directories which were used for iteration purposes. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.listOfFiles">
            <summary> Private DataSet value which holds the list of all the files. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.dirTbl">
            <summary> Private DataTables provide direct access to the tables inside the DataSet. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.fileTbl">
            <summary> Private DataTables provide direct access to the tables inside the DataSet. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.lastDirKey">
            <summary> Private integer variable holds the last directory key used. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.userControlledField">
            <summary> Field which the user can control to differentiate between different sources. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.allFiles">
            <summary> File Collection used when the Files property is called. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.allFields">
            <summary> Collection of all the user defined fields used </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.useObject">
            <summary> Flag indicates whether object references should be saved for a user specified
            custom object to link to each found file. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler.customObject">
            <summary> Stores the custom objects which are added to each file found. </summary>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.#ctor">
            <summary> Constructor for the DirectoryCrawler class which iterates through a directory and
            creates an ouput with all the files. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.#ctor(System.String)">
            <summary> Constructor for the DirectoryCrawler class which iterates through a directory and
            creates an ouput with all the files. </summary>
            <param name="startingDirectory"> Starting point for directory iteration </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.#ctor(System.Int32,System.String,System.String)">
            <summary> Constructor for the DirectoryCrawler class which iterates through a directory and
            creates an ouput with all the files. </summary>
            <param name="formatIdentifier"> Value which tells the format type. 0-HTML, 1-Text, 2-XML, 3-Access, 4-Display  </param>
            <param name="OutputFile"> File and path for the output file. (minus extension) </param>
            <param name="startingDirectory"> Starting point for directory iteration </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.Get_Files(System.Object)">
            <summary> Gets a collection of file objects for the files which 
            have a certain user defined field </summary>
            <param name="UserDefinedField"> Field to return the collection of matching files for </param>
            <returns> Collection of files </returns>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.Iterate">
            <summary> Starts the process of iterating through all of the directories and subfiles. </summary>
            <returns> TRUE if successful, or FALSE if an error occurred </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.Iterate(System.String)">
            <summary> Starts the process of iterating through all of the directories and subfiles. </summary>
            <param name="StartingDirectory"> Directory to iterate through collecting file information </param>
            <returns> TRUE if successful, or FALSE if an error occurred </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.Iterate(System.String,System.Object)">
            <summary> Starts the process of iterating through all of the directories and subfiles. </summary>
            <param name="StartingDirectory"> Directory to iterate through collecting file information </param>
            <param name="UserDefinedField"> Field which is user defined in all of the outputs </param>
            <returns> TRUE if successful, or FALSE if an error occurred </returns>
            <remarks> The User Defined Field is used to differentiate between different searches, or different
            source directories, when multiple searches are performed back-to-back. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.Iterate(System.String,System.Object,System.String)">
            <summary> Starts the process of iterating through all of the directories and subfiles. </summary>
            <param name="StartingDirectory"> Directory to iterate through collecting file information </param>
            <param name="UserDefinedField"> Field which is user defined in all of the outputs </param>
            <param name="SearchString"> Search string to match against the names of files in the subdirectories </param>
            <returns> TRUE if successful, or FALSE if an error occurred </returns>
            <remarks> The User Defined Field is used to differentiate between different searches, or different
            source directories, when multiple searches are performed back-to-back. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.Iterate(System.String,System.Object,System.String,System.String)">
            <summary> Starts the process of iterating through all of the directories and subfiles. </summary>
            <param name="StartingDirectory"> Directory to iterate through collecting file information </param>
            <param name="UserDefinedField"> Field which is user defined in all of the outputs </param>
            <param name="SearchString"> Search string to match against the names of files in the subdirectories </param>
            <returns> TRUE if successful, or FALSE if an error occurred </returns>
            <remarks> The User Defined Field is used to differentiate between different searches, or different
            source directories, when multiple searches are performed back-to-back. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.CreateHTML(System.String)">
            <summary> Creates a HTML output file of the current subdirectory and file information.  </summary>
            <param name="OutputFile"> Path and filename for the output HTML file  (minus extension) </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.CreateText(System.String)">
            <summary> Creates a text output file  of the current subdirectory and file information. </summary>
            <param name="OutputFile"> Path and filename for the output Text file  (minus extension)</param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.CreateXML(System.String)">
            <summary> Creates a XML and XSD file output of the current subdirectory and file information. </summary>
            <param name="OutputFile"> Path and filename for the output XML and XSD files (minus extension) </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.CreateAccess(System.String)">
            <summary> Creates an Access database of the current subdirectory and file information. </summary>
            <param name="OutputFile"> Path and filename for the output MDB file (minus extension) </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.checkDir(System.String,System.String,System.String)">
            <summary> Private helper method which calls itself recursively to run through
            this directory and all subdirectories. </summary>
            <param name="directory"> Directory name </param>
            <param name="searchString"> Search string to match against the names of files in the subdirectories </param>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler.createDataSet">
            <summary> Private helper method which creates the disconnected DataSet in
            memory which will house the names of all the files. </summary>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.DataSet">
            <summary> Gets the DataSet which has the list of all files under this directory. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
            <remarks>
            This returns two DataTables which containe has the following DataColumn elements: <br/> <br/>
            Table Name: Directories <br/>
            <table border="1">
            <tr>
            <th><font size="2">Column Index</font></th>
            <th><font size="2">Column Name</font></th>
            <th><font size="2">DataType</font></th>
            <th><font size="2">Description</font></th>
            </tr>
            <tr>
            <td><font size="2">0</font></td>
            <td><font size="2">Key</font></td>
            <td><font size="2"><see cref="T:System.Int32"/></font></td>
            <td><font size="2">Primary key to this directory (referenced in the next table)</font></td>
            </tr>
            <tr>
            <td><font size="2">1</font></td>
            <td><font size="2">Reference</font></td>
            <td><font size="2"><see cref="T:System.String"/></font></td>
            <td><font size="2">Directory in string form </font></td>
            </tr>
            </table><br/> <br/>
            Table Name: Files <br/>
            <table border="1">
            <tr>
            <th><font size="2">Column Index</font></th>
            <th><font size="2">Column Name</font></th>
            <th><font size="2">DataType</font></th>
            <th><font size="2">Description</font></th>
            </tr>
            <tr>
            <td><font size="2">0</font></td>
            <td><font size="2">Name</font></td>
            <td><font size="2"><see cref="T:System.String"/></font></td>
            <td><font size="2">File Name (minus extension and path)</font></td>
            </tr>
            <tr>
            <td><font size="2">1</font></td>
            <td><font size="2">Extension</font></td>
            <td><font size="2"><see cref="T:System.String"/></font></td>
            <td><font size="2">Extension for this file </font></td>
            </tr>
            <tr>
            <td><font size="2">2</font></td>
            <td><font size="2">DirKey</font></td>
            <td><font size="2"><see cref="T:System.Int32"/></font></td>
            <td><font size="2">References the primary key in the Directories table</font></td>
            </tr>
            <tr>
            <td><font size="2">3</font></td>
            <td><font size="2">Size</font></td>
            <td><font size="2"><see cref="T:System.Int64"/></font></td>
            <td><font size="2">Size of this file (in KB) </font></td>
            </tr>
            <tr>
            <td><font size="2">4</font></td>
            <td><font size="2">Created</font></td>
            <td><font size="2"><see cref="T:System.DateTime"/></font></td>
            <td><font size="2">Date and Time this file was created</font></td>
            </tr>
            <tr>
            <td><font size="2">5</font></td>
            <td><font size="2">Modified</font></td>
            <td><font size="2"><see cref="T:System.DateTime"/></font></td>
            <td><font size="2">Date and Time this file was last modified</font></td>
            </tr>
            <tr>
            <td><font size="2">6</font></td>
            <td><font size="2">UserDefined</font></td>
            <td><font size="2"><see cref="T:System.String"/></font></td>
            <td><font size="2">Value set by the user associated with this iteration</font></td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.All_User_Defined_Fields">
            <summary> Returns the collection of all user defined fields </summary>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.UserDefinedField">
            <summary> Gets and sets a field which is user defined in all of the outputs.  </summary>
            <remarks> This field is used to differentiate between different searches, or different
            source directories, when multiple searches are performed back-to-back. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.StartingDirectory">
            <summary> Gets and sets the directory to iterate through collecting file information.  </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.Files">
            <summary> Gets a collection of <see cref="T:DLC.Tools.IO.DirectoryCrawler_File"/> objects for the files found. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
            <remarks> This returns a <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/> object which is used to iterate
            through all of the found <see cref="T:DLC.Tools.IO.DirectoryCrawler_File"/> objects. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.UserDefinedObject">
            <summary> Gets and sets the user defined object which will be included in the <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/>
            accessible through this class's <see cref="P:DLC.Tools.IO.DirectoryCrawler.Files"/> method. </summary>
            <remarks> Set to null to disable the custom object.  </remarks>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler.ToStringCollection">
            <summary> Gets the list of all files and directories as a string collection. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.Forms.About.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DLC.Tools.Forms.About.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DLC.Tools.Forms.About.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DLC.Tools.FDA.FDA_Report_Type">
            <summary> Enumeration indicates the type of FDA Ingest Report </summary>
        </member>
        <member name="F:DLC.Tools.FDA.FDA_Report_Type.INGEST">
            <summary> FDA Ingest Report when a SIP is successfully ingested into the digital archive </summary>
        </member>
        <member name="F:DLC.Tools.FDA.FDA_Report_Type.WITHDRAWAL">
            <summary> Report is created when an item is withdrawn from the digital archive </summary>
        </member>
        <member name="F:DLC.Tools.FDA.FDA_Report_Type.DISSEMINATION">
            <summary> Dissemination Report is written when an item is re-ingested into the archive </summary>
        </member>
        <member name="F:DLC.Tools.FDA.FDA_Report_Type.ERROR">
            <summary> FDA Ingest Error Report when a SIP is not ingested into the digital archive </summary>
        </member>
        <member name="F:DLC.Tools.FDA.FDA_Report_Type.INVALID">
            <summary> Used to indicate an unrecognized FDA report type </summary>
        </member>
        <member name="T:DLC.Tools.FDA.FDA_Report_Data">
            <summary> Class stores all the important data from a FDA Ingest Report </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_Report_Data.#ctor">
            <summary> Constructor creates a new instance of the FDA_Report_Data class </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_Report_Data.ToString">
            <summary> Returns the basic information about this report </summary>
            <returns>Report information as text </returns>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Report_Type">
            <summary> Gets or sets the type of report which generated this data </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Files">
            <summary> Gets the collection of files associated with this IEID </summary>
            <remarks>Returned as an ArrayList of FDA_File objects</remarks>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.IEID">
            <summary> Gets the IEID (Intellectual Entity ID) for this FDA report </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Package">
            <summary> Gets the submitted package name for this IEID </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Account">
            <summary> Gets the account information submitted with this package </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Project">
            <summary> Gets the project information submitted with this package </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Message_Note">
            <summary> Gets the message or note returned with the report </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.FileName">
            <summary> Gets or sets the name of the file read for this report </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Date">
            <summary> Gets the date this report was created </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Warnings">
            <summary> Gets or sets the number of warnings in this package </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_Report_Data.Report_Type_String">
            <summary> Gets the report type as a string </summary>
        </member>
        <member name="T:DLC.Tools.FDA.FDA_File">
            <summary> Class stores all the information about a file which was submitted
            to the FDA. </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_File.#ctor">
            <summary> Constructor creates a new instance of the FDA_File class </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_File.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary> Constructor creates a new instance of the FDA_File class </summary>
            <param name="id">ID for this file in the FDA</param>
            <param name="name">Name (or path) of the file</param>
            <param name="size">Size of the file</param>
            <param name="md5_checksum">MD5 checksum for the file</param>
            <param name="sha1_checksum">SHA-1 checksum for the file</param>
            <param name="preservation">Preservation level applied to this file</param>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_File.Add_Warning(System.String,System.String)">
            <summary> Add a new warning to this file </summary>
            <param name="Code"> Warning code for this file-level warning </param>
            <param name="Text"> Warning text for this file-level warning </param>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.ID">
            <summary> Gets or sets the ID for this file in the FDA </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.Name">
            <summary> Gets or sets the name (or path) for this file in the FDA </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.MD5_Checksum">
            <summary> Gets or sets the MD5 checksum result for this file in the FDA </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.SHA1_Checksum">
            <summary> Gets or sets the SHA-1 checksum result for this file in the FDA </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.Preservation">
            <summary> Gets or sets the preservation level for this file in the FDA </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.Event">
            <summary> Gets or sets the text of any event linked to this file </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.Size">
            <summary> Gets or sets the size of this file in the FDA </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.XML_Node">
            <summary> Gets or sets the source XML node for this file from the FDA report </summary>
            <remarks>This is used when creating a new, more compact version of the FDA Ingest Report</remarks>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File.Warnings">
            <summary> Gets the collection of warnings linked to this file </summary>
            <remarks>Returned as an ArrayList of FDA_File_Warning objects</remarks>
        </member>
        <member name="T:DLC.Tools.FDA.FDA_File_Warning">
            <summary> Class stores the basic information about a file-level warning in a FDA report </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_File_Warning.#ctor">
            <summary> Constructor creates a new instance of the FDA_File_Warning class </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_File_Warning.#ctor(System.String,System.String)">
            <summary> Constructor creates a new instance of the FDA_File_Warning class </summary>
            <param name="Code"> Warning code for this file-level warning </param>
            <param name="Text"> Warning text for this file-level warning </param>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File_Warning.Code">
            <summary> Gets or sets the code for this file-level warning </summary>
        </member>
        <member name="P:DLC.Tools.FDA.FDA_File_Warning.Text">
            <summary> Gets or sets the text for this file-level warning </summary>
        </member>
        <member name="T:DLC.Tools.StartUp.DLC_SecurityInfo">
            <summary>  [DO NOT USE - UNDER CONSTRUCTION] <br/> <br/> 
            DLC_SecurityInfo checks for DLC specific domain user groups in the SMATHERSLIB domain. <br/> <br/> </summary>
            <remarks> This class extends the <see cref="T:DLC.Tools.StartUp.SecurityInfo"/> object.  <br/> <br/>
            Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
        </member>
        <member name="T:DLC.Tools.StartUp.SecurityInfo">
            <summary> Object used to determine and ensure security.  It allows
            for reading from the registry, checking local users and computer information, 
            and writing and reading to encrypted files. <br/><br/>
            </summary>
            <remarks> This class allows for the following actions: <ul>
            <li type="circle"/> Encrypting and Decrypting strings. [ <see cref="M:DLC.Tools.StartUp.SecurityInfo.EncryptString(System.String,System.String,System.String)"/> and <see cref="M:DLC.Tools.StartUp.SecurityInfo.DecryptString(System.String,System.String,System.String)"/> ] 
            <li type="circle"/> Reading and Writing to encrypted files. [ <see cref="M:DLC.Tools.StartUp.SecurityInfo.ReadFromEncryptedFile(System.String,System.String,System.String,System.Int32,System.Int32)"/> and <see cref="M:DLC.Tools.StartUp.SecurityInfo.WriteToEncryptedFile(System.String,System.String,System.String,System.String,System.Int32)"/> ] 
            <li type="circle"/> Getting machine identifiers [ <see cref="P:DLC.Tools.StartUp.SecurityInfo.MAC_Address"/> and <see cref="M:DLC.Tools.StartUp.SecurityInfo.HardDriveSerial(System.Char)"/> ]  
            <li type="circle"/> Reading keys from the Registry. [ <see cref="M:DLC.Tools.StartUp.SecurityInfo.LocalMachineKey(System.String,System.String)"/> and <see cref="M:DLC.Tools.StartUp.SecurityInfo.CurrentUserKey(System.String,System.String)"/> ] 
            <li type="circle"/> Getting the current username. [ <see cref="P:DLC.Tools.StartUp.SecurityInfo.UserName"/> ]
            <li type="circle"/> Getting username and security level information from a security database.
            [ <see cref="P:DLC.Tools.StartUp.SecurityInfo.SecurityLevel"/>,  <see cref="M:DLC.Tools.StartUp.SecurityInfo.GetSecurityLevel(System.String)"/>, <see cref="P:DLC.Tools.StartUp.SecurityInfo.UserNameFromDB"/>, and <see cref="M:DLC.Tools.StartUp.SecurityInfo.UserNameFromLogon(System.String)"/> ] 
            </ul> <br/> <br/>
            Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
        </member>
        <member name="F:DLC.Tools.StartUp.SecurityInfo.dbConnect">
            <summary> Encrypted connection string to the Security database.  </summary>
        </member>
        <member name="F:DLC.Tools.StartUp.SecurityInfo.securityLevels">
            <summary> Private DataTable holds all of the user and security levels information for all the users. </summary>
        </member>
        <member name="F:DLC.Tools.StartUp.SecurityInfo.dataPulled">
            <summary> Private boolean flag indicates that data has been pulled from the database. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.#ctor">
            <summary> Default constructor for the SecurityLock object. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.HardDriveSerial(System.Char)">
            <summary> Returns the hard drive serial number for the hard drive indicated by drive letter </summary>
            <param name="driveLetter"> Drive letter for the drive in question </param>
            <returns> Hard drive serial number </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.LocalMachineKey(System.String,System.String)">
            <summary> Returns a string value from the registry under HKEY_LOCAL_MACHINE. </summary>
            <param name="keyLocation"> Location of the key (i.e. "Control Panel\Desktop") </param>
            <param name="valueName"> Name of the value to retrieve </param>
            <returns> String value from the registry, or "-1" if an error occurs </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.CurrentUserKey(System.String,System.String)">
            <summary> Returns a string value from the registry under HKEY_CURRENT_USER. </summary>
            <param name="keyLocation"> Location of the key (i.e. "Control Panel\Desktop") </param>
            <param name="valueName"> Name of the value to retrieve </param>
            <returns> String value from the registry, or "-1" if an error occurs </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.GetSecurityLevel(System.String)">
            <summary> Returns the security level for the specified logon. </summary>
            <param name="systemLogOn"> Logon to the NT server. </param>
            <returns> Security level as an integer, or -1 if there is an error. </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.UserNameFromLogon(System.String)">
            <summary> Returns the user name for the user, as specified by NT login, from the Security database. </summary>
            <param name="logon"> NT Logon </param>
            <returns> The user's name from the security database </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.getSecurityInfoFromDb">
            <summary> Private helper method that pulls all the data from 
            the database in regards to users and groups.  </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.AddScanTechToDB(System.String,System.String)">
            <summary> Add a scan tech to the security database. </summary>
            <param name="studentName"> Name of the student to add. </param>
            <param name="studentLogon"> User logon </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.ReadFromEncryptedFile(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> Reads text from a file encrypted in DES encryption. (128 bit symmetric encryption) </summary>
            <param name="filename"> Path and name of file to be read from</param>
            <param name="key"> 8 character (64bit) key for decryption</param>
            <param name="IV"> 8 character (64bit) initialization vector for decryption</param>
            <param name="position"> Character position to start reading from</param>
            <param name="length"> Number of characters to read from the file</param>
            <returns> Character array of data read and decrypted from file or a NULL if there was an error</returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.WriteToEncryptedFile(System.String,System.String,System.String,System.String,System.Int32)">
            <summary> Writes text to a file encrypted in DES encryption. (128 bit symmetric encryption) </summary>
            <param name="textToWrite"> Text which will be written to the file</param>
            <param name="filename"> Path and name of file to be written to</param>
            <param name="key"> 8 character (64bit) key for encryption</param>
            <param name="IV"> 8 character (64bit) initialization vector for encryption</param>
            <param name="position"> Character position in file to write the text</param>
            <returns> TRUE if written successfully, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.SHA1_EncryptString(System.String)">
            <summary> Encrypt a string, given the string.  </summary>
            <param name="Source"> String to encrypt </param>
            <returns> The encrypted string </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.DES_EncryptString(System.String,System.String,System.String)">
            <summary> Encrypt a string, given the string.  </summary>
            <param name="Source"> String to encrypt </param>
            <param name="Key"> Key for the encryption </param>
            <param name="IV"> Initialization Vector for the encryption </param>
            <returns> The encrypted string </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.EncryptString(System.String,System.String,System.String)">
            <summary> Encrypt a string, given the string, the key, and the IV values.  </summary>
            <param name="Source"> String to encrypt </param>
            <param name="Key"> Key for the encryption </param>
            <param name="IV"> Initialization Vector for the encryption </param>
            <returns> The encrypted string </returns>
        </member>
        <member name="M:DLC.Tools.StartUp.SecurityInfo.DecryptString(System.String,System.String,System.String)">
            <summary> Decrypt a string, given the string, the key, and the IV values.  </summary>
            <param name="Source"> String to decrypt </param>
            <param name="Key"> Key for the encryption </param>
            <param name="IV"> Initialization Vector for the encryption </param>
            <returns> The decrypted string </returns>
        </member>
        <member name="P:DLC.Tools.StartUp.SecurityInfo.MAC_Address">
            <summary> Gets the MAC address of the network adapter for the current computer </summary>
            <remarks> The MAC address is returned as a string in the form 00:##:##:##:##:##. </remarks>
        </member>
        <member name="P:DLC.Tools.StartUp.SecurityInfo.UserName">
            <summary> Gets the complete current users name as a string. </summary>
            <remarks> This name is returned in the form 'DOMAIN\username'. </remarks>
        </member>
        <member name="P:DLC.Tools.StartUp.SecurityInfo.SecurityLevel">
            <summary> Gets the security level for the current logon. </summary>
            <remarks> Returns -1 if there is a problem connecting to the Security database. </remarks>
        </member>
        <member name="P:DLC.Tools.StartUp.SecurityInfo.UserNameFromDB">
            <summary> Gets the name of the current user from the security database. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.DLC_SecurityInfo.#ctor">
            <summary>  [DO NOT USE - UNDER CONSTRUCTION] <br />
            Constructor for the DLC_SecurityInfo object </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.DLC_SecurityInfo.userInGroup(System.String)">
            <summary> Private helper method that returns TRUE if the currently 
            logged on user is in the specified group, otherwise, returns FALSE. </summary>
            <param name="groupName"> Domain UserGroup name </param>
            <returns> TRUE if the current user belongs to this group, otherwise FALSE </returns>
        </member>
        <member name="P:DLC.Tools.StartUp.DLC_SecurityInfo.isScanQC">
            <summary> Returns true if the currently logged on user is a part of the A-DLCScanTechs domain group. </summary>
        </member>
        <member name="P:DLC.Tools.StartUp.DLC_SecurityInfo.isScanSupervisor">
            <summary> Returns true if the currently logged on user is a part of the A-DLCScanTechs domain group. </summary>
        </member>
        <member name="P:DLC.Tools.StartUp.DLC_SecurityInfo.isScanTech">
            <summary> Returns true if the currently logged on user is a part of the A-DLCScanTechs domain group. </summary>
        </member>
        <member name="T:DLC.Tools.Database.Tracking_Database_Exception">
            <summary> Tracking_Database_Exception is a custom exception which is thrown for any error
            caught during processing requests to the SQL Tracking Database. <br/> <br/> </summary>
            <remarks> This class extends the <see cref="T:System.ApplicationException"/> class. </remarks>&gt;
        </member>
        <member name="M:DLC.Tools.Database.Tracking_Database_Exception.#ctor(System.String)">
            <summary> Constructor which creates a new Tracking_Database_Exception </summary>
            <param name="customMessage"> Custom message which explains the error which
            occurred to fire this exception. </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.Database.Database_Detached.Valid_Bib_VID(System.String,System.String)" -->
        <member name="M:DLC.Tools.Database.Database_Detached.Get_QC_Log(System.String,System.String)">
            <summary> Gets all of the QC logs for a particular volume </summary>
            <param name="volumeid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Submit_QC_Log(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> Submit a log about QCing a volume </summary>
            <param name="volumeid"> </param>
            <param name="notes"> </param>
            <param name="scanqc"> </param>
            <param name="qcstatusid"> </param>
            <param name="volumeerrortypeid"> </param>
            <param name="storage_location"> </param>
            <remarks> This method calls the stored procedure 'CS_Submit_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Get_Volumes_in_QC(System.String)">
            <summary> Returns all of the volumes currently in QC process </summary>
            <param name="date"> Date from which to return the volumes ready </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Volumes_in_QC'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.PreQC_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been Pre-QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_PreQC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.QC_Complete(System.String,System.String)">
            <summary> Marks an item as having been QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_QC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Get_Bibliographic_Data(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Builds a bib package using the database of choice for any additionally needed information </summary>
            <param name="bibid"> Bib ID</param>
            <param name="volumeid"> VID</param>
            <param name="destination_directory">Directory in which to save the METS file and look for data</param>
            <param name="mets_directory">Directory where pre-assembled METS files are stored</param>
            <param name="marc_directory">Directory where MARC XML files are stored</param>
            <param name="project_directory">Directory where PROJECT-LEVEL METS files are stored</param>
            <param name="xml_directory">Directory where necessary XML helper files are stored</param>
            <param name="app_name">Name of this application</param>
            <param name="user_name">Name of this user</param>
            <returns>Completely built bibliographic package, or NULL</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Metadata_Complete(System.String,System.String)">
            <summary> Sets the date for metadata completion  </summary>
            <param name="bibid">Bib ID for this material</param>
            <param name="vid">VID for this material</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Go_UFDC_Complete(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> Marks an item as having been GoUFDCd... and sent through whole system </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <param name="ftped"></param>
            <param name="hasText"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Go_FDA_Complete(System.String,System.String)">
            <summary> Marks an item as having been FTP'd to FDA </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.FDA_FTP_Log(System.String,System.Boolean,System.Int32)">
            <summary> Store the log of this fda ftp </summary>
            <param name="Package"></param>
            <param name="isError"></param>
            <param name="PackageSize"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Get_Minimum_Info_For_FTP(System.String,System.String)">
            <summary> Gets minimum information to validate before FTPing </summary>
            <param name="bibid">BibID for this item</param>
            <param name="vid">Volume ID for this item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Check_CD_Existence(System.String)">
            <summary> Checks to see if information exists for this cd number </summary>
            <param name="cdnumber"> CD Number </param>
            <returns>TRUE if it exists, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Delete_ArchiveNumber(System.String)">
            <summary> Delete all information tied to a CD </summary>
            <param name="archiveNumber"> Archive identifier </param>
            <returns>TRUE if successul, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Save_Basic_CD_Info(System.String,System.String)">
            <summary> Save the basic information about an archival CD or DVD </summary>
            <param name="archiveNumber"></param>
            <param name="serialNumber"></param>
            <returns>Archive Media ID for subsequent additions</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary> Saves the connection between a CD and a volume and stores the file range </summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <param name="totalFiles"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary> Saves information about a single file on a CD for an existing volume </summary>
            <param name="volumeid">Primary key for the volume </param>
            <param name="fileName">Name of this file</param>
            <param name="fileSize">Size of this file</param>
            <param name="dateCreated">Date this file was created</param>
            <param name="dateModified">Date this file was modified</param>
            <param name="extension">Extension for this file</param>
            <param name="archiveMediaID">Primary key for the archive CD or DVD</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Refresh_Importer_Tables">
            <summary> Method refreshes all of the importer tables </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.UFDC_Online_Edit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as been editing online through UFDC </summary>
            <param name="bibid">BibID for the item edited</param>
            <param name="vid">VID for the item edited </param>
            <param name="user">User name who did the edit</param>
            <param name="usernotes">Any user notes about this edit</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.UFDC_Online_Submit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been submitted online </summary>
            <param name="bibid">BibID for the item submitted </param>
            <param name="vid">VID for the item submitted </param>
            <param name="user">User name who submitted this item</param>
            <param name="usernotes">Any user notes about this new item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Validate_UFDC_Item(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary> Validate that the UFDC Item can be saved to the current database type </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="checkCopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.Save_To_Database(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary> Saves a UFDC Item to the tracking database </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <param name="check_CopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="NewItemFlag">Flag tells if this is a new item or not</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation or tracking save failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_Detached.FDA_Report_Save(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary> Save the information about a FDA report to the database </summary>
            <param name="Package">ID of the submission package sent to FDA.  (End user's id)</param>
            <param name="IEID">Intellectual Entity ID assigned by FDA</param>
            <param name="FdaReportType">Type of FDA report received</param>
            <param name="Report_Date">Date FDA was generated</param>
            <param name="Account">Account information for the FDA submission package</param>
            <param name="Project">Project information for the FDA submission package</param>
            <param name="Warnings">Number of warnings in this package</param>
            <param name="BibID">Bibliographic Identifier</param>
            <param name="VID">Volume Identifier</param>
            <returns>Primary key for the report in the database, or -1 on failure</returns>
            <remarks>This calls the FDA_Report_Save stored procedure in the database</remarks>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.DB_Type">
            <summary> Gets the database type </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Show_Errors">
            <summary> Gets and sets a flag if this database should show errors messages  </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Bib_VID_List">
            <summary> Get the list of Bib ID's and VIDS from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Get_PortableDrives">
            <summary> Gets the list of portable drives </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Get_Volumes_QCd">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Volumes_QCd'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.CD_Number">
            <summary> Gets or sets the CD number from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.is_Admin">
            <summary> Gets a flag indicating if this is an Administrator </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Project_Codes">
            <summary> Gets the list of all valid project codes </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Material_Types">
            <summary> Gets the list of all valid material types</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Locations">
            <summary> Gets the list of all locations from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_Detached.Bib_VID_List_With_External_Identifiers">
            <summary> Gets the list of all items with any specific external 
            identifiers from the database to ensure no replication is occurring </summary>
        </member>
        <member name="T:DLC.Tools.IO.Connected_Drives">
            <summary> Class allows access to all the drives connected to the local computer <br /> <br /> </summary>
            <remarks> Written for University of Florida Digital Library Center </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Connected_Drives.#cctor">
            <summary> Static constructor for this class </summary>
        </member>
        <member name="M:DLC.Tools.IO.Connected_Drives.Refresh">
            <summary> Refresh to populate the drive collection anew </summary>
        </member>
        <member name="M:DLC.Tools.IO.Connected_Drives.Portable_Hard_Drives(System.Data.DataTable)">
            <summary> Gets the collection of portable hard drives connected to this machine </summary>
        </member>
        <member name="P:DLC.Tools.IO.Connected_Drives.Drives">
            <summary> Gets the collection of drives attached to this </summary>
        </member>
        <member name="P:DLC.Tools.IO.Connected_Drives.CD_Drives">
            <summary> Gets the collection of CD drives connected to this machine </summary>
        </member>
        <member name="M:DLC.Tools.Recursive_Folder_Actioner.Recursive_Folder_TreeNode.#ctor(System.String)">
            <summary> Constructor for a new instace of the Recursive_Folder_TreeNode class </summary>
            <param name="directory"> Directory for this node </param>
        </member>
        <member name="M:DLC.Tools.Recursive_Folder_Actioner.Recursive_Folder_TreeNode.#ctor(System.String,System.Boolean)">
            <summary> Constructor for a new instace of the Recursive_Folder_TreeNode class </summary>
            <param name="directory"> Directory for this node </param>
            <param name="isActionable">Is this folder actionable</param>
        </member>
        <member name="T:DLC.Tools.IO.Volume_Folder_Info_Collection">
            <summary>  collection of <see cref="T:DLC.Tools.IO.Volume_Folder_Info"/> objects for a bib id. This is used to 
            iterate through, add, remove, and confirm the existence of drives within this collection. <br/> <br/></summary>
            <remarks> Written by Mark Sullivan (2005) </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.#ctor">
            <summary> Constructor for the Volume_Folder_Info_Collection object. </summary>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Add(DLC.Tools.IO.Volume_Folder_Info)">
            <summary> Add a new Volume_Folder_Info to this collection. </summary>
            <param name="Volume_Folder_Info"> Volume_Folder_Info object for this new Volume_Folder_Info </param>
            <returns> The index for this new Divsion </returns>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Insert(System.Int32,DLC.Tools.IO.Volume_Folder_Info)">
            <summary> Insert a new Volume_Folder_Info into a specified index in this collection.  </summary>
            <param name="Index"> Index specifying location to insert new Volume_Folder_Info </param>
            <param name="Volume_Folder_Info"> Volume_Folder_Info object for this new Volume_Folder_Info </param>
            <exception cref="T:System.Exception"> Throws an <see cref="T:System.Exception"/> if there is 
            an index out of bounds error. </exception>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.RemoveAt(System.Int32)">
            <summary> Remove an existing Volume_Folder_Info from this collection. </summary>
            <param name="Index"> Index of the item to remove. </param>
            <exception cref="T:System.Exception"> Throws a <see cref="T:System.Exception"/> if there is 
            an index out of bounds error. </exception>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Remove(DLC.Tools.IO.Volume_Folder_Info)">
            <summary> Remove an existing Volume_Folder_Info from this collection. </summary>
            <param name="Volume_Folder_Info"> Volume_Folder_Info to remove from this collection. </param>
            <exception cref="T:System.Exception"> Throws a <see cref="T:System.Exception"/> if the specified
            <see cref="T:DLC.Tools.IO.Volume_Folder_Info"/> object to remove is not in this collection. </exception>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Contains(DLC.Tools.IO.Volume_Folder_Info)">
            <summary> Check to see if a Volume_Folder_Info currently exists in this collection.  </summary>
            <param name="Volume_Folder_Info"> Volume_Folder_Info to check for existence in this collection. </param>
            <returns>TRUE if the provided Volume_Folder_Info is already part of this Volume_Folder_Info Collection </returns>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.GetEnumerator">
            <summary> Return an enumerator to step through this collection of Volume_Folder_Infos. </summary>
            <returns> A Type-Safe Volume_Folder_InfoEnumerator</returns>
            <remarks> This version is used in the C# Compiler to detect type conflicts at compilation. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.System#Collections#IEnumerable#GetEnumerator">
            <summary> Return an enumerator to step through this collection of Volume_Folder_Infos. </summary>
            <returns> A IEnumerator object to step through this collection of Volume_Folder_Infos. </returns>
            <remarks> Explicit interface implementation to support interoperability with other common 
            language runtime-compatible langueages. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info_Collection.Item(System.Int32)">
            <summary> Address a single folder from this Collection, by index. </summary>
        </member>
        <member name="T:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator">
            <summary> Inner class implements the <see cref="T:System.Collections.IEnumerator"/> interface and iterates through 
            the <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/> in this collection. <br/> <br/> </summary>
            <remarks> Inclusion of this strongly-typed iterator allows the use of the foreach .. in structure to 
            iterate through all of the <see cref="T:DLC.Tools.IO.Volume_Folder_Info"/> objects in the 
            <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/> object. </remarks>
        </member>
        <member name="F:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.position">
            <summary> Stores the current position within the <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/>. </summary>
        </member>
        <member name="F:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.Volume_Folder_Infos">
            <summary> Reference to the <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/> to iterate through. </summary>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.#ctor(DLC.Tools.IO.Volume_Folder_Info_Collection)">
            <summary> Constructore creates a new Volume_Folder_InfoEnumerator to iterate through
            the <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/>. </summary>
            <param name="Volume_Folder_Info_Collection"> <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/> to iterate through </param>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.MoveNext">
            <summary> Move to the next <see cref="T:DLC.Tools.IO.Volume_Folder_Info"/> in this <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/>. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> Method is required by the IEnumerator interface. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.Reset">
            <summary> Reset to the position just before the first position.  
            Ready for the MoveNext() method to be called. </summary>
            <remarks> Method is required by the IEnumerator interface. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.Current">
            <summary> Return the current <see cref="T:DLC.Tools.IO.Volume_Folder_Info"/> from the <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/>. </summary>
            <remarks> This type-safe version is used in the C# Compiler to detect type conflicts at compilation. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info_Collection.Volume_Folder_InfoEnumerator.System#Collections#IEnumerator#Current">
            <summary> Return the current object from the <see cref="T:DLC.Tools.IO.Volume_Folder_Info_Collection"/>. </summary>
            <remarks> Explicit interface implementation to support interoperability with other common 
            language runtime-compatible langueages. </remarks>
        </member>
        <member name="T:DLC.Tools.Logs.LogFile_Exception">
            <summary> LogFile_Exception is a custom exception which is thrown for any error
            caught while creating, or writing to a log file. <br/> <br/> </summary>
            <remarks> This class extends the <see cref="T:System.ApplicationException"/> class. </remarks>&gt;
        </member>
        <member name="M:DLC.Tools.Logs.LogFile_Exception.#ctor(System.String)">
            <summary> Constructor which creates a new LogFile_Exception </summary>
            <param name="customMessage"> Custom message which explains the error which
            occurred to fire this exception. </param>
        </member>
        <member name="T:DLC.Tools.Logs.LogFileXHTML">
             <summary>
             This class establishes a rich XHTML log file.  Then, lines can be added in three
             flavors ( error, nonerror, and complete). <br/> <br/> </summary>
             <remarks> There are two modes that can be used for this log file.  You can 
             specify <see cref="M:DLC.Tools.Logs.LogFileXHTML.Open"/> and <see cref="M:DLC.Tools.Logs.LogFileXHTML.Close"/>, which will leave the file stream (and associated 
             resources) open during the period between the two calls. Alternatively, 
             you can just call the Write routines directly.  It will open the stream
             before the write and close right after writing and modifying the header information. <br/> <br/>
             Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.   </remarks>
             <example> The example below demonstrates using this object in the basic format, without adding new styles.
             <code>
             <SPAN class="lang">[C#]</SPAN> 
             using System;
             using System.IO;
             using GeneralTools.Logs;
            
             namespace DLC.Tools
             {
            		public class LogFileXHTML_Example_1
            		{
            			static void Main() 
            			{
            				// Create a new XHTML Log File, setting the title and application at the same time
            				LogFileXHTML myLogger = new LogFileXHTML( "c:\\example.log.html", "Log File XHTML Example", "Class Library Example" );
            
            				// Make sure this is a fresh log file
            				myLogger.New();
            
            				// Open the file explicitly.  This will leave a connection open for 
            				// the next few lines of processing until Close() is called.
            				myLogger.Open();
            
            				// Go through and add each diretory name to this log file
            				int files = -1, folderNumber = 1;
            				foreach ( string thisDir in Directory.GetDirectories("C:\\") )
            				{
            					// Perform this in a try catch, as there may be a rights issue in system folders
            					try
            					{
            						files =  Directory.GetFiles(thisDir).Length;
            					}
            					catch
            					{
            						// Set the number of files in this directoty to a default of -1
            						files = -1;
            					}
            
            					// If it could not detect the number of files, add the error
            					if ( files == -1 )
            						myLogger.AddError( "ERROR! Unable to determine the number of files in folder " + thisDir );
            					else	
            						myLogger.AddNonError( "Folder " + thisDir + " is the " + folderNumber + "th folder found had " + Directory.GetFiles(thisDir).Length + " files." );
            		
            					// Increment the folder number
            					folderNumber++;
            				}	
            
            				// Add a final line
            				myLogger.AddComplete( folderNumber + " Total Folders Found and " + myLogger.ErrorCount + " Errors Found!" );
            		
            				// Now, close the log file connection
            				myLogger.Close();
            
            				// Email the log file
            				myLogger.MailSMTP( "Example", "marsull@mail.uflib.ufl.edu" );
            			}
            		}
            	}
             </code> <br/>
             Below is what the output file's text looks like.  To see it in HTML, click <a href="example.log.html">here</a>.
             <code>
            	&lt;?xml version="1.0" encoding="UTF-8"?&gt;
            	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
            	&lt;html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"&gt;
            
            	&lt;! Log file produced automatically by C# program LogFileXHTML.cs &gt;
            	&lt;! Developed by Mark V Sullivan, November 2002 &gt;
            
            	&lt;head&gt;
            	&lt;title&gt; Log File XHTML Example &lt;/title&gt;   
            
            	&lt;! Values used by LogFileXHTML &gt;
            	&lt;META NAME="Next_Position" CONTENT="3245"&gt;       
            	&lt;META NAME="Date_Created" CONTENT="11/12/2003 8:43:45 PM-"&gt;
            	&lt;META NAME="Row_Header" CONTENT=""&gt;                    
            	&lt;META NAME="Date_Stamping" CONTENT="True"&gt; 
            	&lt;META NAME="Error_Count" CONTENT="1"&gt;   
            	&lt;META NAME="Application" CONTENT="Class Library Example"&gt;         
            
            	&lt;! Style Sheet Definitions &gt;
            	&lt;style type="text/css"&gt;
            		.logFileName { font-size: "x-large"; text-align: "center"; font-weight: "bold"; font-family: "Arial" }
            		.logEntry { color: "black"; font-family: "Arial"; font-size: "15"; }
            		.errorLogEntry { color: "red"; font-family: "Arial"; font-size: "15"; &lt;!strong&gt; }
            		.completedLogEntry { color: "blue"; font-family: "Arial"; font-size: "15"; &lt;!strong&gt; }
            	&lt;/style&gt;
            	&lt;/head&gt;
            
            	&lt;body&gt;
            
            	&lt;div class="logFileName"&gt;Log File XHTML Example&lt;/div&gt;
            
            	&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;
            
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\adaptec is the 1th folder found had 1 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\ADOBEAPP is the 2th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Aerials is the 3th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\comcheck is the 4th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Content SDK is the 5th folder found had 5 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\dell is the 6th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Documents and Settings is the 7th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Inetpub is the 8th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\My Music is the 9th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\OfficeScan NT is the 10th folder found had 95 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Perl is the 11th folder found had 2 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Processing is the 12th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\Program Files is the 13th folder found had 2 files.&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\RECYCLER is the 14th folder found had 0 files.&lt;/div&gt;
            	&lt;div class="errorLogEntry"&gt; 11/12/2003 8:43:49 PM - &lt;strong&gt;ERROR! Unable to determine the number of files in folder C:\System Volume Information&lt;/strong&gt;&lt;/div&gt;
            	&lt;div class="logEntry"&gt; 11/12/2003 8:43:49 PM - Folder C:\WINNT is the 16th folder found had 159 files.&lt;/div&gt;
            	&lt;div class="completedLogEntry"&gt; 11/12/2003 8:43:49 PM - &lt;strong&gt;17 Total Folders Found and 1 Errors Found!&lt;/strong&gt;&lt;/div&gt;
             
             &lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;
            
             &lt;/body&gt;
            
            	&lt;/html&gt;
             </code></example>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.CompleteNewHeader">
            <summary> Constant string of tags and text used to create a new header
            for a new log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.NewStartBody1">
            <summary> Constant string values used to indicate necessary tags surrounding
            the body of the log file and the end of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.NewStartBody2">
            <summary> Constant string values used to indicate necessary tags surrounding
            the body of the log file and the end of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.NewEndTags">
            <summary> Constant string values used to indicate necessary tags surrounding
            the body of the log file and the end of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.titlePosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.positionPosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.createDatePosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.rowHeaderPosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.dateStampPosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.errorPosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.applicationPosition">
            <summary> Constant position values used to place, or fetch, data into the 
            XHTML header of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.fileName">
            <summary> stores the name of the log file </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.appName">
            <summary> stores the name of the creating application  </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.title">
            <summary> stores the title of the log file. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.eachRowHeader">
            <summary> store a string to be written after the date on each line </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.errorCount">
            <summary> Stores the current number of errors in the log </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.currentPosition">
            <summary> Stores the current position in the log file  </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.leaveOpen">
            <summary> Flag to determine if the log stays open between writes
            or whether it should be closed each time. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.dateStamping">
            <summary> Flag to determine if the date is stamped on every line. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.dateCreated">
            <summary> Date the file was created  </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.logFileStream">
            <summary> FileStream object used to read and write to the 
            log file.  </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.styles">
            <summary> Dictionary class holds the style information for each style type. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML.suppressExceptions">
            <summary> flag indicates whether exceptions should be suppressed </summary>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Title - this is set to no title by default
            <li type="circle"/> Application Name - this is left blank by default
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.String)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Application Name - this is left blank by default
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.String,System.String)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <param name="appName"> Name of the application </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <param name="appName"> Name of the application </param>
            <param name="rowHeader"> Header for each row </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.Boolean)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Title - this is set to no title by default
            <li type="circle"/> Application Name - this is left blank by default
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.String,System.Boolean)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Application Name - this is left blank by default
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <param name="appName"> Name of the application </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary> Constructor which builds a new LogFileXHTML object </summary>
            <param name="newFileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <param name="appName"> Name of the application </param>
            <param name="rowHeader"> Header for each row </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.setupLogFile(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary> Method called by the constructors to help initialize this object. </summary>
            <param name="fileName"> File Name and Path for this LogFileXHTML object </param>
            <param name="title"> Title for this log </param>
            <param name="appName"> Name of the application </param>
            <param name="rowHeader"> Header for each row </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.New">
            <summary>  Deletes the current log file, closing first if necessary. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            during processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.Exists">
            <summary> Returns true if the log file currently exists. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.Open">
            <summary> Opens or creates a log file. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks>  This also specifies that the connection to the file will 
            remain open until <see cref="M:DLC.Tools.Logs.LogFileXHTML.Close"/> is called. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            opening the connection, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.Close">
            <summary> Saves and closes the log file. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            closing the connection, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.disableRowHeaders">
            <summary> Disable the additional information between the time/date and the log entry. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.enableRowHeaders(System.String)">
            <summary> Enables the additional information between the time/date and
            the log entry and sets this information to the string which is passed in. </summary>
            <param name="textForEachLine"> Text to be used as the Row Headers on each row </param>
            <returns> TRUE if the requested row header is accepted, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddNonError(System.String)">
            <summary> Adds a non-error line to the current log file. </summary>
            <param name="msg"> Message to add </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This uses the default style defined as 'logEntry' with the following attributes: <ul>
            <li type="circle"/> Color:		Black
            <li type="circle"/> Font-Size: 15
            <li type="circle"/> Bold:		false
            <li type="circle"/> Italics:	false
            </ul></remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddError(System.String)">
            <summary> Adds an error line to the current log file.  </summary>
            <param name="msg"> Message to add </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This uses the default style defined as 'errorLogEntry' with the following attributes: <ul>
            <li type="circle"/> Color:		Red
            <li type="circle"/> Font-Size: 15
            <li type="circle"/> Bold:		true
            <li type="circle"/> Italics:	false
            </ul></remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddComplete(System.String)">
            <summary> Adds a line indicating completeness to the log file. </summary>
            <param name="msg"> Msg to add indicating completeness </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This uses the default style defined as 'completedLogEntry' with the following attributes: <ul>
            <li type="circle"/> Color:		Blue
            <li type="circle"/> Font-Size: 15
            <li type="circle"/> Bold:		true
            <li type="circle"/> Italics:	false
            </ul></remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.MailSMTP(System.String,System.String)">
            <summary> Send the log file via SMTP POP mail. </summary>
            <param name="processName"> Process name for the subject line of the email </param>
            <param name="emailTo"> Email addresses ( seperated by ';' ) </param>
            <returns>TRUE if successful, otherwise FALSE </returns>
            <remarks> For this email to be sent the local machine must be running the SMTP service
            under IIS. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while attempting to send the logfile as a SMTP email, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.Display">
            <summary> Displays the XHTML log file in Internet Explorer. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while trying to display the log, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddNewStyle(System.String,System.String,System.Boolean)">
            <summary> [NOT YET FULLY IMPLEMENTED] <br/> <br/> Create a new style for this log file. </summary>
            <remarks> This style will be used in the Style Definition
            section and will be used in the body of the text below.  Any custom styles will
            need to be specified when the line is added to the log file.  When a style is added to the XHTML Log file,
            a new <see cref="T:DLC.Tools.Logs.LogFileXHTML_Style"/> object is created and added to a collection of style objects. <br/> <br/>
            The following colors are accepted: <ul>
            <li type="circle"/> Aqua
            <li type="circle"/> Lime
            <li type="circle"/> Black
            <li type="circle"/> Blue
            <li type="circle"/> Fuchsia
            <li type="circle"/> Green
            <li type="circle"/> Gray
            <li type="circle"/> Maroon
            <li type="circle"/> Navy
            <li type="circle"/> Olive
            <li type="circle"/> Purple
            <li type="circle"/> Red
            <li type="circle"/> Silver
            <li type="circle"/> Teal
            <li type="circle"/> Yellow
            </ul>  </remarks>
            <param name="style_name"> Name for this style </param>
            <param name="font_color"> Color for text of this style </param>
            <param name="bold"> Flag tells whether text of this style should be emboldened </param>
            <returns> TRUE if this style was successfully added, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddNewStyle(System.String,System.String)">
            <summary> [NOT YET FULLY IMPLEMENTED] <br/> <br/> Create a new style for this log file. </summary>
            <remarks> This style will be used in the Style Definition
            section and will be used in the body of the text below.  Any custom styles will
            need to be specified when the line is added to the log file.  When a style is added to the XHTML Log file,
            a new <see cref="T:DLC.Tools.Logs.LogFileXHTML_Style"/> object is created and added to a collection of style objects.  <br/> <br/>
            The following colors are accepted: <ul>
            <li type="circle"/> Aqua
            <li type="circle"/> Lime
            <li type="circle"/> Black
            <li type="circle"/> Blue
            <li type="circle"/> Fuchsia
            <li type="circle"/> Green
            <li type="circle"/> Gray
            <li type="circle"/> Maroon
            <li type="circle"/> Navy
            <li type="circle"/> Olive
            <li type="circle"/> Purple
            <li type="circle"/> Red
            <li type="circle"/> Silver
            <li type="circle"/> Teal
            <li type="circle"/> Yellow
            </ul> </remarks>
            <param name="style_name"> Name for this style </param>
            <param name="font_color"> Color for text of this style </param>
            <returns> TRUE if this style was successfully added, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddNewStyle(System.String,System.String,System.String)">
            <summary> [NOT YET FULLY IMPLEMENTED] <br/> <br/> Create a new style for this log file. </summary>
            <remarks> This style will be used in the Style Definition
            section and will be used in the body of the text below.  Any custom styles will
            need to be specified when the line is added to the log file.  When a style is added to the XHTML Log file,
            a new <see cref="T:DLC.Tools.Logs.LogFileXHTML_Style"/> object is created and added to a collection of style objects. <br/> <br/>
            The following colors are accepted: <ul>
            <li type="circle"/> Aqua
            <li type="circle"/> Lime
            <li type="circle"/> Black
            <li type="circle"/> Blue
            <li type="circle"/> Fuchsia
            <li type="circle"/> Green
            <li type="circle"/> Gray
            <li type="circle"/> Maroon
            <li type="circle"/> Navy
            <li type="circle"/> Olive
            <li type="circle"/> Purple
            <li type="circle"/> Red
            <li type="circle"/> Silver
            <li type="circle"/> Teal
            <li type="circle"/> Yellow
            </ul> <br/> <br/>
            The following sizes are accepted: <ul>
            <li type="circle"/> x-small
            <li type="circle"/> small
            <li type="circle"/> medium
            <li type="circle"/> large
            <li type="circle"/> x-large
            </ul> </remarks>
            <param name="style_name"> Name for this style </param>
            <param name="font_color"> Color for text of this style </param>
            <param name="font_size"> Size for the text of this style </param>
            <returns> TRUE if this style was successfully added, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddNewStyle(System.String,System.String,System.String,System.Boolean)">
            <summary> [NOT YET FULLY IMPLEMENTED] <br/> <br/> Create a new style for this log file. </summary>
            <remarks> This style will be used in the Style Definition
            section and will be used in the body of the text below.  Any custom styles will
            need to be specified when the line is added to the log file.  When a style is added to the XHTML Log file,
            a new <see cref="T:DLC.Tools.Logs.LogFileXHTML_Style"/> object is created and added to a collection of style objects. <br/> <br/>
            The following colors are accepted: <ul>
            <li type="circle"/> Aqua
            <li type="circle"/> Lime
            <li type="circle"/> Black
            <li type="circle"/> Blue
            <li type="circle"/> Fuchsia
            <li type="circle"/> Green
            <li type="circle"/> Gray
            <li type="circle"/> Maroon
            <li type="circle"/> Navy
            <li type="circle"/> Olive
            <li type="circle"/> Purple
            <li type="circle"/> Red
            <li type="circle"/> Silver
            <li type="circle"/> Teal
            <li type="circle"/> Yellow
            </ul> <br/> <br/>
            The following sizes are accepted: <ul>
            <li type="circle"/> x-small
            <li type="circle"/> small
            <li type="circle"/> medium
            <li type="circle"/> large
            <li type="circle"/> x-large
            </ul> </remarks>
            <param name="style_name"> Name for this style </param>
            <param name="font_color"> Color for text of this style </param>
            <param name="font_size"> Size for the text of this style </param>
            <param name="bold"> Flag tells whether text of this style should be emboldened </param>
            <returns> TRUE if this style was successfully added, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.AddNewStyle(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary> [NOT YET FULLY IMPLEMENTED] <br/> <br/> Create a new style for this log file. </summary>
            <remarks> This style will be used in the Style Definition
            section and will be used in the body of the text below.  Any custom styles will
            need to be specified when the line is added to the log file.  When a style is added to the XHTML Log file,
            a new <see cref="T:DLC.Tools.Logs.LogFileXHTML_Style"/> object is created and added to a collection of style objects.  <br/> <br/>
            The following colors are accepted: <ul>
            <li type="circle"/> Aqua
            <li type="circle"/> Lime
            <li type="circle"/> Black
            <li type="circle"/> Blue
            <li type="circle"/> Fuchsia
            <li type="circle"/> Green
            <li type="circle"/> Gray
            <li type="circle"/> Maroon
            <li type="circle"/> Navy
            <li type="circle"/> Olive
            <li type="circle"/> Purple
            <li type="circle"/> Red
            <li type="circle"/> Silver
            <li type="circle"/> Teal
            <li type="circle"/> Yellow
            </ul> <br/> <br/>
            The following sizes are accepted: <ul>
            <li type="circle"/> x-small
            <li type="circle"/> small
            <li type="circle"/> medium
            <li type="circle"/> large
            <li type="circle"/> x-large
            </ul> </remarks>
            <param name="style_name"> Name for this style </param>
            <param name="font_color"> Color for text of this style </param>
            <param name="font_size"> Size for the text of this style </param>
            <param name="bold"> Flag tells whether text of this style should be emboldened </param>
            <param name="italics"> Flag tells whether text of this style should be italicized </param>
            <returns> TRUE if this style was successfully added, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.TextOfLogFile">
            <summary> Returns the text of this file as a string. </summary>
            <returns> Text of this file as a string </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.Write(System.String,System.String,System.Boolean)">
            <summary> Writes a string to the log file. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.writeClosingTags">
            <summary> Private method writes closing tags to the file. </summary>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.openConnection">
            <summary> Opens the connection and returns true
            or false.  Called by public method Open().  False is returned
            if the header in the log file is corrupted.
            </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.createHeader">
            <summary>  Creates the header for a new log file  </summary>
            <returns> TRUE if sucessful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.saveCurrentPosition">
            <summary> Saves the current position into the XHTML header </summary>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.saveErrorCount">
            <summary> Saves the number of current errors into the XHTML header </summary>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.writeAtPos(System.Int32,System.String)">
            <summary>  Writes at a certain position in the log File </summary>
            <param name="newPosition"> Position to write at </param>
            <param name="msg"> Message to write </param>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.readHeader">
            <summary> Reads the header information </summary>
            <returns> FALSE if it was corrupted </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.configureText(System.String,System.String,System.Boolean)">
            <summary>  Take a basic line to go into the log and append the date or rowHeader
            as necessary.  Also, breaks up the message if it exceeds the line length
            for the log file. </summary>
            <param name="origMsg"> Original message </param>
            <param name="styleType"> StyleType name to use </param>
            <param name="strong"> Tells whether this is strong or not </param>
            <returns> The configured line </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.writeToLog(System.String)">
            <summary> Writes a fully configured and correct length line into the file
            and inserts the carriage return and linefeed. </summary>
            <param name="msg"> Message to write </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML.closeConnection">
            <summary>  Saves and closes the log file </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            while processing, unless the <see cref="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML.SuppressExceptions">
            <summary> Gets and Sets the flag which indicates if all <see cref="T:DLC.Tools.Logs.LogFile_Exception"/>s should be
            suppressed or not.  </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML.isOpen">
            <summary> Returns true if the log file is currently open. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML.DateStampingEnabled">
            <summary> Gets and sets the flag which indicates if each line receives a date stamp. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML.DateCreated">
            <summary> Gets the date and time the current log file was created. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML.ErrorCount">
            <summary> Gets the number of explicit calls to <see cref="M:DLC.Tools.Logs.LogFileXHTML.AddError(System.String)"/> method were made. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. </example>
        </member>
        <member name="T:DLC.Tools.IO.DirectoryCrawler_File">
            <summary> DirectoryCrawler_File is a read-only object which houses the basic information collected about
            each file from a <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> object.  <br/> <br/> </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.Name">
            <summary> Name of the file (minus extension and path) </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.Extension">
            <summary> Extension for this file  </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.Directory">
            <summary> Directory for this file </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.Size">
            <summary> Size of this file in KB </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.DateCreated">
            <summary> Date and time this file was originally created </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.DateModified">
            <summary> Name of the file (minus extension and path) </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.UserDefined">
            <summary> User defined value, to indicate which search was used to find this file </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_File.UserObject">
            <summary> User defined object which can be included while iterating through directories. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
            <remarks> This will return null if no UserObject was added initially. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_File.#ctor(System.String,System.String,System.String,System.Double,System.DateTime,System.DateTime,System.String)">
            <summary> Constructor for a new DirectoryCrawler_File object defines all values </summary>
            <param name="Name"> Name of the file (minus extension and path) </param>
            <param name="Extension"> Extension for this file </param>
            <param name="Directory"> Directory for this file </param>
            <param name="Size"> Size of this file in KB </param>
            <param name="DateCreated"> Date and time this file was originally created </param>
            <param name="DateModified"> Date and time this file was last modified </param>
            <param name="UserDefined"> User defined value, to indicate which search was used to find this file </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
            <remarks> Since to UserObject is included here, it is set to null </remarks>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_File.#ctor(System.String,System.String,System.String,System.Double,System.DateTime,System.DateTime,System.String,System.Object)">
            <summary> Constructor for a new DirectoryCrawler_File object defines all values </summary>
            <param name="Name"> Name of the file (minus extension and path) </param>
            <param name="Extension"> Extension for this file </param>
            <param name="Directory"> Directory for this file </param>
            <param name="Size"> Size of this file in KB </param>
            <param name="DateCreated"> Date and time this file was originally created </param>
            <param name="DateModified"> Date and time this file was last modified </param>
            <param name="UserDefined"> User defined value, to indicate which search was used to find this file </param>
            <param name="UserObject"> Object included by the user before iterating through the directory this was found in </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_File.ToString">
            <summary> Returns this object as a complete path and name string </summary>
            <returns> Complete path, name, and extension </returns>
        </member>
        <member name="T:DLC.Tools.Settings.App_Config_Reader">
            <summary> App_Config_Reader is a static object which contains the 
            information from the Application Configuration file. </summary>
        </member>
        <member name="F:DLC.Tools.Settings.App_Config_Reader.Tracking_Database">
            <summary> Flag indicates whether this program is running as a local
            instance, without database and network access. </summary>
        </member>
        <member name="M:DLC.Tools.Settings.App_Config_Reader.#cctor">
            <summary> Static constructor for the App_Config_Reader object </summary>
        </member>
        <member name="T:DLC.Tools.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DLC.Tools.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DLC.Tools.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DLC.Tools.IO.Volume_Folder_Info">
            <summary> Holds the data about a volume folder <br /> <br /> </summary>
            <remarks> Written by Mark Sullivan (2005) for UF Digital Library Center </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary> Constructor for a new instance of this class </summary>
            <param name="Bib_Folder"> Absolute directory for the bib id folder </param>
            <param name="Volume_Folder"> Absolute directory for the volume folder </param>
            <param name="ReceivingID"> Receiving ID for this bib id </param>
            <param name="VolumeID"> Volume ID for the volume indicated </param>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary> Constructor for a new instance of this class </summary>
            <param name="Bib_Folder"> Absolute directory for the bib id folder </param>
            <param name="Volume_Folder"> Absolute directory for the volume folder </param>
            <param name="ReceivingID"> Receiving ID for this bib id </param>
            <param name="Error"> Error encountered with this folder </param>
            <remarks> This constructor is used when the top folder is a valid bib id, but
            the volume indicated is not valid. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info.#ctor(System.String,System.String)">
            <summary> Constructor for a new instance of this class </summary>
            <param name="Bib_Folder"> Absolute directory for this folder </param>
            <param name="Error"> Error encountered with this folder </param>
            <remarks> This constructor is used when the top-level folder is not a bib id </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folder_Info.compute_subfolder">
            <summary> Compute the name of the subfolder(s) </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.User_Definable_Field">
            <summary> Gets and sets the user definable field </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.Subfolder">
            <summary> Gets the subfolder(s) for this bib and volume </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.Bib_Folder">
            <summary> Gets the Bib ID (or top-level) folder's absolute address </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.Volume_Folder">
            <summary> Gets the Volume (or second-level) folder's absolute address </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.ReceivingID">
            <summary> Gets the receiving id if this was a valid bib id folder </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.VolumeID">
            <summary> Gets the volume id if this was a valid volume id subfolder </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.Error">
            <summary> Gets the error string, if one was encountered here </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.Error_Encountered">
            <summary> Gets a flag indicating if an error was encountered with this folder </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.Type">
            <summary> Gets the type of this resource </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.BibID">
            <summary> Gets the BIB ID for this volume folder </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folder_Info.VID">
            <summary> Gets the VID for this volume folder </summary>
        </member>
        <member name="T:DLC.Tools.FileMD5">
             <summary>
             FileMD5 is an object used to convert a file to a MD5 Checksum string.  
             The name of this file is passed in during the construction of this 
             object, or by using the property FileName.  Then the Checksum is retrieved
             by using the Checksum property.<br />
             <br />
             </summary>
             <remarks>  Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.  </remarks>
             <example> Below is a simple example to print the MD5 checksum for any file from a Console application. <code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using System.IO;
            	using CustomTools.MXF;
            
            	namespace CustomTools.Examples
            	{
            		public class MXF_Example
            		{
            			static void Main() 
            			{
            				// Read the name of the file to get the MD5 Checksum for
            				Console.Write("Enter the name of the file: ");
            				string file = Console.ReadLine();
            
            				// Create the MD5 Checksum object
            				FileMD5 hasher = new FileMD5( file );
            
            				// Print out the checksum result, if no error occurred
            				if ( !hasher.Error )
            					Console.WriteLine( "\n" + hasher.Checksum );
            				else
            					Console.WriteLine("\nError encountered during checksum");
            
            				// Wait for the user to hit enter
            				Console.WriteLine("\nHit Enter to Continue");
            				Console.ReadLine();
            			}
            		}
            	}
             </code>
             <br /> This example will write the following to the Console Window:
             <code>
            
             Enter the name of the file: E:\test.xml
            
             8212ec9bec6d90d6002d256398790b83
            
             Hit Enter to Continue
            
             </code></example>
        </member>
        <member name="F:DLC.Tools.FileMD5.hashResult">
            <summary> Private string variable holds the checksum for the current file </summary>
        </member>
        <member name="F:DLC.Tools.FileMD5.fileName">
            <summary> Private string variable holds the name of the file for
            which the current checksum is valid. </summary>
        </member>
        <member name="F:DLC.Tools.FileMD5.errorFlag">
            <summary> Private bool variable holds the flag which indicates if an 
            error occurred during the checksum process. </summary>
        </member>
        <member name="M:DLC.Tools.FileMD5.#ctor(System.String)">
            <summary> Constructor for a new FileMD5 object which accepts the filename
            for the first file to be checked. </summary>
            <param name="fileName"> Path and filename for the file to check </param>
        </member>
        <member name="M:DLC.Tools.FileMD5.#ctor">
            <summary> Constructor for a new FileMD5 object. </summary>
        </member>
        <member name="M:DLC.Tools.FileMD5.computeChecksum">
            <summary> Private helper method that computes the checksum for the 
            current file and set the private hashResult string to the checksum </summary>
        </member>
        <member name="M:DLC.Tools.FileMD5.GetHex(System.Double)">
            <summary> Private helper method returns the appropriate hex value for the 
            double parameter which was passed in. </summary>
            <param name="Dec"> Double value of the four-bit value to convert to Hex </param>
            <returns> Hex character as a string </returns>
        </member>
        <member name="P:DLC.Tools.FileMD5.Checksum">
            <summary> Gets the checksum for the current file </summary>
        </member>
        <member name="P:DLC.Tools.FileMD5.Error">
            <summary> Gets the error flag to indicate an error 
            occurred during the last checksum computation </summary>
        </member>
        <member name="P:DLC.Tools.FileMD5.FileName">
            <summary> Gets or sets the name of the current file. </summary>
        </member>
        <member name="T:DLC.Tools.TiffInfo">
             <summary> TiffInfo is an object which reads an existing TIFF
             image and can then be queried for the header information.  <br /><br />
             </summary>
             <remarks>  Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.  </remarks>
             <example> Below is a simple example to print the information from the TIFF header of any file from a Console application. <code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using System.IO;
            	using GeneralTools.Images;
            
            	namespace DLC.Tools.Example
            	{
            		public class TiffInfo_Example
            		{
            			static void Main() 
            			{
            				// Read the name of the file to read the TIFF header for
            				Console.Write("Enter the name of the file: ");
            				string file = Console.ReadLine();
            
            				// Make sure the file exists, before continuing
            				if ( File.Exists( file ) )
            				{
            					// Create a new TiffInfo object and read the header of the file
            					TiffInfo tiffReader = new TiffInfo( file );
            
            					// See if this was a valid TIFF
            					if ( tiffReader.ValidTIFF )
            					{
            						// Print out several values for this TIFF
            						Console.WriteLine("\nByte Order: \t" + tiffReader.ByteOrder );
            						Console.WriteLine("Compression: \t" + tiffReader.Compression );
            						Console.WriteLine("Resolution: \t" + tiffReader.XResolution + " pixels per " + tiffReader.ResolutionUnit );
            						Console.WriteLine("Height: \t" + tiffReader.ImageHeight + " pixels");
            						Console.WriteLine("Width: \t\t" + tiffReader.ImageWidth + " pixels" );
            					}
            					else
            					{
            						// Not a valid TIFF
            						Console.WriteLine("\nThis indicated file was not a valid TIFF");
            					}
            				}
            				else
            				{
            					// File did not exist
            					Console.WriteLine("\nThe indicated file does not exist.");
            				}
            
            				// Wait for the user to hit enter
            				Console.WriteLine("\nHit Enter to Continue");
            				Console.ReadLine();
            			}
            		}
            	}
             </code>
             <br /> This example will write the following to the Console Window:
             <code>
            	Enter the name of the file: E:\UF00015509.tif
            
            	Byte Order:     INTEL
            	Compression:    Uncompressed
            	Resolution:     300 pixels per inch
            	Height:         7884 pixels
            	Width:          5100 pixels
            
            	Hit Enter to Continue
            	</code> </example>
        </member>
        <member name="F:DLC.Tools.TiffInfo.fileName">
            <summary> String which holds the current file whose
            header has been read. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.invalidTIFF">
            <summary> Boolean flag set by parseImageFileHeader method to indicate 
            if the current file is a valid TIFF. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.intelTIFF">
            <summary> Boolean flag set by parseImageFileHeader method to indicate 
            if the current file is in INTEL byte order. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.nextIFD_Offset">
            <summary> Offset to the next Image File Directory in the TIFF header.
            This is set by the parseImageFileHeader initially, and then by the
            parseImageFileDirectory for any consecutive IFD's. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.validTags">
            <summary> Hashtable which holds the names and tags
            of all the valid TIFF headers of interest. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.directoryEntriesTable">
            <summary> Hashtable used to look up a directory entry
            from a specified tag number. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.directoryEntries">
            <summary> ArrayList which holds all the valid
            directoryEntries found in the currentTIFF file. </summary>
        </member>
        <member name="M:DLC.Tools.TiffInfo.#ctor(System.String)">
            <summary> Constructor of the TiffInfo class which accepts
            the name of a TIF file as a parameter.  This constructor then reads
            the header of the TIFF file. </summary>
            <param name="fileName"> Name of the file to check </param>
            <remarks> This reads the TIFF header during construction </remarks>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="M:DLC.Tools.TiffInfo.#ctor">
            <summary> Constructor of the TiffInfo class </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="M:DLC.Tools.TiffInfo.NextFile(System.String)">
            <summary> Method which tells this TiffInfo object to read a 
            new TIFF file.  This will read all of the header information.</summary>
            <param name="fileName"> TRUE if a valid TIFF file, otherwise FALSE </param>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="M:DLC.Tools.TiffInfo.TagValue(System.Int32)">
            <summary> Method returns -1 or the tag value if the tag was
            present in the current header. </summary>
            <param name="tagNumber"> Number for the tag in the TIFF specs </param>
            <returns> Value as a long </returns>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="M:DLC.Tools.TiffInfo.readHeader(System.String)">
            <summary> Private method which accepts the name of the TIFF file
            to check and reads all the header information. </summary>
            <param name="fileToRead"> Name of the file to check </param>
            <returns> TRUE if this is a valid TIFF file, otherwise FALSE </returns>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="M:DLC.Tools.TiffInfo.parseImageFileDirectory(System.Byte[],System.Int32)">
            <summary> Private method which parses a Image File Directory and fills
            the DirectoryEntries ArrayList with the directories from this IFD.  ALso
            computes the value (or -1) of the next IFD in the file.</summary>
            <param name="IFD"> Variable length array of bytes read from the file </param>
            <param name="entries"> Number of entries in this IFD </param>
        </member>
        <member name="M:DLC.Tools.TiffInfo.parseImageFileHeader(System.Byte[])">
            <summary> Private method which parses the 12 byte ImageFileHeader
            and checks for byte order, version, and gets the offset to the 
            first Image File Directory. </summary>
            <param name="IFH"> 12 byte ImageFileHeader from the TIFF </param>
            <returns> FALSE if there was a problem with the header, otherwise
            returns TRUE </returns>
        </member>
        <member name="M:DLC.Tools.TiffInfo.getLongTagValue(System.Int32)">
            <summary> Private method which returns the long value (or -1)
            for a specified tag number. </summary>
            <param name="valueNumber"> Tag number </param>
            <returns> Tag value as a long </returns>
        </member>
        <member name="M:DLC.Tools.TiffInfo.byteArrayToLong(System.Byte[],System.Int32)">
            <summary> Private helper method which returns the computed long
            value from the next four bytes after the indicated offset. </summary>
            <param name="byteArray"> Array of bytes </param>
            <param name="offset"> Initial offset in array </param>
            <returns> Value as a long </returns>
        </member>
        <member name="M:DLC.Tools.TiffInfo.populateValidTags">
            <summary> Private method which populates the validTags HashTable with 
            all of the valid, common tags to read from the TIFF Header. </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.ValidTIFF">
            <summary> Returns TRUE if this is a valid TIFF file. </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.ByteOrder">
            <summary> Returns a string which indicates whether this is INTEL, MOTOROLA,
            or INVALID byte order. </summary>
            <remarks> Returns one of the following:  <ul>
            <li type="circle"/> INVALID
            <li type="circle"/> INTEL
            <li type="circle"/> MOTOROLA
            </ul></remarks>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.Compressed">
            <summary> Returns TRUE if this image is compressed, otherwise FALSE  </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.Compression">
            <summary> Gets the type of compression as a string </summary>
            <remarks> Returns one of the following:  <ul>
            <li type="circle"/> Uncompressed
            <li type="circle"/> CCITT ID
            <li type="circle"/> Group 3 Fax
            <li type="circle"/> Group 4 Fax
            <li type="circle"/> LZW
            <li type="circle"/> JPEG
            <li type="circle"/> PackBits
            <li type="circle"/> NOT PRESENT
            <li type="circle"/> Unknown Compression
            </ul></remarks>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.PhotometricInterpretation">
            <summary> Gets the type of photometric interpretation </summary>
            <remarks> Returns one of the following:  <ul>
            <li type="circle"/> WhiteIsZero
            <li type="circle"/> BlackIsZero
            <li type="circle"/> RGB
            <li type="circle"/> RGB Palette
            <li type="circle"/> Transparency mask
            <li type="circle"/> CMYK
            <li type="circle"/> YCbCr
            <li type="circle"/> CIELab
            <li type="circle"/> NOT PRESENT
            <li type="circle"/> Unknown Interpretation
            </ul></remarks>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.ResolutionUnit">
            <summary> Gets the unit for the resolution </summary>
            <remarks> Returns one of the following:  <ul>
            <li type="circle"/> none
            <li type="circle"/> inch
            <li type="circle"/> centimeter
            <li type="circle"/> NOT PRESENT
            <li type="circle"/> Unknown Resolution Unit
            </ul></remarks>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.PlanarConfiguration">
            <summary> Gets the type of planar configuration </summary>
            <remarks> Returns one of the following:  <ul>
            <li type="circle"/> chunky
            <li type="circle"/> planar
            <li type="circle"/> unknown
            <li type="circle"/> Unknown Planar Configuration
            </ul></remarks>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.ImageWidth">
            <summary> Gets the width of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.ImageHeight">
            <summary> Gets the height of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.XResolution">
            <summary> Gets the X resolution of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.YResolution">
            <summary> Gets the Y resolution of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.BitsPerSample">
            <summary> Gets the bits per sample of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.SamplesPerPixel">
            <summary> Gets the samples per pixel of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.StripOffsets">
            <summary> Gets the strip offsets of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.RowsPerStrip">
            <summary> Gets the rows per strip of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.StripByteCounts">
            <summary> Gets the strip byte count of the current image </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="P:DLC.Tools.TiffInfo.FileName">
            <summary> Gets or sets the current TIFF file. </summary>
            <example> To see an example, look under the main <see cref="T:DLC.Tools.TiffInfo"/> class. </example>
        </member>
        <member name="T:DLC.Tools.TiffInfo.DirectoryEntry">
            <summary> Internal class used to hold the data for a single Directory Entry from the TIFF header for the TiffInfo object. </summary>
            <remarks>  Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.  </remarks>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.tag">
            <summary> Private data members which hold the information from 
            this directory entry.</summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.type">
            <summary> Private data members which hold the information from 
            this directory entry.</summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.length">
            <summary> Private data members which hold the information from 
            this directory entry.</summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.dataValue">
            <summary> Private data members which hold the information from 
            this directory entry.</summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.dataOffset">
            <summary> Private data members which hold the information from 
            this directory entry.</summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.typeLength">
            <summary> Constant object which holds the length information for
            each type of tag type. </summary>
        </member>
        <member name="F:DLC.Tools.TiffInfo.DirectoryEntry.typeNames">
            <summary> Constant array which holds the names of each type of tag </summary>
        </member>
        <member name="M:DLC.Tools.TiffInfo.DirectoryEntry.#ctor(System.Byte[])">
            <summary> Constructor for the DirectoryEntry class </summary>
            <param name="bytes"> 12 byte Directory Entry from TIFF file </param>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.Length">
            <summary> Property returns the length of the data for this entry </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.Offset">
            <summary> Property returns the value from this entry </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.Tag">
            <summary> Property returns the tag number for this entry </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.TagName">
            <summary> Property returns the name of the tag for this entry </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.Type">
            <summary> Returns the name of this type </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.ValidTag">
            <summary> Property returns TRUE if the tag is valid, otherwise FALSE </summary>
        </member>
        <member name="P:DLC.Tools.TiffInfo.DirectoryEntry.Value">
            <summary> Gets or sets the value from this entry </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.Database.Database_SQL.Valid_Bib_VID(System.String,System.String)" -->
        <member name="M:DLC.Tools.Database.Database_SQL.Get_QC_Log(System.String,System.String)">
            <summary> Gets all of the QC logs for a particular volume </summary>
            <param name="volumeid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Submit_QC_Log(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> Submit a log about QCing a volume </summary>
            <param name="volumeid"> </param>
            <param name="notes"> </param>
            <param name="scanqc"> </param>
            <param name="qcstatusid"> </param>
            <param name="volumeerrortypeid"> </param>
            <param name="storage_location"> </param>
            <remarks> This method calls the stored procedure 'CS_Submit_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Get_Volumes_in_QC(System.String)">
            <summary> Returns all of the volumes currently in QC process </summary>
            <param name="date"> Date from which to return the volumes ready </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Volumes_in_QC'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.PreQC_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been Pre-QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_PreQC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Get_Bibliographic_Data(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Builds a bib package using the database of choice for any additionally needed information </summary>
            <param name="bibid"> Bib ID</param>
            <param name="volumeid"> VID</param>
            <param name="destination_directory">Directory in which to save the METS file and look for data</param>
            <param name="mets_directory">Directory where pre-assembled METS files are stored</param>
            <param name="marc_directory">Directory where MARC XML files are stored</param>
            <param name="project_directory">Directory where PROJECT-LEVEL METS files are stored</param>
            <param name="xml_directory">Directory where necessary XML helper files are stored</param>
            <param name="app_name">Name of this application</param>
            <param name="user_name">Name of this user</param>
            <returns>Completely built bibliographic package, or NULL</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.getCdNumber">
            <summary> Gets the next cd number from the SQL database </summary>
            <returns> Next CD number, or -1 </returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.setCdNumber(System.Int32)">
            <summary> Sets the next cd number in the SQL database </summary>
            <param name="NewValue"> New CD number to put in the database </param>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Metadata_Complete(System.String,System.String)">
            <summary> Sets the date for metadata completion  </summary>
            <param name="bibid">Bib ID for this material</param>
            <param name="vid">VID for this material</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Go_UFDC_Complete(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> Marks an item as having been GoUFDCd... and sent through whole system </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <param name="ftped"></param>
            <param name="hasText"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Go_FDA_Complete(System.String,System.String)">
            <summary> Marks an item as having been FTP'd to FDA </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <remarks> This method calls the stored procedure 'CS_Go_FDA_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.FDA_FTP_Log(System.String,System.Boolean,System.Int32)">
            <summary> Store the log of this fda ftp </summary>
            <param name="isError"> </param>
             <param name="Package"> </param>
            <param name="PackageSize"></param>
            <remarks> This method calls the stored procedure 'FDA_Store_FTP_Log'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Get_Minimum_Info_For_FTP(System.String,System.String)">
            <summary> Gets minimum information to validate before FTPing </summary>
            <param name="bibid">BibID for this item</param>
            <param name="vid">Volume ID for this item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Get_Archive_Number(System.String)">
            <summary>Get_Archive_Number is a private method used to get the CD number from the CD Volume label</summary>
            <param name="rootDir"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Check_CD_Existence(System.String)">
            <summary> Checks to see if information exists for this cd number </summary>
            <param name="cdnumber"> CD Number </param>
            <returns>TRUE if it exists, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Delete_ArchiveNumber(System.String)">
            <summary> Delete all information tied to a CD </summary>
            <param name="archiveNumber"> Archive identifier </param>
            <returns>TRUE if successul, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Save_Basic_CD_Info(System.String,System.String)">
            <summary> Save the basic information about an archival CD or DVD </summary>
            <param name="archiveNumber"></param>
            <param name="serialNumber"></param>
            <returns>Archive Media ID for subsequent additions</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary> Saves the connection between a CD and a volume and stores the file range </summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <param name="totalFiles"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary> Saves information about a single file on a CD for an existing volume </summary>
            <param name="volumeid">Primary key for the volume </param>
            <param name="fileName">Name of this file</param>
            <param name="fileSize">Size of this file</param>
            <param name="dateCreated">Date this file was created</param>
            <param name="dateModified">Date this file was modified</param>
            <param name="extension">Extension for this file</param>
            <param name="archiveMediaID">Primary key for the archive CD or DVD</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Refresh_Importer_Tables">
            <summary> Method refreshes all of the importer tables </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.UFDC_Online_Edit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as been editing online through UFDC </summary>
            <param name="bibid">BibID for the item edited</param>
            <param name="vid">VID for the item edited </param>
            <param name="user">User name who did the edit</param>
            <param name="usernotes">Any user notes about this edit</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.UFDC_Online_Submit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been submitted online </summary>
            <param name="bibid">BibID for the item submitted </param>
            <param name="vid">VID for the item submitted </param>
            <param name="user">User name who submitted this item</param>
            <param name="usernotes">Any user notes about this new item</param>
        </member>
        <member name="F:DLC.Tools.Database.Database_SQL.THROW_EXCEPTIONS">
            <summary> Flag indicates whether exceptions should be thrown </summary>
            <remarks> If this flag is set to TRUE, a <see cref="!:CS_Sample_Exception"/> 
            will be thrown if any error occurs while accessing the database. </remarks>
        </member>
        <member name="F:DLC.Tools.Database.Database_SQL.DISPLAY_ERRORS">
            <summary> Flag indicates whether a message should be displayed when
            errors occur. </summary>
            <remarks> Set this flag to TRUE to show a message box when errors occur. </remarks>
        </member>
        <member name="F:DLC.Tools.Database.Database_SQL.DISPLAY_INNER_EXCEPTIONS">
            <summary> Flag indicates if the text of the internal exception should
            be included in any message or exception thrown.  </summary>
            <remarks> Set to TRUE to show the text from the inner exception. </remarks>
        </member>
        <member name="F:DLC.Tools.Database.Database_SQL.ERROR_STRING">
            <summary> Error string displayed in the case of an error </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.exception_caught(System.String,System.Exception)">
            <summary> Method is called when an exception is caught while accessing the database. </summary>
            <param name="stored_procedure_name"> Name of the stored procedure called </param>
            <param name="exception"> Exception caught while accessing the database </param>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Validate_UFDC_Item(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary> Validate that the UFDC Item can be saved to the current database type </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="checkCopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.Save_To_Database(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary> Saves a UFDC Item to the tracking database </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="Validation_Errors">List of critical validation Validation_Errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) Tracking_Warnings as output of validation process</param>
            <param name="check_CopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="NewItemFlag">Flag tells if this is a new item or not</param>
            <returns>TRUE if successful (may have Tracking_Warnings though) or FALSE if validation or tracking save failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_SQL.FDA_Report_Save(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary> Save the information about a FDA report to the database </summary>
            <param name="Package">ID of the submission package sent to FDA.  (End user's id)</param>
            <param name="IEID">Intellectual Entity ID assigned by FDA</param>
            <param name="FdaReportType">Type of FDA report received</param>
            <param name="Report_Date">Date FDA was generated</param>
            <param name="Account">Account information for the FDA submission package</param>
            <param name="Project">Project information for the FDA submission package</param>
            <param name="Warnings">Number of warnings in this package</param>
            <param name="BibID">Bibliographic Identifier</param>
            <param name="VID">Volume Identifier</param>
            <returns>Primary key for the report in the database, or -1 on failure</returns>
            <remarks>This calls the FDA_Report_Save stored procedure in the database</remarks>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.DB_Type">
            <summary> Gets the database type </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Show_Errors">
            <summary> Gets and sets a flag if this database should show errors messages  </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Bib_VID_List">
            <summary> Get the list of Bib ID's and VIDS from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Get_PortableDrives">
            <summary> Gets the list of portable drives </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Get_Volumes_QCd">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Volumes_QCd'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.CD_Number">
            <summary> Gets or sets the CD number from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.is_Admin">
            <summary> Gets a flag indicating if this is an Administrator </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Project_Codes">
            <summary> Gets the list of all valid project codes </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Material_Types">
            <summary> Gets the list of all valid material types</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Locations">
            <summary> Gets the list of all locations from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_SQL.Bib_VID_List_With_External_Identifiers">
            <summary> Gets the list of all items with any specific external 
            identifiers from the database to ensure no replication is occurring </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.Database.Database_dLOC.Valid_Bib_VID(System.String,System.String)" -->
        <member name="M:DLC.Tools.Database.Database_dLOC.Get_QC_Log(System.String,System.String)">
            <summary> Gets all of the QC logs for a particular volume </summary>
            <param name="volumeid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Submit_QC_Log(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary> Submit a log about QCing a volume </summary>
            <param name="volumeid"> </param>
            <param name="notes"> </param>
            <param name="scanqc"> </param>
            <param name="qcstatusid"> </param>
            <param name="volumeerrortypeid"> </param>
            <param name="storage_location"> </param>
            <remarks> This method calls the stored procedure 'CS_Submit_QC_Log'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Get_Volumes_in_QC(System.String)">
            <summary> Returns all of the volumes currently in QC process </summary>
            <param name="date"> Date from which to return the volumes ready </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Volumes_in_QC'. </remarks>
            <exception cref="!:qc_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.PreQC_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been Pre-QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_PreQC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.QC_Complete(System.String,System.String)">
            <summary> Marks an item as having been QCd</summary>
            <param name="bibid">Bibliographic Identifier for this digital resource</param>
            <param name="vid">Volume identifier for this digital resource</param>
            <remarks> This method calls the stored procedure 'CS_QC_Complete'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Get_Bibliographic_Data(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Builds a bib package using the database of choice for any additionally needed information </summary>
            <param name="bibid"> Bib ID</param>
            <param name="volumeid"> VID</param>
            <param name="destination_directory">Directory in which to save the METS file and look for data</param>
            <param name="mets_directory">Directory where pre-assembled METS files are stored</param>
            <param name="marc_directory">Directory where MARC XML files are stored</param>
            <param name="project_directory">Directory where PROJECT-LEVEL METS files are stored</param>
            <param name="xml_directory">Directory where necessary XML helper files are stored</param>
            <param name="app_name">Name of this application</param>
            <param name="user_name">Name of this user</param>
            <returns>Completely built bibliographic package, or NULL</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Set_NextCD(System.Int32)">
            <summary> Stored Procedure to set the next cd number  </summary>
            <param name="nextcd"> </param>
            <remarks> This method calls the stored procedure 'MT_Set_NextCD'. </remarks>
            <exception cref="!:dLOC_Tracking_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Metadata_Complete(System.String,System.String)">
            <summary> Sets the date for metadata completion  </summary>
            <param name="bibid">Bib ID for this material</param>
            <param name="vid">VID for this material</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Go_UFDC_Complete(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> Marks an item as having been GoUFDCd... and sent through whole system </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
            <param name="ftped"></param>
            <param name="hasText"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Go_FDA_Complete(System.String,System.String)">
            <summary> Marks an item as having been FTP'd to FDA </summary>
            <param name="bibid"> </param>
            <param name="vid"> </param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.FDA_FTP_Log(System.String,System.Boolean,System.Int32)">
            <summary> Store the log of this fda ftp </summary>
            <param name="Package"></param>
            <param name="isError"></param>
            <param name="PackageSize"></param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Get_Minimum_Info_For_FTP(System.String,System.String)">
            <summary> Gets minimum information to validate before FTPing </summary>
            <param name="bibid">BibID for this item</param>
            <param name="vid">Volume ID for this item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Check_CD_Existence(System.String)">
            <summary> Checks to see if information exists for this cd number </summary>
            <param name="cdnumber"> CD Number </param>
            <returns>TRUE if it exists, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Delete_ArchiveNumber(System.String)">
            <summary> Delete all information tied to a CD </summary>
            <param name="archiveNumber"> Archive identifier </param>
            <returns>TRUE if successul, otherwise FALSE</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Save_Basic_CD_Info(System.String,System.String)">
            <summary> Save the basic information about an archival CD or DVD </summary>
            <param name="archiveNumber"></param>
            <param name="serialNumber"></param>
            <returns>Archive Media ID for subsequent additions</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Save_FileRange(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary> Saves the connection between a CD and a volume and stores the file range </summary>
            <param name="archiveMediaID"></param>
            <param name="volumeid"></param>
            <param name="filerange"></param>
            <param name="totalFiles"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Save_File_CheckSum(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary> Saves information about a single file on a CD for an existing volume </summary>
            <param name="volumeid">Primary key for the volume </param>
            <param name="fileName">Name of this file</param>
            <param name="fileSize">Size of this file</param>
            <param name="dateCreated">Date this file was created</param>
            <param name="dateModified">Date this file was modified</param>
            <param name="extension">Extension for this file</param>
            <param name="archiveMediaID">Primary key for the archive CD or DVD</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Refresh_Importer_Tables">
            <summary> Method refreshes all of the importer tables </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.UFDC_Online_Edit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as been editing online through UFDC </summary>
            <param name="bibid">BibID for the item edited</param>
            <param name="vid">VID for the item edited </param>
            <param name="user">User name who did the edit</param>
            <param name="usernotes">Any user notes about this edit</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.UFDC_Online_Submit_Complete(System.String,System.String,System.String,System.String)">
            <summary> Marks an item as having been submitted online </summary>
            <param name="bibid">BibID for the item submitted </param>
            <param name="vid">VID for the item submitted </param>
            <param name="user">User name who submitted this item</param>
            <param name="usernotes">Any user notes about this new item</param>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Validate_UFDC_Item(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary> Validate that the UFDC Item can be saved to the current database type </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="checkCopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.Save_To_Database(UFDC_Bib_Package.Package.UFDC_Item,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary> Saves a UFDC Item to the tracking database </summary>
            <param name="thisBib">UFDC Item object</param>
            <param name="Validation_Errors">List of critical validation errors as output of validation process</param>
            <param name="Tracking_Warnings">List of (non-critical) warnings as output of validation process</param>
            <param name="check_CopyrightPermissions">Flag on whether to check for copyright permissions or not</param>
            <param name="NewItemFlag">Flag tells if this is a new item or not</param>
            <returns>TRUE if successful (may have warnings though) or FALSE if validation or tracking save failed</returns>
        </member>
        <member name="M:DLC.Tools.Database.Database_dLOC.FDA_Report_Save(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary> Save the information about a FDA report to the database </summary>
            <param name="Package">ID of the submission package sent to FDA.  (End user's id)</param>
            <param name="IEID">Intellectual Entity ID assigned by FDA</param>
            <param name="FdaReportType">Type of FDA report received</param>
            <param name="Report_Date">Date FDA was generated</param>
            <param name="Account">Account information for the FDA submission package</param>
            <param name="Project">Project information for the FDA submission package</param>
            <param name="Warnings">Number of warnings in this package</param>
            <param name="BibID">Bibliographic Identifier</param>
            <param name="VID">Volume Identifier</param>
            <returns>Primary key for the report in the database, or -1 on failure</returns>
            <remarks>This calls the FDA_Report_Save stored procedure in the database</remarks>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.DB_Type">
            <summary> Gets the database type </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Show_Errors">
            <summary> Gets and sets a flag if this database should show errors messages  </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Bib_VID_List">
            <summary> Get the list of Bib ID's and VIDS from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Get_PortableDrives">
            <summary> Gets the list of portable drives </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Get_Volumes_QCd">
            <summary>  </summary>
            <remarks> This property calls the stored procedure 'CS_Get_All_Volumes_QCd'. </remarks>
            <exception cref="!:CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.CD_Number">
            <summary> Gets or sets the CD number from the database </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.is_Admin">
            <summary> Gets a flag indicating if this is an Administrator </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Project_Codes">
            <summary> Gets the list of all valid project codes </summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Material_Types">
            <summary> Gets the list of all valid material types</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Locations">
            <summary> Gets the list of all locations from the database</summary>
        </member>
        <member name="P:DLC.Tools.Database.Database_dLOC.Bib_VID_List_With_External_Identifiers">
            <summary> Gets the list of all items with any specific external 
            identifiers from the database to ensure no replication is occurring </summary>
        </member>
        <member name="T:DLC.Tools.Logs.LogFileXHTML_Style">
            <summary> [ NOT YET FULLY IMPLEMENTED ] <br/> <br/>
            LogFileXHTML_Style is a class used to hold information about a specific style used in the <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. 
            <br/> <br/> </summary>
            <remarks> This class is created by calls to the <see cref="M:DLC.Tools.Logs.LogFileXHTML.AddNewStyle(System.String,System.String,System.Boolean)"/> method in the <see cref="T:DLC.Tools.Logs.LogFileXHTML"/> class. 
            <br/> <br/>
            Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.  </remarks> 
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML_Style.bold">
            <summary> Private bool variable stores flag which indicates if this style should have the actual log portion of the line emboldened. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML_Style.font_Color">
            <summary> Private string variable stores the information for the color of the font used for this style. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML_Style.font_Family">
            <summary> Private string variable stores the information for the font family for this style. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML_Style.font_Size">
            <summary> Private string variable stores the information for the size of the font to use for this style. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML_Style.italics">
            <summary> Private bool variable stores flag which indicates if the actual log information for these style should be italicized. </summary>
        </member>
        <member name="F:DLC.Tools.Logs.LogFileXHTML_Style.name">
            <summary> Private string variable stores the name of this style to be referenced in the body of the XHTML document. </summary>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML_Style.#ctor(System.Boolean,System.String,System.String,System.Boolean,System.String)">
            <summary> Constructor for the LogFileXHTML_Style class. </summary>
            <param name="bold"> Flag which indicates if this style should have the actual log portion of the line emboldened. </param>
            <param name="font_Color"> The information for the color of the font used for this style. </param>
            <param name="font_Size"> The information for the size of the font to use for this style. </param>
            <param name="italics"> Flag which indicates if the actual log information for these style should be italicized. </param>
            <param name="name"> The name of this style to be referenced in the body of the XHTML document. </param>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML_Style.#ctor(System.String)">
            <summary> Constructor for the LogFileXHTML_Style class which takes the style definition from
            HTML and parses each element for this object. </summary>
            <remarks> The input string must be of the exact form which the ToString() method creates. </remarks>
            <param name="style_definition"> Style sheet in HTML format, as output by ToString() </param>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileXHTML_Style.ToString">
            <summary> Returns the Style Sheet definition line which defines this style. </summary>
            <returns> Style sheet definition XHTML line. </returns>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML_Style.Bold">
            <summary> Gets flag which indicates if this style should have the actual log portion of the line emboldened. </summary>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML_Style.Font_Color">
            <summary> Gets the information for the color of the font used for this style. </summary>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML_Style.Font_Family">
            <summary> Gets the information for the font family for this style. </summary>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML_Style.Font_Size">
            <summary> Gets the information for the size of the font to use for this style. </summary>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML_Style.Italics">
            <summary> Gets flag which indicates if the actual log information for these style should be italicized. </summary>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileXHTML_Style.Name">
            <summary> Gets the name of this style to be referenced in the body of the XHTML document. </summary>
        </member>
        <member name="T:DLC.Tools.Logs.LogFileText">
             <summary> A log file IO control object which writes to a text-based log file. <br/><br/></summary>
             <remarks> This class establishes a text log file and writes to it.  There are two modes that can
             be used for this log file.  You can specify <see cref="M:DLC.Tools.Logs.LogFileText.Open"/> and <see cref="M:DLC.Tools.Logs.LogFileText.Close"/>, which will leave
             the file stream (and associated resources) open during the period between the two calls.
             Alternatively, you can just call the <see cref="M:DLC.Tools.Logs.LogFileText.Write(System.String)"/> routine directly.  It will open the stream
             before the write and close right after writing and modifying the header information. <br/> <br/> 
             This log file will wrap around after the number of lines specified in the constructor
             or in <see cref="P:DLC.Tools.Logs.LogFileText.MaxLinesAllowed"/>.  <br/> <br/>
             Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.   </remarks>
             <example> Below is the first example of how to use this class.<code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using System.IO;
            	using GeneralTools.Logs;
            
            	namespace DLC.Tools
            	{
            		public class LogFileText_Example_1
            		{
            			static void Main() 
            			{
            				// Create a new Text Log File
            				LogFileText myLogger = new LogFileText("c:\\example1.log");
            
            				// Set some of the values [these could have been set in the constructor]
            				myLogger.DateStampingEnabled = true;	
            				myLogger.enableRowHeaders("Example 1");
            				myLogger.MaxLinesAllowed = 15;
            
            				// Make sure this is a fresh log file
            				myLogger.New();
            
            				// Open the file explicitly.  This will leave a connection open for 
            				// the next few lines of processing until Close() is called.
            				myLogger.Open();
            
            				// Go through and add each diretory name to this log file
            				int folderNumber = 1;
            				foreach ( string thisDir in Directory.GetDirectories("C:\\") )
            				{
            					myLogger.Write( "Folder " + thisDir + " is the " + folderNumber + "th folder found." );
            					folderNumber++;
            				}
            
            				// Add a final line
            				myLogger.Write( folderNumber + " TOTAL FOLDERS FOUND!" );
            			
            				// Now, close the log file connection
            				myLogger.Close();
            			}
            		}
            	}
             </code> <br/>
             The first example below results in the following in the log file 'example1.log'.  This demonstrates
             how the log file will loop back around to the top after the maximum number of lines are found:
             <code>
            	Log File c:\example1.log.  Created: 11/10/2003 1:18:48 PM                                                                   
            	[7/15/128]                                                                                                   
                                                                                                                                         
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\RECYCLER is the 14th folder found.                                             
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\System Volume Information is the 15th folder found.                            
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\WINNT is the 16th folder found.                                                
            	11/10/2003 1:18:48 PM - Example 1 - 17 TOTAL FOLDERS FOUND!                                                                  
                                                                                                                                         
            	_____________________________________________________________________________________________________________________________
                                                                                                                                         
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\Inetpub is the 8th folder found.                                               
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\My Music is the 9th folder found.                                              
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\OfficeScan NT is the 10th folder found.                                        
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\Perl is the 11th folder found.                                                 
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\Processing is the 12th folder found.                                           
            	11/10/2003 1:18:48 PM - Example 1 - Folder C:\Program Files is the 13th folder found.                                        
             </code> <br/> <br/> <br/>
             This second example shows how to use this object to make a simple text file which can easily
             be imported into a database or spreadsheet, by using minimal information at the beginning of
             each row, and programmatically deliminating each field.<code>
             <SPAN class="lang">[C#]</SPAN> 
             using System;
            	using System.IO;
            	using GeneralTools.Logs;
            
            	namespace DLC.Tools
            	{
            		public class LogFileText_Example_2
            		{
            			static void Main() 
            			{
            				// Create a new Text Log File
            				LogFileText myLogger = new LogFileText("c:\\example2.log");
            				myLogger.New();
            
            				// Set some of the values [these could have been set in the constructor]
            				myLogger.DateStampingEnabled = false;	
            				myLogger.disableRowHeaders();
            				myLogger.MaxLinesAllowed = 1000;
            
            				// Write an explanation first line
            				myLogger.Write("Directory Name|Last Write Time|File Count");
            
            				// Go through and add each diretory name to this log file
            				foreach ( string thisDir in Directory.GetDirectories("C:\\") )
            				{
            					// May not have access to some of this information, so perform in try/catch
            					try
            					{
            						// Write the folder name and further information
            						myLogger.Write( thisDir + "|" + ( new DirectoryInfo(thisDir).LastWriteTime.ToShortDateString() ) + "|" + Directory.GetFiles(thisDir).Length);
            					}
            					catch
            					{
            					}
            				}
            			}
            		}
            	}
            	</code> <br/>
             This second example results in the following in the log file 'example2.log':
             <code>
            	Log File c:\example2.log.  Created: 11/10/2003 3:26:18 PM                                                                   
            	[19/1000/128]                                                                                                
                                                                                                                                         
            	Directory Name|Last Write Time|File Count                                                                                   
            	C:\adaptec|3/10/2003|1                                                                                                       
            	C:\ADOBEAPP|6/10/2002|0                                                                                                      
            	C:\Aerials|11/7/2003|0                                                                                                       
            	C:\comcheck|9/16/2002|0                                                                                                      
            	C:\Content SDK|10/10/2002|5                                                                                                  
            	C:\dell|6/4/2002|0                                                                                                           
            	C:\Documents and Settings|10/13/2003|0                                                                                       
            	C:\Inetpub|6/29/2002|0                                                                                                       
            	C:\My Music|10/26/2003|0                                                                                                     
            	C:\OfficeScan NT|11/7/2003|95                                                                                                
            	C:\Perl|6/25/2002|2                                                                                                          
            	C:\Processing|11/7/2003|0                                                                                                    
            	C:\Program Files|10/15/2003|2                                                                                                
            	C:\RECYCLER|2/17/2003|0                                                                                                      
            	C:\WINNT|11/10/2003|158                                                                                                           
                                                                                                                                         
            	_____________________________________________________________________________________________________________________________
            	
            	</code>
            </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Lines Allowed - 5000 lines before wrap around occurs
            <li type="circle"/> Line Length - 128 character line length
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.String)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="rowHeader"> Information to place at the beginning of each row </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Lines Allowed - 5000 lines before wrap around occurs
            <li type="circle"/> Line Length - 128 character line length
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.Int32)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Line Length - 128 character line length
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.Int32,System.Int32)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <param name="lineLength"> Maximum line length allowed </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="rowHeader"> Information to place at the beginning of each row </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <param name="lineLength"> Maximum line length allowed </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            <li type="circle"/> Exceptions - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.Boolean)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Lines Allowed - 5000 lines before wrap around occurs
            <li type="circle"/> Line Length - 128 character line length
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.String,System.Boolean)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="rowHeader"> Information to place at the beginning of each row </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Lines Allowed - 5000 lines before wrap around occurs
            <li type="circle"/> Line Length - 128 character line length
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.Int32,System.Boolean)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Line Length - 128 character line length
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <param name="lineLength"> Maximum line length allowed </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Row Header - Disabled ( can be enabled by calling the <see cref="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)"/> method )
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary> Create a new text-based log file object.  </summary>
            <param name="newFileName">Name of the log file </param>
            <param name="rowHeader"> Information to place at the beginning of each row </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <param name="lineLength"> Maximum line length allowed </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <remarks> This uses the following default values: <ul>
            <li type="circle"/> Date Stamping - Enabled ( can be changed by calling the <see cref="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled"/> property )
            </ul></remarks>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.setupLogFile(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary> Helper method which does a good portion of the work necessary when constructing
            a new instance of this class. </summary>
            <param name="fileName">Name of the log file </param>
            <param name="rowHeader"> Information to place at the beginning of each row </param>
            <param name="linesAllowed"> Number of lines allowed before wrapping occurs </param>
            <param name="lineLength"> Maximum line length allowed </param>
            <param name="suppressExceptions"> Flag indicates whether to suppress exceptions </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown here if the directory for
            the log file does not exist, and can not be created, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.New">
            <summary> Deletes the current log file, closing first if necessary. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            during processing, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.Exists">
            <summary> Returns true if the log file currently exists. </summary>
            <returns> TRUE if the log file exists, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.Open">
            <summary> Opens or creates a log file. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks>  This also specifies that the connection to the file will 
            remain open until <see cref="M:DLC.Tools.Logs.LogFileText.Close"/> is called. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            opening the connection, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.Write(System.String)">
            <summary> Writes a string to the log file.  </summary>
            <param name="msg"> String to write as a new line in the log file. </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            during processing, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.WriteException(System.Exception)">
            <summary> Writes an Exception to a log file, formatting correctly. </summary>
            <param name="toWrite"> <see cref="T:System.Exception"/> to write as new lines in the log file. </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            opening the connection, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.Close">
            <summary> Saves and closes the log file. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            closing the connection, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.disableRowHeaders">
            <summary> Disable the additional information between the time/date and the log entry. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.enableRowHeaders(System.String)">
            <summary> Enables the additional information between the time/date and
            the log entry and sets this information to the string which is passed in. </summary>
            <param name="textForEachLine"> Text to be used as the Row Headers on each row </param>
            <returns> TRUE if the requested row header is accepted, otherwise FALSE </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.openConnection">
            <summary> Private method which opens the connection and returns true
            or false.  Called by public method Open().   </summary>
            <returns> False is returned if the header in the log file is corrupted, otherwise TRUE </returns>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            opening the connection, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.createHeader">
            <summary> Creates the header for a new log file </summary>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.writeCurrentFileInfo">
            <summary> Writes the specifics of the log file, such as the length, and line length, etc..  </summary>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.readCurrentFileInfo">
            <summary> Reads the information from a preexisting log file.  </summary>
            <returns> TRUE if successful, FALSE if the information is corrupted. </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.configureText(System.String)">
            <summary> take a basic line to go into the log and append the date or rowHeader as necessary.  
            Also, breaks up the message if it exceeds the line length for the log file. </summary>
            <param name="origMsg"> Message to be configured </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.toProperLength(System.String)">
            <summary> takes a string less than the full line length, and appends spaces until
            it fills the record length  </summary>
            <param name="msg"> Message to be increased to the proper length </param>
            <returns> The string of proper length </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.toProperLength(System.String,System.Char)">
            <summary> takes a string less than the full line length, and appends spaces until
            it fills the record length  </summary>
            <param name="msg"> Message to be increased to the proper length </param>
            <param name="filler"> Filler character to use (if not a space ) </param>
            <returns> The string of proper length </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.toProperLength(System.Text.StringBuilder)">
            <summary> takes a StringBuilder less than the full line length, and appends spaces until
            it fills the record length  </summary>
            <param name="msg"> Message to be increased to the proper length </param>
            <returns> The string of proper length </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.toProperLength(System.Text.StringBuilder,System.Char)">
            <summary> takes a StringBuilder less than the full line length, and appends spaces until
            it fills the record length  </summary>
            <param name="msg"> Message to be increased to the proper length </param>
            <param name="filler"> Filler character to use (if not a space ) </param>
            <returns> The string of proper length </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.writeLine(System.String)">
            <summary> writes a fully configured and correct length line into 
            the file and inserts the carriage return and linefeed. </summary>
            <param name="msg"> Message to write to the text-based log file </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.Logs.LogFileText.closeConnection">
            <summary> Saves and closes the log file </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileText.SuppressExceptions">
            <summary> Gets and Sets the flag which indicates if all <see cref="T:DLC.Tools.Logs.LogFile_Exception"/>s should be
            suppressed or not.  </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileText.MaxLinesAllowed">
            <summary> Gets and Sets the number of lines allowed in this log
            file before it begins wrapping back to the top. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
            <exception cref="T:DLC.Tools.Logs.LogFile_Exception"> A <see cref="T:DLC.Tools.Logs.LogFile_Exception"/> will be thrown if there is an error
            during processing, unless the <see cref="P:DLC.Tools.Logs.LogFileText.SuppressExceptions"/> flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileText.isOpen">
            <summary> Returns true if the log file is currently open. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileText.DateStampingEnabled">
            <summary> Gets and sets the flag which indicates if each line receives a date stamp. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="P:DLC.Tools.Logs.LogFileText.DateCreated">
            <summary> Gets the date and time the current log file was created. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.Logs.LogFileText"/> class. </example>
        </member>
        <member name="T:DLC.Tools.IO.Drive_Type">
            <summary> Enumeration tells the type of drive </summary>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.Unknown">
            <summary> Unknown or unrecognized type </summary>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.No_Root_Directory">
            <summary> No root directory found on this drive! </summary>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.Removable_Disk">
            <summary> Removable disk </summary>
            <remarks> Removable hard drives do NOT appear as removable disks! </remarks>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.Local_Disk">
            <summary> Local, fixed, disk drive </summary>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.Network_Drive">
            <summary> Network drive mapped to this machine </summary>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.Compact_Disk">
            <summary> Compact Disk (or DVD) Drive </summary>
        </member>
        <member name="F:DLC.Tools.IO.Drive_Type.RAM_Disk">
            <summary> RAM disk in memory </summary>
        </member>
        <member name="T:DLC.Tools.IO.myDriveInfo">
            <summary> Class holds all the information about a single drive <br /> <br /> </summary>
            <remarks> Written by Mark Sullivan (2005) </remarks>
        </member>
        <member name="F:DLC.Tools.IO.myDriveInfo.Name">
            <summary> Name of the drive (i.e. 'A:', 'C:' ) </summary>
        </member>
        <member name="F:DLC.Tools.IO.myDriveInfo.VolumeName">
            <summary> Name of this volume </summary>
        </member>
        <member name="F:DLC.Tools.IO.myDriveInfo.VolumeSerialNumber">
            <summary> Serial number for this volume </summary>
        </member>
        <member name="F:DLC.Tools.IO.myDriveInfo.Type">
            <summary> Type of drive </summary>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary> Constructor for a new instance of this class </summary>
            <param name="Name"> Name of this drive </param>
            <param name="VolumeName"> Name of the volume itself </param>
            <param name="VolumeSerialNumber"> Serial number for this volume </param>
            <param name="Type"> Type of this drive </param>
        </member>
        <member name="M:DLC.Tools.IO.myDriveInfo.#ctor(System.String,System.String,System.String,DLC.Tools.IO.Drive_Type)">
            <summary> Constructor for a new instance of this class </summary>
            <param name="Name"> Name of this drive </param>
            <param name="VolumeName"> Name of the volume itself </param>
            <param name="VolumeSerialNumber"> Serial number for this volume </param>
            <param name="Type"> Type of this drive </param>
        </member>
        <member name="T:DLC.Tools.FileSHA1">
            <summary>
            FileSha1 is an object used to convert a file to a sha1 Checksum string.  
            The name of this file is passed in during the construction of this 
            object, or by using the property FileName.  Then the Checksum is retrieved
            by using the Checksum property.<br />
            <br />
            </summary>
            <remarks>  Object created by Chris Nicolich for University of Florida's Digital Library Center.  </remarks>
            <SPAN class="lang">[C#]</SPAN> 
        </member>
        <member name="M:DLC.Tools.FileSHA1.#ctor(System.String)">
            <summary>Constuctor for a new instance of this object</summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DLC.Tools.FileSHA1.#ctor">
            <summary>Constuctor for a new instance of this object</summary>
        </member>
        <member name="M:DLC.Tools.FileSHA1.computeChecksum">
            <summary> Private method used to calculate the sha1 check summ</summary>
        </member>
        <member name="P:DLC.Tools.FileSHA1.FileName">
            <summary> gets and sets the file name for this object</summary>
        </member>
        <member name="P:DLC.Tools.FileSHA1.Checksum">
            <summary> gets the sha1 check sum for this object</summary>
        </member>
        <member name="P:DLC.Tools.FileSHA1.Error">
            <summary>Gets the error message for calculating the check sum of this object</summary>
        </member>
        <member name="T:DLC.Tools.Settings.Image_Division_Type_Table">
            <summary>
            Summary description for Image_Division_Type_Table.
            </summary>
        </member>
        <member name="T:DLC.Tools.IO.Volume_Folders">
            <summary> Class is used to search for valid volume folders <br /> <br /> </summary>
            <remarks> Written by Mark Sullivan (2005) </remarks>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.#ctor">
            <summary> Constructor is used for a new instance of this class </summary>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.Clear">
            <summary> Clears the collection of folder information </summary>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.Check(System.String)">
            <summary> Checks for subfolders under the provided directory </summary>
            <param name="source_directory"> Directory to look under </param>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.Check(System.Boolean,System.String)">
            <summary> Checks for subfolders under the provided directory </summary>
            <param name="source_directory"> Directory to look under </param>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.Check(System.String,System.Object)">
            <summary> Checks for subfolders under the provided directory </summary>
            <param name="source_directory"> Directory to look under </param>
            <param name="user_definable"> User definable field </param>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.isBibIdFormat(System.String)">
            <summary> Private helper method used to check if a folder name is in 
            Bib ID form. </summary>
            <param name="toTest"> String to test for Bib-Id-ness </param>
            <returns> TRUE if this could be a bib id, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.IO.Volume_Folders.isVidFormat(System.String)">
            <summary> Private helper method used to check if a folder name is in 
            VID form. </summary>
            <param name="toTest"> String to test for Bib-Id-ness </param>
            <returns> TRUE if this could be a bib id, otherwise FALSE </returns>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folders.Valid_Folders">
            <summary> Gets the collection of folders which were valid </summary>
        </member>
        <member name="P:DLC.Tools.IO.Volume_Folders.Invalid_Folders">
            <summary> Gets the collection of folders which were NOT valid </summary>
        </member>
        <member name="T:DLC.Tools.FDA.FDA_Report_Writer">
            <summary> Class is used to write the FDA Report data in various formats </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_Report_Writer.Write_Text(DLC.Tools.FDA.FDA_Report_Data,System.String)">
            <summary> Writes the basic information about a FDA report as a text file </summary>
            <param name="report_data">FDA Report information</param>
            <param name="fileName">Name for the text output file</param>
            <returns>Flag indicating if the report creation was successful</returns>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_Report_Writer.Write(DLC.Tools.FDA.FDA_Report_Data,System.String)">
            <summary> Writes the basic information about a FDA ingest report as a valid XML file </summary>
            <param name="report_data">FDA Report information</param>
            <param name="fileName">Name for the XML output file</param>
            <returns>Flag indicating if the report creation was successful</returns>
        </member>
        <member name="T:DLC.Tools.FDA.FDA_Report_Reader">
            <summary> Class is used to read the XML report from FDA </summary>
        </member>
        <member name="M:DLC.Tools.FDA.FDA_Report_Reader.Read(System.String)">
            <summary>Reads the FDA report and creates the associated data object </summary>
            <param name="fileName">Name (including path) of the report</param>
            <returns>All the important data from an ingest report</returns>
        </member>
        <member name="T:DLC.Tools.IO.DirectoryCrawler_FileCollection">
            <summary> DirectoryCrawler_FileCollection is a collection of <see cref="T:DLC.Tools.IO.DirectoryCrawler_File"/> objects which 
            store all the files which were found while iterating through a directory with a <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class.
             <br/><br/> </summary>
            <remarks> This class extends the <see cref="T:System.Collections.CollectionBase"/> abstract class and implements the 
            <see cref="T:System.Collections.IEnumerable"/> interface. <br/> <br/> 
            This class is instantiated by calling the <see cref="P:DLC.Tools.IO.DirectoryCrawler.Files"/> method from a
            <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> object. The user should not directly instantiate this class. <br/> 
            <br/>
            Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.  </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.#ctor">
            <summary> Constructor for a new DirectoryCrawler_FileCollection object. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.Add(DLC.Tools.IO.DirectoryCrawler_File)">
            <summary> Add a new file to this collection. </summary>
            <param name="NewFile"> <see cref="T:DLC.Tools.IO.DirectoryCrawler_File"/> object for this new file </param>
            <returns> The index for this new included File </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.Add(System.String,System.String,System.String,System.Double,System.DateTime,System.DateTime,System.String)">
            <summary> Add a new file to this collection. </summary>
            <param name="Name"> Name of the file (minus extension and path) </param>
            <param name="Extension"> Extension for this file </param>
            <param name="Directory"> Directory for this file </param>
            <param name="Size"> Size of this file in KB </param>
            <param name="DateCreated"> Date and time this file was originally created </param>
            <param name="DateModified"> Date and time this file was last modified </param>
            <param name="UserDefined"> User defined value, to indicate which search was used to find this file </param>
            <returns> The index for this new Included File </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
            <remarks> Since to UserObject is included here, it is set to null </remarks>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.Add(System.String,System.String,System.String,System.Double,System.DateTime,System.DateTime,System.String,System.Object)">
            <summary> Add a new file to this collection. </summary>
            <param name="Name"> Name of the file (minus extension and path) </param>
            <param name="Extension"> Extension for this file </param>
            <param name="Directory"> Directory for this file </param>
            <param name="Size"> Size of this file in KB </param>
            <param name="DateCreated"> Date and time this file was originally created </param>
            <param name="DateModified"> Date and time this file was last modified </param>
            <param name="UserDefined"> User defined value, to indicate which search was used to find this file </param>
            <param name="UserObject"> Object included by the user before iterating through the directory this was found in </param>
            <returns> The index for this new Included File </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.Remove(DLC.Tools.IO.DirectoryCrawler_File)">
            <summary> Remove an existing file from this collection. </summary>
            <param name="FileToRemove"> Included File to remove from this collection. </param>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.Contains(DLC.Tools.IO.DirectoryCrawler_File)">
            <summary> Check to see if an included file object currently exists in this collection.  </summary>
            <param name="FileToCheck"> File to check for existence in this collection. </param>
            <returns>TRUE if the provided included file object is already part of this Collection </returns>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.GetEnumerator">
            <summary> Return an enumerator to step through this collection of files. </summary>
            <returns> A Type-Safe DirectoryCrawler_FileEnumerator</returns>
            <remarks> This version is used in the C# Compiler to detect type conflicts at compilation. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary> Return an enumerator to step through this collection of included files. </summary>
            <returns> A IEnumerator object to step through this collection of included files. </returns>
            <remarks> Explicit interface implementation to support interoperability with other common 
            language runtime-compatible langueages. </remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler_FileCollection.Item(System.Int32)">
            <summary> Address a single file from this Collection, by index. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="T:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator">
            <summary> Inner class implements the <see cref="T:System.Collections.IEnumerator"/> interface and iterates through 
            the collection of included files in this <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/>. <br/> <br/> </summary>
            <remarks> Inclusion of this strongly-typed iterator allows the use of the foreach .. in structure to 
            iterate through all of the <see cref="T:DLC.Tools.IO.DirectoryCrawler_File"/> objects in the 
            <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/> object. The example in the <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/>
            demonstrates this use.</remarks>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.IO.DirectoryCrawler"/> class. </example>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.position">
            <summary> Stores the current position within the collection. </summary>
        </member>
        <member name="F:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.includedFiles">
            <summary> Reference to the <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/> to iterate through. </summary>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.#ctor(DLC.Tools.IO.DirectoryCrawler_FileCollection)">
            <summary> Constructore creates a new DirectoryCrawler_FileEnumerator to iterate through
            the DirectoryCrawler_FileCollection. </summary>
            <param name="includedFileCollection"> <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/> to iterate through </param>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.MoveNext">
            <summary> Move to the next included file in this collection. </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> Method is required by the <see cref="T:System.Collections.IEnumerator"/> interface. </remarks>
        </member>
        <member name="M:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.Reset">
            <summary> Reset to the position just before the first position.  
            Ready for the MoveNext() method to be called. </summary>
            <remarks> Method is required by the <see cref="T:System.Collections.IEnumerator"/> interface. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.Current">
            <summary> Return the current included File from the <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/> </summary>
            <remarks> This type-safe version is used in the C# Compiler to detect type conflicts at compilation. </remarks>
        </member>
        <member name="P:DLC.Tools.IO.DirectoryCrawler_FileCollection.DirectoryCrawler_FileEnumerator.System#Collections#IEnumerator#Current">
            <summary> Return the current Included File from the <see cref="T:DLC.Tools.IO.DirectoryCrawler_FileCollection"/> </summary>
            <remarks> Explicit interface implementation to support interoperability with other common 
            language runtime-compatible langueages. </remarks>
        </member>
        <member name="T:DLC.Tools.FTP.IConnect">
            <summary> IConnect is an interface implemented by objects used for
            connecting to other computers via IP protocols. <br/> <br/> </summary>
            <remarks> This interface is used to provide access to the basic information of port number
            and distant IP address which is being connected to.  <br/> <br/>
            The following classes implement the IConnect interface:
            <table border="1">
            <tr>
            <th><font size="2">Class Name</font></th>
            <th><font size="2">Description</font></th>
            </tr>
            <tr>
            <td><font size="2"><see cref="T:DLC.Tools.FTP.FTPconnect"/></font></td>
            <td><font size="2">Object used to establish a FTP connection with a remote host</font></td>
            </tr>
            <tr>
            <td><font size="2"><see cref="!:HTTPconnect"/></font></td>
            <td><font size="2">Object used to establish a HTTP connection with a remote host</font></td>
            </tr>
            <tr>
            <td><font size="2"><see cref="!:TELNETconnect"/></font></td>
            <td><font size="2">Object used to establish a Telnet connection with a remote host</font></td>
            </tr>
            </table> <br/> <br/>
            Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
        </member>
        <member name="P:DLC.Tools.FTP.IConnect.Port">
            <summary> Returns the port which is used (commonly associated) with this protocol. </summary>
        </member>
        <member name="P:DLC.Tools.FTP.IConnect.Host">
            <summary> Returns the host server address, in string form, of the distant machine being connected to. </summary>
        </member>
        <member name="F:DLC.Tools.FTP.abstract_FTPConnect.TRANSFER_BUFFER_SIZE">
            <summary> Constant value for the Transfer Buffer Size.  Current value is 1024 </summary>
        </member>
        <member name="F:DLC.Tools.FTP.abstract_FTPConnect.READ_BUFFER_SIZE">
            <summary> Constant value for the Read Buffer Size.  Current value is 512 </summary>
        </member>
        <member name="F:DLC.Tools.FTP.abstract_FTPConnect.FTP_PORT">
            <summary> Constant value for the FTP Port number of 21 </summary>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.#ctor">
            <summary> Creates a new instance of the abstract_FTPConnect class </summary>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.#ctor(System.String)">
            <summary> Creates a new instance of the abstract_FTPConnect class </summary>
            <param name="Server_IP">IP for the FTP Server</param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Creates a new instance of the abstract_FTPConnect class </summary>
            <param name="Server_IP">IP for the FTP Server</param>
            <param name="UserName">Username to connect to FTP Server</param>
            <param name="Password">Password to connect to FTP Server</param>
            <param name="SubFolder">Subfolder on FTP server</param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.Open">
            <summary> Opens an active connection to the FTP server.  </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.Close">
            <summary> Closes the active connection to the FTP server.  </summary>
            <remarks>This method only does anything if the FTP implementation leaves the connection open</remarks>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.ChangeDir(System.String)">
            <summary> Changes the current directory </summary>
            <param name="Folder"> Directory to change to </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.MakeDir(System.String)">
            <summary>Create a new subdirectory </summary>
            <param name="Folder"> Directory to create </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.ListDirectoryDetails">
            <summary> Returns the list of files in the current directory. </summary>
            <returns> The directory and files as a unformatted string, or an empty string if an error occurs </returns>
            <remarks> This fires the <see cref="E:DLC.Tools.FTP.abstract_FTPConnect.NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.DeleteFile(System.String)">
            <summary> Delete a file on the remote FTP server </summary>
            <param name="FileName"> FileName to delete from the current directory </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.RenameFile(System.String,System.String)">
            <summary> Renames a file on the remote FTP server. </summary>
            <param name="OldFileName"> Current name of the file on the remote FTP server. </param>
            <param name="NewFileName"> New name for the file on the remote FTP server. </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.UploadFile(System.String,System.String)">
            <summary> Uploads a file from the local machine to the remote host. </summary>
            <param name="Source_File"> Filename and directory of the source file to upload </param>
            <param name="Destination_FileName">Name for the new file on the FTP server </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.DownloadFile(System.String,System.String)">
            <summary> Downloads a file from the remote host to the local machine.  </summary>
            <param name="Source_FileName"> Name of the file on the remote host </param>
            <param name="Destination_File"> Name and path for the file on the local machine </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This fires the <see cref="E:DLC.Tools.FTP.abstract_FTPConnect.NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.Open(System.String,System.String,System.String)">
            <summary> Opens an active connection to the FTP server.  Also, logs in the user
            and authenticates with a password. </summary>
            <param name="UserName"> Username to log into the FTP server </param>
            <param name="Password"> Password for the username provided </param>
            <param name="Server"> IP address of the server </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This method throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.Open(System.String)">
            <summary> Opens an active connection to the FTP server.  Also, logs in the user
            and authenticates with a password. </summary>
            <param name="UserName"> Username to log into the FTP server </param>
            <param name="Password"> Password for the username provided </param>
            <param name="Server"> IP address of the server </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This method throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.List_Directories">
            <summary> Returns the list of directories in the current directory </summary>
            <returns>Collection of subdirectories</returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.List_Files">
            <summary> Returns the list of files in the current directory </summary>
            <returns>Collection of files</returns>
        </member>
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.DownloadFile(System.String)">
            <summary> Downloads a file from the remote host to the local machine.  </summary>
            <param name="FileName"> Name of the file on the remote host </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This will save the file in the applications working directory on the local
            machine with the same name as the file on the remote host. <br/> <br/>
            This fires the <see cref="E:DLC.Tools.FTP.abstract_FTPConnect.NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DLC.Tools.FTP.abstract_FTPConnect.UploadFile(System.String)" -->
        <member name="M:DLC.Tools.FTP.abstract_FTPConnect.isIP(System.String)">
            <summary> Checks to see if the string parameter is in correct IP form. </summary>
            <param name="IP"> String which may or may not be an IP address </param>
            <returns> TRUE if this appears to be a match, otherwise FALSE </returns>
        </member>
        <member name="E:DLC.Tools.FTP.abstract_FTPConnect.NoDataSocketProvided">
            <summary> Public event is fired off when no DataSocket is provided by
            the remote host. </summary>
            <remarks> This commonly occurs when the remote FTP server's file system has reached capacity. <br/> <br/>
            The following methods may trigger this event: <ul>
            <li type="circle"/> <see cref="M:DLC.Tools.FTP.FTPconnect.DownloadFile(System.String,System.String)"/>
            <li type="circle"/> <see cref="!:FTPconnect.DownloadWithProgBar"/>
            <li type="circle"/> <see cref="!:FTPconnect.ListDir"/>
            <li type="circle"/> <see cref="M:DLC.Tools.FTP.FTPconnect.UploadFile(System.String,System.String)"/>
            <li type="circle"/> <see cref="!:FTPconnect.UploadWithProgBar"/>
            </ul></remarks>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.NoDataSocketProvidedFlag">
            <summary>
            Gets the value that indicates no data socket was provided
            and that a 200 code was returned by the server.
            </summary>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.Use_Binary">
            <summary> Gets or sets the flag which indicates to use binary </summary>
            <remarks>Default is TRUE</remarks>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.Use_Active_FTP">
            <summary> Gets or sets the flag which indicates to use active FTP protocol </summary>
            <remarks>Default is FALSE</remarks>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.Server_IP">
            <summary> Gets or sets the IP address for the FTP server </summary>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.SubFolder">
            <summary> Sets the subfolder to use </summary>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.UserName">
            <summary> Sets the user name </summary>
        </member>
        <member name="P:DLC.Tools.FTP.abstract_FTPConnect.Password">
            <summary> Sets the password </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.#ctor">
            <summary> Constructor for a new FTP connection. </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.#ctor(System.String)">
            <summary> Constructor for a new FTP connection accepts the IP address for the FTP host. </summary>
            <param name="Server_IP"> IP address for the remote FTP server to connect to </param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Constructor for a new FTP connection accepts the IP address for the FTP host. </summary>
            <param name="Server_IP"> IP address for the remote FTP server to connect to </param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.Open">
            <summary> Opens an active connection to the FTP server.  </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.Close">
            <summary>Closes the active connection to the FTP server.  </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.ChangeDir(System.String)">
            <summary> Changes the current directory </summary>
            <param name="Folder"> Directory to change to </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.MakeDir(System.String)">
            <summary>Create a new subdirectory </summary>
            <param name="Folder"> Directory to create </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.ListDirectoryDetails">
            <summary> Returns the list of files in the current directory. </summary>
            <returns> The directory and files as a unformatted string, or an empty string if an error occurs </returns>
            <remarks> This fires the <see cref="!:NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.DeleteFile(System.String)">
            <summary> Delete a file on the remote FTP server </summary>
            <param name="FileName"> FileName to delete from the current directory </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.RenameFile(System.String,System.String)">
            <summary> Renames a file on the remote FTP server. </summary>
            <param name="OldFileName"> Current name of the file on the remote FTP server. </param>
            <param name="NewFileName"> New name for the file on the remote FTP server. </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.UploadFile(System.String,System.String)">
            <summary> Uploads a file from the local machine to the remote host. </summary>
            <param name="Source_File"> Filename and directory of the source file to upload </param>
            <param name="Destination_FileName">Name for the new file on the FTP server </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_SFTP.DownloadFile(System.String,System.String)">
            <summary> Downloads a file from the remote host to the local machine.  </summary>
            <param name="Source_FileName"> Name of the file on the remote host </param>
            <param name="Destination_File"> Name and path for the file on the local machine </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="T:DLC.Tools.FTP.FTPconnect_Orig">
             <summary> Object used to open a FTP connection to an external server, and to
             run simple, common FTP commands. <br/> <br/> </summary>
             <remarks> There are two basic ways to interact with this FTP connection.  Each
             individual action can be called by a method name (for example, <see cref="M:DLC.Tools.FTP.FTPconnect.MakeDir(System.String)"/> 
             and <see cref="M:DLC.Tools.FTP.FTPconnect.UploadFile(System.String,System.String)"/>).  These methods can also be called by the
             common command name via the <see cref="!:FTPconnect.Command"/> method, which 
             imitates the common console interface and accepts commands in that way. <br/><br/>
             This class implements the <see cref="T:DLC.Tools.FTP.IConnect"/> interface. <br/> <br/>
             Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. <br/> <br/>
             The <see cref="T:DLC.Tools.FTP.FTPconnect_Orig.ResponseStruct"/> and <see cref="!:FTPconnect.Command"/> concepts  
             are borrowed from an anonymous open source file. </remarks>
             <example> The example below shows how to use this class to create a Console application to
             access a remote FTP server.  This example predominantly uses the <see cref="!:FTPconnect.Command"/> method.
             <code> <SPAN class="lang">[C#]
            	using System;
            	using CustomTools.IO;
            
            	namespace CustomTools
            	{
            		public class FTPconnect_Example_1
            		{
            			static void Main() 
            			{
            				// Get the server IP address from the user
            				Console.Write("Enter the server's IP address: ");
            				string server = Console.ReadLine();
            
            				try
            				{
            					//Define the new FTPconnect object
            					FTPconnect myFTP = new FTPconnect(server);
            
            					// Get the user name and password
            					Console.Write("Enter your username: ");
            					string user = Console.ReadLine();
            					Console.Write("Enter your password: ");
            					string password = Console.ReadLine();
            
            					// Open a connection to the FTP server
            					if ( myFTP.Open( user, password, server ) )
            						Console.WriteLine("\nConnection Successful!");
            					else
            						Console.WriteLine("\nUnable to connect!");
            
            					// Accept commands from the user until they hit 'QUIT'
            					string resultString, command, parameter = "";
            					bool resultBool;
            					do
            					{
            						// Get the command to execute
            						Console.Write("\nEnter the FTP command to execute [or 'QUIT' to end]: ");
            						command = Console.ReadLine().ToUpper();
            
            						// Get the parameter, if needed
            						if ( !command.Equals("LIST") &amp;&amp; !command.Equals("PWD") &amp;&amp; !command.Equals("QUIT") )
            						{
            							Console.Write("Enter the necessary parameter: ");
            							parameter = Console.ReadLine();
            						}
            
            						// Try to execute the command
            						try
            						{
            							// Use the 'command' method to imitate a console connection,
            							// alternating the return value, based on the command
            							if ( command.Equals("LIST") || command.Equals("PWD") )
            							{
            								// Pass the command to the FTP server, and display the result
            								resultString = myFTP.Command( command, parameter ).ToString();
            								Console.WriteLine( "\n" + resultString );
            							}
            							else
            							{
            								// Send the command and capture the Boolean result
            								resultBool = Convert.ToBoolean(myFTP.Command( command, parameter ));
            
            								// Tell whether the command executed successfully
            								if ( resultBool )
            									Console.WriteLine( "\nCommand executed successfully." );
            								else
            									Console.WriteLine( "\nCommand did NOT execute successfully!" );
            							}
            						}
            						catch ( FTPconnect_Exception ftp_e ) 
            						{
            							Console.WriteLine("\nThe command you entered was not valid!" + ftp_e.ToString());
            						}
            					} while ( !command.Equals("QUIT") );
            				}
            				catch ( FTPconnect_Exception ftp_e )
            				{
            					Console.WriteLine("The server address you provided is not an IP address!");
            				}
            			}
            		}
            	}
            	</SPAN> </code> <br/> Below is an example of using the Console FTP application above.
            	<code>
            	Enter the server's IP address: 128.227.54.23
            	Enter your username: ********
            	Enter your password: ********
            
            	Connection Successful!
            
            	Enter the FTP command to execute [or 'QUIT' to end]: CWD
            	Enter the necessary parameter: /docsd
            
            	Command executed successfully.
            
            	Enter the FTP command to execute [or 'QUIT' to end]: PWD
            
            	/docsd
            
            	Enter the FTP command to execute [or 'QUIT' to end]: LIST
            
            	total 6056
            	-rwxrwxr-x   1 marsull  web       6144466 Jun 10 10:11 webPages.zip
            
            
            	Enter the FTP command to execute [or 'QUIT' to end]: STOR
            	Enter the necessary parameter: c:\names.html
            
            	Command executed successfully.
            
            	Enter the FTP command to execute [or 'QUIT' to end]: MKDIR
            	Enter the necessary parameter: TestDir
            
            	Command executed successfully.
            
            	Enter the FTP command to execute [or 'QUIT' to end]: RETR
            	Enter the necessary parameter: webPages.zip, c:\downloadedPages.zip
            
            	Command executed successfully.
            
            	Enter the FTP command to execute [or 'QUIT' to end]: LIST
            
            	total 6272
            	drwxr-x---   2 marsull  web          4096 Nov 10 10:58 TestDir
            	-rw-r-----   1 marsull  web        211487 Nov 10 10:58 names.html
            	-rwxrwxr-x   1 marsull  web       6144466 Jun 10 10:11 webPages.zip
            
            
            	Enter the FTP command to execute [or 'QUIT' to end]: QUIT
            
            	Command executed successfully.
            	</code>
            </example>
        </member>
        <member name="F:DLC.Tools.FTP.FTPconnect_Orig.controlSocket">
            <summary> Socket object used to open the control Socket to connect to the FTP server </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.#ctor">
            <summary> Constructor for a new FTP connection. </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.#ctor(System.String)">
            <summary> Constructor for a new FTP connection accepts the IP address for the FTP host. </summary>
            <param name="Server_IP"> IP address for the remote FTP server to connect to </param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.Finalize">
            <summary> Destructor for the FTPconnect class. </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.Open">
            <summary> Opens an active connection to the FTP server.  </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.Close">
            <summary> Closes the active connection to the FTP server.  </summary>
            <remarks>This method closes the control socket and the connection </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.ChangeDir(System.String)">
            <summary> Changes the current directory </summary>
            <param name="Folder"> Directory to change to </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'CWD' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.MakeDir(System.String)">
            <summary>Create a new subdirectory </summary>
            <param name="Folder"> Directory to create </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'MKDIR' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.ListDirectoryDetails">
            <summary> Returns the list of files in the current directory. </summary>
            <returns> The directory and files as a unformatted string, or an empty string if an error occurs </returns>
            <remarks> This can also be called by passing in the command 'LIST' to the <see cref="!:FTPconnect.Command"/> method. <br/> <br/>
            This fires the <see cref="!:NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.DeleteFile(System.String)">
            <summary> Delete a file on the remote FTP server </summary>
            <param name="FileName"> FileName to delete from the current directory </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'DELE' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.RenameFile(System.String,System.String)">
            <summary> Renames a file on the remote FTP server. </summary>
            <param name="OldFileName"> Current name of the file on the remote FTP server. </param>
            <param name="NewFileName"> New name for the file on the remote FTP server. </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'RNFR' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.DownloadFile(System.String,System.String)">
            <summary> Downloads a file from the remote host to the local machine.  </summary>
            <param name="Source_FileName"> Name of the file on the remote host </param>
            <param name="Destination_File"> Name and path for the file on the local machine </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'RETR' to the <see cref="!:FTPconnect.Command"/> method. <br/> <br/>
            This fires the <see cref="!:NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.UploadFile(System.String,System.String)">
            <summary> Uploads a file from the local machine to the remote host. </summary>
            <param name="Source_File"> Filename and directory of the source file to upload </param>
            <param name="Destination_FileName">Name for the new file on the FTP server </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.Command(System.String,System.String)">
             <summary>
             Main interface for sending commands to the FTP server over an active connection which
             imitates the common console and accepts the standard console commands. </summary>
             <param name="Command"> Command to send the FTP Server.  ['USER', 'PASS', 'CWD',
             'DELE', 'LIST', 'MKDIR', 'PWD', 'RETR', 'RNFR', 'STOR', 'TYPE', or 'QUIT']</param>
             <param name="Parameter"> Parameter needed to execute the command properly </param>
             <returns> An object of some sort (usually boolean) </returns>
             <remarks> Below are the accepted commands, associated parameters, and additional information:
             <table border="1">
             <tr>
             <th><font size="2">Command</font></th>
             <th><font size="2">Parameter</font></th>
             <th><font size="2">Description</font></th>
             <th><font size="2">Returns</font></th>
             <th><font size="2">Method called</font></th>
             </tr>
             <tr>
             <td><font size="2">"USER"</font></td>
             <td><font size="2">UserName</font></td>
             <td><font size="2">Logs in the user indicated</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.LoginUser"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"PASS"</font></td>
             <td><font size="2">Password</font></td>
             <td><font size="2">Authenticated the user</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.AuthenticateUser"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"CWD"</font></td>
             <td><font size="2">Directory</font></td>
             <td><font size="2">Changes the directory</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="M:DLC.Tools.FTP.FTPconnect.ChangeDir(System.String)"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"DELE"</font></td>
             <td><font size="2">FileName</font></td>
             <td><font size="2">Deletes the file indicated</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="M:DLC.Tools.FTP.FTPconnect.DeleteFile(System.String)"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"LIST"</font></td>
             <td><font size="2">(empty)</font></td>
             <td><font size="2">Returns the directory list</font></td>
             <td><font size="2"> <see cref="T:System.String"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.ListDir"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"MKDIR"</font></td>
             <td><font size="2">Directory</font></td>
             <td><font size="2">Makes a new directory</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="M:DLC.Tools.FTP.FTPconnect.MakeDir(System.String)"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"PWD"</font></td>
             <td><font size="2">(empty)</font></td>
             <td><font size="2">Returns current directory name</font></td>
             <td><font size="2"> <see cref="T:System.String"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.GetDirectory"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"STOR"</font></td>
             <td><font size="2">FileName</font></td>
             <td><font size="2">Sends a file to the server</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="M:DLC.Tools.FTP.FTPconnect.UploadFile(System.String,System.String)"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"RNFR"</font></td>
             <td><font size="2">old,new</font></td>
             <td><font size="2">Renames a file on the server</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.Rename"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"RETR"</font></td>
             <td><font size="2">name1,name2</font></td>
             <td><font size="2">Gets a file from the server</font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="M:DLC.Tools.FTP.FTPconnect.DownloadFile(System.String,System.String)"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"TYPE"</font></td>
             <td><font size="2">'I' or 'A'</font></td>
             <td><font size="2"> Changes transfer method </font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.ChangeMode"/></font></td>
             </tr>
             <tr>
             <td><font size="2">"QUIT"</font></td>
             <td><font size="2">(empty)</font></td>
             <td><font size="2"> Closes the connection </font></td>
             <td><font size="2"> <see cref="T:System.Boolean"/></font></td>
             <td><font size="2"> <see cref="!:FTPconnect.Quit"/></font></td>
             </tr>
             </table>
            </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.LoginUser(System.String)">
            <summary> Log in a user by username. </summary>
            <param name="UserName"> Name of the user to log in </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'USER' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.LoginUser(System.String,System.String)">
            <summary> Log in a user by username and then authenticates them with a password. </summary>
            <param name="UserName"> Name of the user to log in </param>
            <param name="Password"> Password for the user to authenticate </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'USER' and then the command 'PASS'
            to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.AuthenticateUser(System.String)">
            <summary> Authenticate the user with a password </summary>
            <param name="Password"> Password for the user to authenticate </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This can also be called by passing in the command 'PASS' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.ChangeMode(System.Char)">
            <summary> Changes the data transfer mode </summary>
            <param name="DataTransferMode"> New Data Transfer mode [ either 'A' or 'I'] </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
            <remarks> This sends the command to the FTP server to change the transfer type immediately. <br/> <br/>
            The value must be one of the following: <ul>
            <li type="circle"/> 'I' - Binary data transfer mode.  This is the default.
            <li type="circle"/> 'A' - ASCII data transfer mode (may append blank spaces to the ends of files).
            </ul> <br/>
            This can also be called by passing in the command 'TYPE' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This method throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the new value does not match the possible options. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.GetDirectory">
            <summary> Returns the current directory name </summary> 
            <returns> Current directory name </returns>
            <remarks> This can also be called by passing in the command 'PWD' to the <see cref="!:FTPconnect.Command"/> method. </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.Response">
            <summary>
            Reads the response from the FTP server and parses the response into
            a ResponseStruct data object to be passed back to the calling function.
            </summary>
            <returns> The response as a ResponseStruct object </returns>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This method throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            there is an error while processing </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.getDataSocket">
            <summary>
            Get the socket for a data transfer to take place.  This is different than the 
            control socket which has already been obtained.
            </summary>
            <returns> A socket to be used for the data transfer </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Orig.send_command(System.String)">
            <summary> Private method that actually sends the command over the control socket
            and reads the response. </summary>
            <param name="cmd_string"> The string to send to the FTP server </param>
            <returns> the response in ResponseStruct format </returns>
        </member>
        <member name="T:DLC.Tools.FTP.FTPconnect_Orig.ResponseStruct">
            <summary> Internal data structure used to hold the reponse from the FTP server.  <br /> <br /> </summary>
        </member>
        <member name="F:DLC.Tools.FTP.FTPconnect_Orig.ResponseStruct.response_code">
            <summary> Response code as an integer </summary>
        </member>
        <member name="F:DLC.Tools.FTP.FTPconnect_Orig.ResponseStruct.response_message">
            <summary> Textual response from the server </summary>
        </member>
        <member name="T:DLC.Tools.FTP.FTPconnect">
            <summary> Object used to open a FTP connection to an external server, and to
            run simple, common FTP commands. <br /> <br /> </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.#ctor">
            <summary> Constructor for a new FTP connection. </summary>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.#ctor(System.String)">
            <summary> Constructor for a new FTP connection accepts the IP address for the FTP host. </summary>
            <param name="Server_IP"> IP address for the remote FTP server to connect to </param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Constructor for a new FTP connection accepts the IP address for the FTP host. </summary>
            <param name="Server_IP"> IP address for the remote FTP server to connect to </param>
            <exception cref="T:DLC.Tools.FTP.FTPconnect_Exception"> This constructor throws a <see cref="T:DLC.Tools.FTP.FTPconnect_Exception"/> if
            the Server parameter is not a valid IP address. </exception>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.Open">
            <summary> Opens an active connection to the FTP server.  </summary>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.Close">
            <summary> Closes the active connection to the FTP server.  </summary>
            <remarks>This method does nothing in this FTP implementation</remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.ChangeDir(System.String)">
            <summary> Changes the current directory </summary>
            <param name="Folder"> Directory to change to </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.MakeDir(System.String)">
            <summary>Create a new subdirectory </summary>
            <param name="Folder"> Directory to create </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.ListDirectoryDetails">
            <summary> Returns the list of files in the current directory. </summary>
            <returns> The directory and files as a unformatted string, or an empty string if an error occurs </returns>
            <remarks> This fires the <see cref="!:NoDataSocketProvided"/> event if the remote server does not provide the necessary Data Socket.  </remarks>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.DeleteFile(System.String)">
            <summary> Delete a file on the remote FTP server </summary>
            <param name="FileName"> FileName to delete from the current directory </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.RenameFile(System.String,System.String)">
            <summary> Renames a file on the remote FTP server. </summary>
            <param name="OldFileName"> Current name of the file on the remote FTP server. </param>
            <param name="NewFileName"> New name for the file on the remote FTP server. </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.UploadFile(System.String,System.String)">
            <summary> Uploads a file from the local machine to the remote host. </summary>
            <param name="Source_File"> Filename and directory of the source file to upload </param>
            <param name="Destination_FileName">Name for the new file on the FTP server </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect.DownloadFile(System.String,System.String)">
            <summary> Downloads a file from the remote host to the local machine.  </summary>
            <param name="Source_FileName"> Name of the file on the remote host </param>
            <param name="Destination_File"> Name and path for the file on the local machine </param>
            <returns> TRUE if successful, otherwise FALSE </returns>
        </member>
        <member name="T:DLC.Tools.FTP.FTPconnect_Exception">
            <summary> FTPconnect_Exception is a custom exception which is thrown for any error
            caught during processing requests to connect to an external FTP server. <br/> <br/> </summary>
            <remarks> This class extends the <see cref="T:System.ApplicationException"/> class. </remarks>&gt;
        </member>
        <member name="M:DLC.Tools.FTP.FTPconnect_Exception.#ctor(System.String)">
            <summary> Constructor which creates a new FTPconnect_Exception </summary>
            <param name="customMessage"> Custom message which explains the error which
            occurred to fire this exception. </param>
        </member>
        <member name="T:DLC.Tools.FTP.FTPconnect_NoDataSocket_Delegate">
            <summary> FTPconnect_Delegate is a custom delegate which is used to fire
            an event when no data socket is provided during a request.  This commonly 
            occurrs when the FTP site is filled to capacity. <br /> <br /> </summary>
        </member>
        <member name="T:DLC.Tools.Database.CS_TrackingDatabase">
            <summary>
            CS_TrackingDatabase is the main object used to query the database for information. 
            </summary>
            <remarks> This class contains a static constructor and contains mostly static 
            members.   Since this is a database class, it does not make sense to have multiple
            instances to access a single database. <br /><br />
            Object created for University of Florida's Digital Library Center.  </remarks>
        </member>
        <member name="F:DLC.Tools.Database.CS_TrackingDatabase.connectionString">
            <summary> Private constant string variable stores the connection string to get to the Tracking Database on the SQL server. </summary>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Receiving_From_Bib(System.String,System.String)">
            <summary> Gets the receiving id from the bib id </summary>
            <param name="institutionCode"> Code for the institutions </param>
            <param name="bibid"> 8-digit number portion of the bib id </param>
            <remarks> This method calls the stored procedure 'CS_Receiving_From_Bib'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="F:DLC.Tools.Database.CS_TrackingDatabase.THROW_EXCEPTIONS">
            <summary> Flag indicates whether exceptions should be thrown </summary>
            <remarks> If this flag is set to TRUE, a <see cref="!:CS_Sample_Exception"/> 
            will be thrown if any error occurs while accessing the database. </remarks>
        </member>
        <member name="F:DLC.Tools.Database.CS_TrackingDatabase.DISPLAY_ERRORS">
            <summary> Flag indicates whether a message should be displayed when
            errors occur. </summary>
            <remarks> Set this flag to TRUE to show a message box when errors occur. </remarks>
        </member>
        <member name="F:DLC.Tools.Database.CS_TrackingDatabase.DISPLAY_INNER_EXCEPTIONS">
            <summary> Flag indicates if the text of the internal exception should
            be included in any message or exception thrown.  </summary>
            <remarks> Set to TRUE to show the text from the inner exception. </remarks>
        </member>
        <member name="F:DLC.Tools.Database.CS_TrackingDatabase.ERROR_STRING">
            <summary> Error string displayed in the case of an error </summary>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.exception_caught(System.String,System.Exception)">
            <summary> Method is called when an exception is caught while accessing the database. </summary>
            <param name="stored_procedure_name"> Name of the stored procedure called </param>
            <param name="exception"> Exception caught while accessing the database </param>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Reserve_BibID(UFDC_Bib_Package.Package.UFDC_Item)">
            <summary> Get the next bib id for this item </summary>
            <param name="thisBib"></param>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Edit_Bib(UFDC_Bib_Package.Package.UFDC_Item)">
            <summary>add a new bib or update an existing bib</summary>
            <param name="thisBib">a bibid object</param>
            <returns></returns>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Add_Bib_Language(System.Int32,System.String,System.String,System.String)">
            <summary> Add the material languages associated with one bib id.  Three languages are added at a time.  </summary>
            <param name="receivingid">primary key of the bib item</param>
            <param name="language1">language parameter to add</param>
            <param name="language2">language parameter to add</param>
            <param name="language3">language parameter to add</param>
            <remarks> This method calls the stored procedure 'CS_Add_Bib_Language'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Add_External_Record_Number(System.Int32,System.String,System.String,System.Int32)">
            <summary> Add an external Bib record number </summary>
            <param name="receivingid"> </param>
            <param name="extRecordValue"> </param>
            <param name="extRecordType"> </param>
            <returns> The primary key id to the external record link table.  </returns>
            <remarks> This method calls the stored procedure 'Add_External_Record_Number'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Edit_Volume_Copyright(System.Int32,System.Int32,System.String,System.DateTime,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary> add or update the copyright information for a single volume </summary>
            <param name="volumeid"> </param>
            <param name="copyrightyear"> </param>
            <param name="copyrightholder"> </param>
            <param name="permissiondate"> </param>
            <param name="permissionterm"> </param>
            <param name="comments"> </param>
            <param name="publicdomain"> </param>
            <param name="copyrighttermsid"> </param>
            <param name="permissionrightsid"> </param>
            <remarks> This method calls the stored procedure 'CS_Edit_Volume_Copyright'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Edit_Volume_VIDNumber(System.Int32,System.String)">
            <summary> Set the VID Number directly </summary>
            <param name="VolumeID"> Volume id for this volume </param>
            <param name="VIDNumber"> VID Number </param>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Get_External_Record_Numbers_By_Receivingid(System.Int32)">
            <summary> Gets a complete list of external record numbers associated with this receiving id. </summary>
            <param name="receivingid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'Get_External_Record_Numbers_By_Receivingid'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Get_BibDetails_By_Receivingid(System.Int32)">
            <summary> Gets all the information about a single bib id </summary>
            <param name="receivingid"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_BibDetails_By_Receivingid'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Get_Single_VolumeDetails(System.Int32,System.String)">
            <summary> Gets all the volume information for a volume </summary>
            <param name="receivingid"> </param>
            <param name="VID"></param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Get_Single_VolumeDetails'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Get_Items_By_Drive(System.String)">
            <summary> Gets the list of items by drive </summary>
            <param name="Drive_Label">Label for the drive to check</param>
            <returns>List of all items </returns>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Get_Drives_By_Item(System.String,System.String)">
            <summary> Gets the list of drives by item </summary>
            <param name="BibID">BibID for the item to search</param>
            <param name="VID">VID for the item to search</param>
            <returns>List of drives </returns>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Clear_Links_By_Drive(System.String)">
            <summary> Clears all links to a certain drive label </summary>
            <param name="Drive_Label">Label for the drive to clear</param>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Add_Drive_Item_Link(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary> Clears all links to a certain drive label </summary>
            <param name="BibID">BibID for the item to add</param>
            <param name="VID">VID for the item to add</param>
            <param name="Drive_Label">Label for the drive to add</param>
            <param name="Date">Modify date on the folder</param>
            <param name="Location">Path for the item on the drive</param>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Add_Drive_Item_Link(System.Int32,System.String,System.DateTime,System.String)">
            <summary> Clears all links to a certain drive label </summary>
            <param name="VolumeID">Volume ID for this item</param>
            <param name="Drive_Label">Label for the drive to add</param>
            <param name="Date">Modify date on the folder</param>
            <param name="Location">Path for the item on the drive</param>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Edit_Location(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary> Stored procedure edits an existing holding location, or adds a new holding location </summary>
            <param name="holdinglocid"> </param>
            <param name="holdingname"> </param>
            <param name="holdingcode"> </param>
            <param name="holdingphone"> </param>
            <param name="holdingaddress"> </param>
            <param name="parentholdinglocid"> </param>
            <param name="fcla_added"> </param>
            <returns> </returns>
            <remarks> This method calls the stored procedure 'CS_Edit_Location'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Delete_Blank_BibID(System.Int32)">
            <summary>
            Delete the reserved bibid if no information is entered for it
            </summary>
            <param name="receivingid"></param>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.Delete_Bib_Language(System.Int32)">
            <summary> Delete all the material languages associated with one bib id </summary>
            <param name="receivingid"> </param>
            <remarks> This method calls the stored procedure 'CS_Delete_Bib_Language'. </remarks>
            <exception cref="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception"> Exception is thrown if an error is caught during 
            the database work and the THROW_EXCEPTIONS internal flag is set to true. </exception>
        </member>
        <member name="P:DLC.Tools.Database.CS_TrackingDatabase.Connection_String">
            <summary> Get or set the connection string for connecting to the tracking database </summary>
        </member>
        <member name="P:DLC.Tools.Database.CS_TrackingDatabase.Show_Errors">
            <summary> Gets and sets a flag if this database should show errors messages  </summary>
        </member>
        <member name="P:DLC.Tools.Database.CS_TrackingDatabase.Distinct_Drive_Labels">
            <summary> Gets the list of all existing drive labels </summary>
        </member>
        <member name="T:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception">
            <summary> CS_TrackingDatabase_Exception is an exception which can be thrown when there
            is an error while accessing the database.  This extends the <see cref="T:System.ApplicationException"/>
            class.  </summary>
        </member>
        <member name="M:DLC.Tools.Database.CS_TrackingDatabase.CS_TrackingDatabase_Exception.#ctor(System.String)">
            <summary> Constructor for a new CS_TrackingDatabase_Exception object </summary>
            <param name="exceptionText"> Text of the exception to be displayed </param>
        </member>
        <member name="T:DLC.Tools.StartUp.SingleProgramInstance">
             <summary> SingleProgramInstance is an object which is used to ensure that only one instance
             of this application is running at one time.  <br/> <br/> </summary> 
             <remarks> Upon construction of this object, a unique string identifier is passed to minimize the 
             impact of two DIFFERENT applications which happen to have the same name.<br/><br/>
             This object works by using the C# object <see cref="T:System.Threading.Mutex"/>.  It attempts to gain ownership of the <see cref="T:System.Threading.Mutex"/>
             for the current application during the construction process. If <see cref="T:System.Threading.Mutex"/> becomes owned, then this
             is the only instance of this application running.  The <see cref="T:System.Threading.Mutex"/> will remain owned until this
             object is deconstructed.<br/> <br/>
             This class implements the <see cref="T:System.IDisposable"/> interface.  <br/> <br/>
             Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center.   </remarks>
             <example>
             The example below checks to make sure there are no other instances of itself running before proceeding.
             <code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using GeneralTools.Logs;
            	using GeneralTools.StartUp;
            
            	namespace DLC.Tools
            	{
            		public class SingleProgrammingInstance_Example
            		{
            			static void Main() 
            			{
            				// Create the MUTEX object to ensure no collisions
            				SingleProgramInstance myMutex = new SingleProgramInstance("l7$2sh");
            
            				// Ensure this is the only instance running.
            				if ( myMutex.IsSingleInstance )
            				{
            					// This is the only instance of this application running
            				
            					// PERFORM NEEDED WORK HERE
            
            					// No need to release the mutex explicitly, since it will be Disposed (Implements IDisposable)
            				}
            				else
            				{
            					// This already has an instance running, so add an event in the Windows log and close
            					EventLogger.FailureAudit("Attempted to launch this application, but couldn't get MUTEX", "Example Program");
            				}
            			}
            		}
            	} 
             </code> </example>
        </member>
        <member name="F:DLC.Tools.StartUp.SingleProgramInstance.myMutex">
            <summary> <see cref="T:System.Threading.Mutex"/> object used to prevent multiple instances
            of the same application. </summary>
        </member>
        <member name="F:DLC.Tools.StartUp.SingleProgramInstance.owned">
            <summary> Flag which indicates whether ownership of the MUTEX could be 
            gotten.  If so, this is the only instance, otherwise there is another instance
            of the same application running. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.SingleProgramInstance.#ctor(System.String)">
            <summary> Default constructor requires an additional string to identify the process.  </summary>
            <param name="identifier"> Random identifier which will be the same
            for all processes of the same program.  </param>
            <remarks> Each process is named, but some names may be common.  An additional random, 
            identifier will reduce the chance of concurrency issues. </remarks>
        </member>
        <member name="M:DLC.Tools.StartUp.SingleProgramInstance.Finalize">
            <summary> Destructor releases the MUTEX, although this should have already
            happened in the Dispose method since this extends the IDisposable class. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.SingleProgramInstance.Release">
            <summary> Private method used to release the Mutex once complete 
            with all the work. </summary>
        </member>
        <member name="M:DLC.Tools.StartUp.SingleProgramInstance.Dispose">
            <summary> Releases the MUTEX upon disposal. </summary>
            <remarks> Method needed to implement the <see cref="T:System.IDisposable"/> interface.   </remarks>
        </member>
        <member name="P:DLC.Tools.StartUp.SingleProgramInstance.IsSingleInstance">
            <summary> Returns whether this is the only instance of this process running at this time. </summary>
        </member>
        <member name="T:DLC.Tools.RemarkedDataSet">
             <summary> RemarkedDataSet extends the <see cref="T:System.Data.DataSet"/> object and includes remarks for each 
             data element.  <br/> <br/> </summary>
             <remarks> This extends the <see cref="T:System.Data.DataSet"/> object and contains internal collections 
             to maintain remarks for each DataTable in this DataSet.  Remarks are also maintained for the 
             entire DataSet.  To utilize these remarks, and output to remarked XML, use the <see cref="M:DLC.Tools.RemarkedDataSet.WriteRemarkedXml(System.String)"/>
             method and add each table with the <see cref="M:DLC.Tools.RemarkedDataSet.AddTable(System.Data.DataTable,System.String)"/> method.  The <see cref="M:DLC.Tools.RemarkedDataSet.AddRemarks(System.Data.DataTable,System.String)"/> method adds
             remarks to a preexisting <see cref="T:System.Data.DataTable"/> object in the collection. 
             <br/> <br/> Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
             <example> EXAMPLE 1: Below is an example of using this class to create remarked XML for a DataSet:
             <code>
             <SPAN class="lang">[C#]</SPAN> 
            	using System;
            	using System.Data;
            	using GeneralTools.Data;
            
            	namespace DLC.Tools
            	{
            		public class RemarkedDataSet_Example
            		{
            			static void Main() 
            			{
            				// Build the DataSet amd add the remarks
            				RemarkedDataSet tester = new RemarkedDataSet("Test_DataSet");
            				tester.Namespace = "DLC";
            				tester.Remarks = "This is the very first test data set.  These remarks are being " +
            					"made very long on purpose to test the wrapping ability of the remark formatter " +
            					"private helper method function in the Remarked DataSet";
            
            				// Add the first table
            				DataTable firstTable = new DataTable("Language");
            				firstTable.Columns.Add( new DataColumn("Greeting") );
            				firstTable.Columns.Add( new DataColumn("Opposite") );
            				tester.AddTable( firstTable, "This is the very first test data table, which stores greetings and the opposite greetings.");
            
            				// Add the second table
            				DataTable secondTable = new DataTable("People");
            				secondTable.Columns.Add( new DataColumn("Name") );
            				secondTable.Columns.Add( new DataColumn("Email") );
            				tester.Tables.Add( secondTable )
            				tester.AddRemarks( secondTable, "The 'People' table holds additional information which can be used while processing items.");
            
            				// Add two rows to the first table row
            				DataRow newRow = firstTable.NewRow();
            				newRow["Greeting"] = "Hello";
            				newRow["Opposite"] = "Goodbye";
            				firstTable.Rows.Add( newRow );
            				newRow = firstTable.NewRow();
            				newRow["Greeting"] = "Good Morning";
            				newRow["Opposite"] = "Good Night";
            				firstTable.Rows.Add( newRow );
            
            				// Add a row to the second table
            				newRow = secondTable.NewRow();
            				newRow["Name"] = "Mark Sullivan";
            				newRow["Email"] = "MarkSull@bellsouth.net";
            				secondTable.Rows.Add( newRow );
            
            				// Write to XML
            				tester.WriteRemarkedXml( "test.xml" );
            			}
            		}
            	}
             </code>
             <br/>
             Below is what the output file's text looks like.  To see it in HTML, click <a href="test.xml">here</a>.
             <code>
            	&lt;!-- This is the very first test data set.  These remarks are being made very   --&gt; 
            	&lt;!-- long on purpose to test the wrapping ability of the remark formatter       --&gt; 
            	&lt;!-- private helper method function in the Remarked DataSet                     --&gt; 
            	&lt;Test_DataSet xmlns="DLC"&gt;
            
            	&lt;!-- This is the very first test data table, which stores greetings and the     --&gt; 
            	&lt;!-- opposite greetings.                                                        --&gt; 
            	&lt;Language&gt;
            	&lt;Greeting&gt;Hello&lt;/Greeting&gt;
            	&lt;Opposite&gt;Goodbye&lt;/Opposite&gt;
            	&lt;/Language&gt;
            	&lt;Language&gt;
            	&lt;Greeting&gt;Good Morning&lt;/Greeting&gt;
            	&lt;Opposite&gt;Good Night&lt;/Opposite&gt;
            	&lt;/Language&gt;
            
            	&lt;!-- The 'People' table holds additional information which can be used while    --&gt; 
            	&lt;!-- processing items.                                                          --&gt; 
            	&lt;People&gt;
            	&lt;Name&gt;Mark Sullivan&lt;/Name&gt;
            	&lt;Email&gt;MarkSull@bellsouth.net&lt;/Email&gt;
            	&lt;/People&gt;
            	&lt;/Test_DataSet&gt;
             </code> </example>
        </member>
        <member name="F:DLC.Tools.RemarkedDataSet.remarks">
            <summary> Stores the DataSet level remarks </summary>
        </member>
        <member name="F:DLC.Tools.RemarkedDataSet.tableRemarks">
            <summary> Stores the DataTable level remarks </summary>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.#ctor">
            <summary> Constructor for a new RemarkedDataSet object </summary>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.#ctor(System.Data.DataSet,System.Collections.Hashtable,System.String)">
            <summary> Constructor for a new RemarkedDataSet object </summary>
            <param name="dataSet"> DataSet full of the data </param>
            <param name="oldTableRemarks"> Hashtable full of remarks for each table </param>
            <param name="remarks"> Volume level remarks </param>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.#ctor(System.String)">
            <summary> Constructor for a new RemarkedDataSet object </summary>
            <param name="dataSetName"> Name of the data set </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.#ctor(System.String,System.String)">
            <summary> Constructor for a new RemarkedDataSet object </summary>
            <param name="dataSetName"> Name of the data set </param>
            <param name="dataSetRemarks"> Remarks associated with this data set </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.AddTable(System.Data.DataTable,System.String)">
            <summary> Adds a remarked <see cref="T:System.Data.DataTable"/> object to the collection. </summary>
            <param name="table"> <see cref="T:System.Data.DataTable"/> object to add </param>
            <param name="remarks"> Remarks to associate with this DataTable </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.Copy">
            <summary> Gets a copy in structure, data, and remarks to this Remarked DataSet </summary>
            <returns> Copy </returns>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.AddRemarks(System.Data.DataTable,System.String)">
            <summary> Adds remarks to a pre-existing <see cref="T:System.Data.DataTable"/> object in the collection. </summary>
            <param name="table"> <see cref="T:System.Data.DataTable"/> object to attach the remarks to </param>
            <param name="remarks"> Remarks to associate with this DataTable </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.AddRemarks(System.String,System.String)">
            <summary> Adds remarks to a pre-existing <see cref="T:System.Data.DataTable"/> object in the collection. </summary>
            <param name="tableName"> Name of the preexisting table in this data set </param>
            <param name="remarks"> Remarks to associate with this DataTable </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.WriteRemarkedXml(System.String)">
            <summary> Writes the current data to the specified file as remarked XML </summary>
            <param name="fileName"> The file name (including the path) to which to write </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.WriteRemarkedXml(System.String,System.Data.XmlWriteMode)">
            <summary> Writes the current data to the specified file as remarked XML </summary>
            <param name="fileName"> The file name (including the path) to which to write </param>
            <param name="writeMode"> One of the System.XmlWriteMode values.  Use WriteSchema to write the schema </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.WriteRemarkedXml(System.String,System.Boolean)">
            <summary> Writes the current data to the specified file as remarked XML </summary>
            <param name="fileName"> The file name (including the path) to which to write </param>
            <param name="includeSchema"> Flag indicates whether to include the schema or not </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="M:DLC.Tools.RemarkedDataSet.formatRemarks(System.String)">
            <summary> Formats the remarks into the proper format, dividing into strings
            and placing the proper encoding around it </summary>
            <param name="remarksToFormat"> String to format </param>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="P:DLC.Tools.RemarkedDataSet.Remarks">
            <summary> Gets and sets the DataSet level remarks </summary>
            <value> Remarks which pertain to the entire DataSet </value>
            <example> For a complete example, see the example under the main <see cref="T:DLC.Tools.RemarkedDataSet"/> class. </example>
        </member>
        <member name="T:DLC.Tools.Database.Database_Exception">
            <summary> Database_Exception is an exception which can be thrown when there
            is an error while accessing the database.  This extends the <see cref="T:System.ApplicationException"/>
            class.  </summary>
        </member>
        <member name="M:DLC.Tools.Database.Database_Exception.#ctor(System.String)">
            <summary> Constructor for a new qc_Exception object </summary>
            <param name="exceptionText"> Text of the exception to be displayed </param>
        </member>
        <member name="T:DLC.Tools.StartUp.VersionConfigSettings">
             <summary> Reads the VersionConfiguration section of the .exe.config file <br/> <br/> </summary>
             <remarks>  This static class is part of the general <see cref="T:DLC.Tools.StartUp.VersionChecker"/> solution.  This keeps
             local installatins of an application current, by checking a network XML versioning database upon
             startup to determine if the application needs to be updated. <br/> <br/>
             To use this class, a custom versioning section (shown below) must exist in the Application Config file.  An example
             file is <a href="example.exe.config.html">here</a>, and below are just the sections needed.  This section must include 
             information on where the XML versioning database sits, as well as the application name and current version.
             <code>
            	&lt;?xml version="1.0" encoding="utf-8" ?&gt;
            	&lt;configuration&gt;
            
            		&lt;!-- Define a custom section for VersionChecking                            --&gt;
            		&lt;configSections&gt;
            			&lt;section name="VersionChecker"  type="System.Configuration.NameValueSectionHandler" /&gt;
            		&lt;/configSections&gt;
               
            		&lt;!-- Below is information to allow for VersionChecking prior to execution.  --&gt;
            		&lt;!-- XML_Directory holds all the centralized version information and then   --&gt;
            		&lt;!-- the AppName and Version allow for checking this particular app.        --&gt;
            		&lt;VersionChecker&gt;
            			&lt;add key="XML_Directory" value="\\Smathersnt12\DLCdocs\ScanQC\People\Mark\Applications\Versioning" /&gt;
            			&lt;add key="AppName" value="Aerial Image Collector" /&gt;
            			&lt;add key="Version" value="2.1.0" /&gt;
            		&lt;/VersionChecker&gt;
               
            	&lt;/configuration&gt; 
             </code>
             <br/> Object created by Mark V Sullivan (2003) for University of Florida's Digital Library Center. </remarks>
        </member>
        <member name="M:DLC.Tools.StartUp.VersionConfigSettings.#cctor">
            <summary> Emptry constructor for this class.  </summary>
        </member>
        <member name="P:DLC.Tools.StartUp.VersionConfigSettings.localFileSource">
            <summary> Gets the local file source from the Version Config Setting portion of the Application
            settings file. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class
            as well as the main <see cref="T:DLC.Tools.StartUp.VersionConfigSettings"/> class. </example>
        </member>
        <member name="P:DLC.Tools.StartUp.VersionConfigSettings.VersionCheckingXML">
            <summary> Gets the directory where the XML file holding all of the versioning
            information is located. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class
            as well as the main <see cref="T:DLC.Tools.StartUp.VersionConfigSettings"/> class. </example>
        </member>
        <member name="P:DLC.Tools.StartUp.VersionConfigSettings.AppName">
            <summary> Gets the name of the application to look for in the XML Versioning database. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class
            as well as the main <see cref="T:DLC.Tools.StartUp.VersionConfigSettings"/> class. </example>
        </member>
        <member name="P:DLC.Tools.StartUp.VersionConfigSettings.AppVersion">
            <summary> Gets the version number of this application to look for in the XML Versioning database. </summary>
            <example> To see examples, look at the examples listed under the main <see cref="T:DLC.Tools.StartUp.VersionChecker"/> class
            as well as the main <see cref="T:DLC.Tools.StartUp.VersionConfigSettings"/> class. </example>
        </member>
    </members>
</doc>

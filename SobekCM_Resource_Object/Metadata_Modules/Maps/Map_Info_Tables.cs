//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 

#region Using directives

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;

#endregion

#pragma warning disable 1591

namespace SobekCM.Resource_Object.Metadata_Modules.Maps
{
    [Serializable()]
    [DesignerCategory("code")]
    [DebuggerStepThrough()]
    [ToolboxItem(true)]
    public class Map_Info_Tables : DataSet
    {
        #region Delegates

        public delegate void Corporation_LinkRowChangeEventHandler(object sender, Corporation_LinkRowChangeEvent e);

        public delegate void FeatureRowChangeEventHandler(object sender, FeatureRowChangeEvent e);

        public delegate void Person_LinkRowChangeEventHandler(object sender, Person_LinkRowChangeEvent e);

        public delegate void Sheet_LinkRowChangeEventHandler(object sender, Sheet_LinkRowChangeEvent e);

        public delegate void StreetRowChangeEventHandler(object sender, StreetRowChangeEvent e);

        #endregion

        private DataRelation relationFeature_Corp_Link;

        private DataRelation relationFeature_Person_Link;

        private DataRelation relationFeature_Sheet_Link;
        private Corporation_LinkDataTable tableCorporation_Link;
        private FeatureDataTable tableFeature;
        private Person_LinkDataTable tablePerson_Link;

        private Sheet_LinkDataTable tableSheet_Link;
        private StreetDataTable tableStreet;

        public Map_Info_Tables()
        {
            InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        protected Map_Info_Tables(SerializationInfo info, StreamingContext context)
        {
            string strSchema = ((string) (info.GetValue("XmlSchema", typeof (string))));
            if ((strSchema != null))
            {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Feature"] != null))
                {
                    Tables.Add(new FeatureDataTable(ds.Tables["Feature"]));
                }
                if ((ds.Tables["Street"] != null))
                {
                    Tables.Add(new StreetDataTable(ds.Tables["Street"]));
                }
                if ((ds.Tables["Corporation_Link"] != null))
                {
                    Tables.Add(new Corporation_LinkDataTable(ds.Tables["Corporation_Link"]));
                }
                if ((ds.Tables["Person_Link"] != null))
                {
                    Tables.Add(new Person_LinkDataTable(ds.Tables["Person_Link"]));
                }
                if ((ds.Tables["Sheet_Link"] != null))
                {
                    Tables.Add(new Sheet_LinkDataTable(ds.Tables["Sheet_Link"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                InitClass();
            }
            GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public FeatureDataTable Feature
        {
            get { return tableFeature; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public StreetDataTable Street
        {
            get { return tableStreet; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Corporation_LinkDataTable Corporation_Link
        {
            get { return tableCorporation_Link; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Person_LinkDataTable Person_Link
        {
            get { return tablePerson_Link; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Sheet_LinkDataTable Sheet_Link
        {
            get { return tableSheet_Link; }
        }

        public override DataSet Clone()
        {
            Map_Info_Tables cln = ((Map_Info_Tables) (base.Clone()));
            cln.InitVars();
            return cln;
        }

        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        protected override void ReadXmlSerializable(XmlReader reader)
        {
            Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Feature"] != null))
            {
                Tables.Add(new FeatureDataTable(ds.Tables["Feature"]));
            }
            if ((ds.Tables["Street"] != null))
            {
                Tables.Add(new StreetDataTable(ds.Tables["Street"]));
            }
            if ((ds.Tables["Corporation_Link"] != null))
            {
                Tables.Add(new Corporation_LinkDataTable(ds.Tables["Corporation_Link"]));
            }
            if ((ds.Tables["Person_Link"] != null))
            {
                Tables.Add(new Person_LinkDataTable(ds.Tables["Person_Link"]));
            }
            if ((ds.Tables["Sheet_Link"] != null))
            {
                Tables.Add(new Sheet_LinkDataTable(ds.Tables["Sheet_Link"]));
            }
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, MissingSchemaAction.Add);
            InitVars();
        }

        protected override XmlSchema GetSchemaSerializable()
        {
            MemoryStream stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        internal void InitVars()
        {
            tableFeature = ((FeatureDataTable) (Tables["Feature"]));
            if ((tableFeature != null))
            {
                tableFeature.InitVars();
            }
            tableStreet = ((StreetDataTable) (Tables["Street"]));
            if ((tableStreet != null))
            {
                tableStreet.InitVars();
            }
            tableCorporation_Link = ((Corporation_LinkDataTable) (Tables["Corporation_Link"]));
            if ((tableCorporation_Link != null))
            {
                tableCorporation_Link.InitVars();
            }
            tablePerson_Link = ((Person_LinkDataTable) (Tables["Person_Link"]));
            if ((tablePerson_Link != null))
            {
                tablePerson_Link.InitVars();
            }
            tableSheet_Link = ((Sheet_LinkDataTable) (Tables["Sheet_Link"]));
            if ((tableSheet_Link != null))
            {
                tableSheet_Link.InitVars();
            }
            relationFeature_Corp_Link = Relations["Feature_Corp_Link"];
            relationFeature_Person_Link = Relations["Feature_Person_Link"];
            relationFeature_Sheet_Link = Relations["Feature_Sheet_Link"];
        }

        private void InitClass()
        {
            DataSetName = "Map_Info_Tables";
            Prefix = "";
            Namespace = "";
            Locale = new CultureInfo("en-US");
            CaseSensitive = false;
            EnforceConstraints = true;
            tableFeature = new FeatureDataTable();
            Tables.Add(tableFeature);
            tableStreet = new StreetDataTable();
            Tables.Add(tableStreet);
            tableCorporation_Link = new Corporation_LinkDataTable();
            Tables.Add(tableCorporation_Link);
            tablePerson_Link = new Person_LinkDataTable();
            Tables.Add(tablePerson_Link);
            tableSheet_Link = new Sheet_LinkDataTable();
            Tables.Add(tableSheet_Link);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Feature_Corp_Link", new DataColumn[]
                                                                    {
                                                                        tableFeature.FeatureIDColumn
                                                                    }, new DataColumn[]
                                                                           {
                                                                               tableCorporation_Link.FeatureIDColumn
                                                                           });
            tableCorporation_Link.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Feature_Person_Link", new DataColumn[]
                                                                      {
                                                                          tableFeature.FeatureIDColumn
                                                                      }, new DataColumn[]
                                                                             {
                                                                                 tablePerson_Link.FeatureIDColumn
                                                                             });
            tablePerson_Link.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Feature_Sheet_Link", new DataColumn[]
                                                                     {
                                                                         tableFeature.FeatureIDColumn
                                                                     }, new DataColumn[]
                                                                            {
                                                                                tableSheet_Link.FeatureIDColumn
                                                                            });
            tableSheet_Link.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            relationFeature_Corp_Link = new DataRelation("Feature_Corp_Link", new DataColumn[]
                                                                                  {
                                                                                      tableFeature.FeatureIDColumn
                                                                                  }, new DataColumn[]
                                                                                         {
                                                                                             tableCorporation_Link.FeatureIDColumn
                                                                                         }, false);
            Relations.Add(relationFeature_Corp_Link);
            relationFeature_Person_Link = new DataRelation("Feature_Person_Link", new DataColumn[]
                                                                                      {
                                                                                          tableFeature.FeatureIDColumn
                                                                                      }, new DataColumn[]
                                                                                             {
                                                                                                 tablePerson_Link.FeatureIDColumn
                                                                                             }, false);
            Relations.Add(relationFeature_Person_Link);
            relationFeature_Sheet_Link = new DataRelation("Feature_Sheet_Link", new DataColumn[]
                                                                                    {
                                                                                        tableFeature.FeatureIDColumn
                                                                                    }, new DataColumn[]
                                                                                           {
                                                                                               tableSheet_Link.FeatureIDColumn
                                                                                           }, false);
            Relations.Add(relationFeature_Sheet_Link);
        }

        private bool ShouldSerializeFeature()
        {
            return false;
        }

        private bool ShouldSerializeStreet()
        {
            return false;
        }

        private bool ShouldSerializeCorporation_Link()
        {
            return false;
        }

        private bool ShouldSerializePerson_Link()
        {
            return false;
        }

        private bool ShouldSerializeSheet_Link()
        {
            return false;
        }

        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if ((e.Action == CollectionChangeAction.Remove))
            {
                InitVars();
            }
        }

        #region Nested type: Corporation_LinkDataTable

        [DebuggerStepThrough()]
        public class Corporation_LinkDataTable : DataTable, IEnumerable
        {
            private DataColumn columnCorpID;
            private DataColumn columnFeatureID;

            internal Corporation_LinkDataTable() :
                base("Corporation_Link")
            {
                InitClass();
            }

            internal Corporation_LinkDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn FeatureIDColumn
            {
                get { return columnFeatureID; }
            }

            internal DataColumn CorpIDColumn
            {
                get { return columnCorpID; }
            }

            public Corporation_LinkRow this[int index]
            {
                get { return ((Corporation_LinkRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowChanged;

            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowChanging;

            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowDeleted;

            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowDeleting;

            public void AddCorporation_LinkRow(Corporation_LinkRow row)
            {
                Rows.Add(row);
            }

            public Corporation_LinkRow AddCorporation_LinkRow(FeatureRow parentFeatureRowByFeature_Corp_Link, long CorpID)
            {
                Corporation_LinkRow rowCorporation_LinkRow = ((Corporation_LinkRow) (NewRow()));
                rowCorporation_LinkRow.ItemArray = new object[]
                                                       {
                                                           parentFeatureRowByFeature_Corp_Link[0],
                                                           CorpID
                                                       };
                Rows.Add(rowCorporation_LinkRow);
                return rowCorporation_LinkRow;
            }

            public override DataTable Clone()
            {
                Corporation_LinkDataTable cln = ((Corporation_LinkDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new Corporation_LinkDataTable();
            }

            internal void InitVars()
            {
                columnFeatureID = Columns["FeatureID"];
                columnCorpID = Columns["CorpID"];
            }

            private void InitClass()
            {
                columnFeatureID = new DataColumn("FeatureID", typeof (long), null, MappingType.Element);
                Columns.Add(columnFeatureID);
                columnCorpID = new DataColumn("CorpID", typeof (long), null, MappingType.Element);
                Columns.Add(columnCorpID);
                columnFeatureID.AllowDBNull = false;
                columnCorpID.AllowDBNull = false;
            }

            public Corporation_LinkRow NewCorporation_LinkRow()
            {
                return ((Corporation_LinkRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Corporation_LinkRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (Corporation_LinkRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((Corporation_LinkRowChanged != null))
                {
                    Corporation_LinkRowChanged(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((Corporation_LinkRowChanging != null))
                {
                    Corporation_LinkRowChanging(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((Corporation_LinkRowDeleted != null))
                {
                    Corporation_LinkRowDeleted(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((Corporation_LinkRowDeleting != null))
                {
                    Corporation_LinkRowDeleting(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow) (e.Row)), e.Action));
                }
            }

            public void RemoveCorporation_LinkRow(Corporation_LinkRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: Corporation_LinkRow

        [DebuggerStepThrough()]
        public class Corporation_LinkRow : DataRow
        {
            private Corporation_LinkDataTable tableCorporation_Link;

            internal Corporation_LinkRow(DataRowBuilder rb) :
                base(rb)
            {
                tableCorporation_Link = ((Corporation_LinkDataTable) (Table));
            }

            public long FeatureID
            {
                get { return ((long) (this[tableCorporation_Link.FeatureIDColumn])); }
                set { this[tableCorporation_Link.FeatureIDColumn] = value; }
            }

            public long CorpID
            {
                get { return ((long) (this[tableCorporation_Link.CorpIDColumn])); }
                set { this[tableCorporation_Link.CorpIDColumn] = value; }
            }

            public FeatureRow FeatureRow
            {
                get { return ((FeatureRow) (GetParentRow(Table.ParentRelations["Feature_Corp_Link"]))); }
                set { SetParentRow(value, Table.ParentRelations["Feature_Corp_Link"]); }
            }
        }

        #endregion

        #region Nested type: Corporation_LinkRowChangeEvent

        [DebuggerStepThrough()]
        public class Corporation_LinkRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private Corporation_LinkRow eventRow;

            public Corporation_LinkRowChangeEvent(Corporation_LinkRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public Corporation_LinkRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: FeatureDataTable

        [DebuggerStepThrough()]
        public class FeatureDataTable : DataTable, IEnumerable
        {
            private DataColumn columnDescription;
            private DataColumn columnFeatureID;
            private DataColumn columnLatitude;
            private DataColumn columnLongitude;

            private DataColumn columnName;

            private DataColumn columnType;

            private DataColumn columnUnits;

            internal FeatureDataTable() :
                base("Feature")
            {
                InitClass();
            }

            internal FeatureDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn FeatureIDColumn
            {
                get { return columnFeatureID; }
            }

            internal DataColumn NameColumn
            {
                get { return columnName; }
            }

            internal DataColumn TypeColumn
            {
                get { return columnType; }
            }

            internal DataColumn UnitsColumn
            {
                get { return columnUnits; }
            }

            internal DataColumn LongitudeColumn
            {
                get { return columnLongitude; }
            }

            internal DataColumn LatitudeColumn
            {
                get { return columnLatitude; }
            }

            internal DataColumn DescriptionColumn
            {
                get { return columnDescription; }
            }

            public FeatureRow this[int index]
            {
                get { return ((FeatureRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event FeatureRowChangeEventHandler FeatureRowChanged;

            public event FeatureRowChangeEventHandler FeatureRowChanging;

            public event FeatureRowChangeEventHandler FeatureRowDeleted;

            public event FeatureRowChangeEventHandler FeatureRowDeleting;

            public void AddFeatureRow(FeatureRow row)
            {
                Rows.Add(row);
            }

            public FeatureRow AddFeatureRow(long FeatureID, string Name, string Type, string Units, string Longitude, string Latitude, string Description)
            {
                FeatureRow rowFeatureRow = ((FeatureRow) (NewRow()));
                rowFeatureRow.ItemArray = new object[]
                                              {
                                                  FeatureID,
                                                  Name,
                                                  Type,
                                                  Units,
                                                  Longitude,
                                                  Latitude,
                                                  Description
                                              };
                Rows.Add(rowFeatureRow);
                return rowFeatureRow;
            }

            public FeatureRow FindByFeatureID(long FeatureID)
            {
                return ((FeatureRow) (Rows.Find(new object[]
                                                    {
                                                        FeatureID
                                                    })));
            }

            public override DataTable Clone()
            {
                FeatureDataTable cln = ((FeatureDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new FeatureDataTable();
            }

            internal void InitVars()
            {
                columnFeatureID = Columns["FeatureID"];
                columnName = Columns["Name"];
                columnType = Columns["Type"];
                columnUnits = Columns["Units"];
                columnLongitude = Columns["Longitude"];
                columnLatitude = Columns["Latitude"];
                columnDescription = Columns["Description"];
            }

            private void InitClass()
            {
                columnFeatureID = new DataColumn("FeatureID", typeof (long), null, MappingType.Element);
                Columns.Add(columnFeatureID);
                columnName = new DataColumn("Name", typeof (string), null, MappingType.Element);
                Columns.Add(columnName);
                columnType = new DataColumn("Type", typeof (string), null, MappingType.Element);
                Columns.Add(columnType);
                columnUnits = new DataColumn("Units", typeof (string), null, MappingType.Element);
                Columns.Add(columnUnits);
                columnLongitude = new DataColumn("Longitude", typeof (string), null, MappingType.Element);
                Columns.Add(columnLongitude);
                columnLatitude = new DataColumn("Latitude", typeof (string), null, MappingType.Element);
                Columns.Add(columnLatitude);
                columnDescription = new DataColumn("Description", typeof (string), null, MappingType.Element);
                Columns.Add(columnDescription);
                Constraints.Add(new UniqueConstraint("Feature_Primary_Constraint", new DataColumn[]
                                                                                       {
                                                                                           columnFeatureID
                                                                                       }, true));
                columnFeatureID.AllowDBNull = false;
                columnFeatureID.Unique = true;
            }

            public FeatureRow NewFeatureRow()
            {
                return ((FeatureRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new FeatureRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (FeatureRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((FeatureRowChanged != null))
                {
                    FeatureRowChanged(this, new FeatureRowChangeEvent(((FeatureRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((FeatureRowChanging != null))
                {
                    FeatureRowChanging(this, new FeatureRowChangeEvent(((FeatureRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((FeatureRowDeleted != null))
                {
                    FeatureRowDeleted(this, new FeatureRowChangeEvent(((FeatureRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((FeatureRowDeleting != null))
                {
                    FeatureRowDeleting(this, new FeatureRowChangeEvent(((FeatureRow) (e.Row)), e.Action));
                }
            }

            public void RemoveFeatureRow(FeatureRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: FeatureRow

        [DebuggerStepThrough()]
        public class FeatureRow : DataRow
        {
            private FeatureDataTable tableFeature;

            internal FeatureRow(DataRowBuilder rb) :
                base(rb)
            {
                tableFeature = ((FeatureDataTable) (Table));
            }

            public long FeatureID
            {
                get { return ((long) (this[tableFeature.FeatureIDColumn])); }
                set { this[tableFeature.FeatureIDColumn] = value; }
            }

            public string Name
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableFeature.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableFeature.NameColumn] = value; }
            }

            public string Type
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableFeature.TypeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableFeature.TypeColumn] = value; }
            }

            public string Units
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableFeature.UnitsColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableFeature.UnitsColumn] = value; }
            }

            public string Longitude
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableFeature.LongitudeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableFeature.LongitudeColumn] = value; }
            }

            public string Latitude
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableFeature.LatitudeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableFeature.LatitudeColumn] = value; }
            }

            public string Description
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableFeature.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableFeature.DescriptionColumn] = value; }
            }

            public bool IsNameNull()
            {
                return IsNull(tableFeature.NameColumn);
            }

            public void SetNameNull()
            {
                this[tableFeature.NameColumn] = Convert.DBNull;
            }

            public bool IsTypeNull()
            {
                return IsNull(tableFeature.TypeColumn);
            }

            public void SetTypeNull()
            {
                this[tableFeature.TypeColumn] = Convert.DBNull;
            }

            public bool IsUnitsNull()
            {
                return IsNull(tableFeature.UnitsColumn);
            }

            public void SetUnitsNull()
            {
                this[tableFeature.UnitsColumn] = Convert.DBNull;
            }

            public bool IsLongitudeNull()
            {
                return IsNull(tableFeature.LongitudeColumn);
            }

            public void SetLongitudeNull()
            {
                this[tableFeature.LongitudeColumn] = Convert.DBNull;
            }

            public bool IsLatitudeNull()
            {
                return IsNull(tableFeature.LatitudeColumn);
            }

            public void SetLatitudeNull()
            {
                this[tableFeature.LatitudeColumn] = Convert.DBNull;
            }

            public bool IsDescriptionNull()
            {
                return IsNull(tableFeature.DescriptionColumn);
            }

            public void SetDescriptionNull()
            {
                this[tableFeature.DescriptionColumn] = Convert.DBNull;
            }

            public Corporation_LinkRow[] GetCorporation_LinkRows()
            {
                return ((Corporation_LinkRow[]) (GetChildRows(Table.ChildRelations["Feature_Corp_Link"])));
            }

            public Person_LinkRow[] GetPerson_LinkRows()
            {
                return ((Person_LinkRow[]) (GetChildRows(Table.ChildRelations["Feature_Person_Link"])));
            }

            public Sheet_LinkRow[] GetSheet_LinkRows()
            {
                return ((Sheet_LinkRow[]) (GetChildRows(Table.ChildRelations["Feature_Sheet_Link"])));
            }
        }

        #endregion

        #region Nested type: FeatureRowChangeEvent

        [DebuggerStepThrough()]
        public class FeatureRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private FeatureRow eventRow;

            public FeatureRowChangeEvent(FeatureRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public FeatureRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: Person_LinkDataTable

        [DebuggerStepThrough()]
        public class Person_LinkDataTable : DataTable, IEnumerable
        {
            private DataColumn columnFeatureID;

            private DataColumn columnPersonID;

            private DataColumn columnType;

            internal Person_LinkDataTable() :
                base("Person_Link")
            {
                InitClass();
            }

            internal Person_LinkDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn FeatureIDColumn
            {
                get { return columnFeatureID; }
            }

            internal DataColumn PersonIDColumn
            {
                get { return columnPersonID; }
            }

            internal DataColumn TypeColumn
            {
                get { return columnType; }
            }

            public Person_LinkRow this[int index]
            {
                get { return ((Person_LinkRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event Person_LinkRowChangeEventHandler Person_LinkRowChanged;

            public event Person_LinkRowChangeEventHandler Person_LinkRowChanging;

            public event Person_LinkRowChangeEventHandler Person_LinkRowDeleted;

            public event Person_LinkRowChangeEventHandler Person_LinkRowDeleting;

            public void AddPerson_LinkRow(Person_LinkRow row)
            {
                Rows.Add(row);
            }

            public Person_LinkRow AddPerson_LinkRow(FeatureRow parentFeatureRowByFeature_Person_Link, long PersonID, string Type)
            {
                Person_LinkRow rowPerson_LinkRow = ((Person_LinkRow) (NewRow()));
                rowPerson_LinkRow.ItemArray = new object[]
                                                  {
                                                      parentFeatureRowByFeature_Person_Link[0],
                                                      PersonID,
                                                      Type
                                                  };
                Rows.Add(rowPerson_LinkRow);
                return rowPerson_LinkRow;
            }

            public override DataTable Clone()
            {
                Person_LinkDataTable cln = ((Person_LinkDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new Person_LinkDataTable();
            }

            internal void InitVars()
            {
                columnFeatureID = Columns["FeatureID"];
                columnPersonID = Columns["PersonID"];
                columnType = Columns["Type"];
            }

            private void InitClass()
            {
                columnFeatureID = new DataColumn("FeatureID", typeof (long), null, MappingType.Element);
                Columns.Add(columnFeatureID);
                columnPersonID = new DataColumn("PersonID", typeof (long), null, MappingType.Element);
                Columns.Add(columnPersonID);
                columnType = new DataColumn("Type", typeof (string), null, MappingType.Element);
                Columns.Add(columnType);
                columnFeatureID.AllowDBNull = false;
                columnPersonID.AllowDBNull = false;
            }

            public Person_LinkRow NewPerson_LinkRow()
            {
                return ((Person_LinkRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Person_LinkRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (Person_LinkRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((Person_LinkRowChanged != null))
                {
                    Person_LinkRowChanged(this, new Person_LinkRowChangeEvent(((Person_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((Person_LinkRowChanging != null))
                {
                    Person_LinkRowChanging(this, new Person_LinkRowChangeEvent(((Person_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((Person_LinkRowDeleted != null))
                {
                    Person_LinkRowDeleted(this, new Person_LinkRowChangeEvent(((Person_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((Person_LinkRowDeleting != null))
                {
                    Person_LinkRowDeleting(this, new Person_LinkRowChangeEvent(((Person_LinkRow) (e.Row)), e.Action));
                }
            }

            public void RemovePerson_LinkRow(Person_LinkRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: Person_LinkRow

        [DebuggerStepThrough()]
        public class Person_LinkRow : DataRow
        {
            private Person_LinkDataTable tablePerson_Link;

            internal Person_LinkRow(DataRowBuilder rb) :
                base(rb)
            {
                tablePerson_Link = ((Person_LinkDataTable) (Table));
            }

            public long FeatureID
            {
                get { return ((long) (this[tablePerson_Link.FeatureIDColumn])); }
                set { this[tablePerson_Link.FeatureIDColumn] = value; }
            }

            public long PersonID
            {
                get { return ((long) (this[tablePerson_Link.PersonIDColumn])); }
                set { this[tablePerson_Link.PersonIDColumn] = value; }
            }

            public string Type
            {
                get
                {
                    try
                    {
                        return ((string) (this[tablePerson_Link.TypeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tablePerson_Link.TypeColumn] = value; }
            }

            public FeatureRow FeatureRow
            {
                get { return ((FeatureRow) (GetParentRow(Table.ParentRelations["Feature_Person_Link"]))); }
                set { SetParentRow(value, Table.ParentRelations["Feature_Person_Link"]); }
            }

            public bool IsTypeNull()
            {
                return IsNull(tablePerson_Link.TypeColumn);
            }

            public void SetTypeNull()
            {
                this[tablePerson_Link.TypeColumn] = Convert.DBNull;
            }
        }

        #endregion

        #region Nested type: Person_LinkRowChangeEvent

        [DebuggerStepThrough()]
        public class Person_LinkRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private Person_LinkRow eventRow;

            public Person_LinkRowChangeEvent(Person_LinkRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public Person_LinkRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: Sheet_LinkDataTable

        [DebuggerStepThrough()]
        public class Sheet_LinkDataTable : DataTable, IEnumerable
        {
            private DataColumn columnFeatureID;

            private DataColumn columnSheetID;

            private DataColumn columnX;

            private DataColumn columnY;

            internal Sheet_LinkDataTable() :
                base("Sheet_Link")
            {
                InitClass();
            }

            internal Sheet_LinkDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn FeatureIDColumn
            {
                get { return columnFeatureID; }
            }

            internal DataColumn SheetIDColumn
            {
                get { return columnSheetID; }
            }

            internal DataColumn XColumn
            {
                get { return columnX; }
            }

            internal DataColumn YColumn
            {
                get { return columnY; }
            }

            public Sheet_LinkRow this[int index]
            {
                get { return ((Sheet_LinkRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowChanged;

            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowChanging;

            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowDeleted;

            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowDeleting;

            public void AddSheet_LinkRow(Sheet_LinkRow row)
            {
                Rows.Add(row);
            }

            public Sheet_LinkRow AddSheet_LinkRow(FeatureRow parentFeatureRowByFeature_Sheet_Link, long SheetID, long X, long Y)
            {
                Sheet_LinkRow rowSheet_LinkRow = ((Sheet_LinkRow) (NewRow()));
                rowSheet_LinkRow.ItemArray = new object[]
                                                 {
                                                     parentFeatureRowByFeature_Sheet_Link[0],
                                                     SheetID,
                                                     X,
                                                     Y
                                                 };
                Rows.Add(rowSheet_LinkRow);
                return rowSheet_LinkRow;
            }

            public override DataTable Clone()
            {
                Sheet_LinkDataTable cln = ((Sheet_LinkDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new Sheet_LinkDataTable();
            }

            internal void InitVars()
            {
                columnFeatureID = Columns["FeatureID"];
                columnSheetID = Columns["SheetID"];
                columnX = Columns["X"];
                columnY = Columns["Y"];
            }

            private void InitClass()
            {
                columnFeatureID = new DataColumn("FeatureID", typeof (long), null, MappingType.Element);
                Columns.Add(columnFeatureID);
                columnSheetID = new DataColumn("SheetID", typeof (long), null, MappingType.Element);
                Columns.Add(columnSheetID);
                columnX = new DataColumn("X", typeof (long), null, MappingType.Element);
                Columns.Add(columnX);
                columnY = new DataColumn("Y", typeof (long), null, MappingType.Element);
                Columns.Add(columnY);
                columnFeatureID.AllowDBNull = false;
                columnSheetID.AllowDBNull = false;
            }

            public Sheet_LinkRow NewSheet_LinkRow()
            {
                return ((Sheet_LinkRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Sheet_LinkRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (Sheet_LinkRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((Sheet_LinkRowChanged != null))
                {
                    Sheet_LinkRowChanged(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((Sheet_LinkRowChanging != null))
                {
                    Sheet_LinkRowChanging(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((Sheet_LinkRowDeleted != null))
                {
                    Sheet_LinkRowDeleted(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((Sheet_LinkRowDeleting != null))
                {
                    Sheet_LinkRowDeleting(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow) (e.Row)), e.Action));
                }
            }

            public void RemoveSheet_LinkRow(Sheet_LinkRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: Sheet_LinkRow

        [DebuggerStepThrough()]
        public class Sheet_LinkRow : DataRow
        {
            private Sheet_LinkDataTable tableSheet_Link;

            internal Sheet_LinkRow(DataRowBuilder rb) :
                base(rb)
            {
                tableSheet_Link = ((Sheet_LinkDataTable) (Table));
            }

            public long FeatureID
            {
                get { return ((long) (this[tableSheet_Link.FeatureIDColumn])); }
                set { this[tableSheet_Link.FeatureIDColumn] = value; }
            }

            public long SheetID
            {
                get { return ((long) (this[tableSheet_Link.SheetIDColumn])); }
                set { this[tableSheet_Link.SheetIDColumn] = value; }
            }

            public long X
            {
                get
                {
                    try
                    {
                        return ((long) (this[tableSheet_Link.XColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableSheet_Link.XColumn] = value; }
            }

            public long Y
            {
                get
                {
                    try
                    {
                        return ((long) (this[tableSheet_Link.YColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableSheet_Link.YColumn] = value; }
            }

            public FeatureRow FeatureRow
            {
                get { return ((FeatureRow) (GetParentRow(Table.ParentRelations["Feature_Sheet_Link"]))); }
                set { SetParentRow(value, Table.ParentRelations["Feature_Sheet_Link"]); }
            }

            public bool IsXNull()
            {
                return IsNull(tableSheet_Link.XColumn);
            }

            public void SetXNull()
            {
                this[tableSheet_Link.XColumn] = Convert.DBNull;
            }

            public bool IsYNull()
            {
                return IsNull(tableSheet_Link.YColumn);
            }

            public void SetYNull()
            {
                this[tableSheet_Link.YColumn] = Convert.DBNull;
            }
        }

        #endregion

        #region Nested type: Sheet_LinkRowChangeEvent

        [DebuggerStepThrough()]
        public class Sheet_LinkRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private Sheet_LinkRow eventRow;

            public Sheet_LinkRowChangeEvent(Sheet_LinkRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public Sheet_LinkRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: StreetDataTable

        [DebuggerStepThrough()]
        public class StreetDataTable : DataTable, IEnumerable
        {
            private DataColumn columnDescription;

            private DataColumn columnDirection;
            private DataColumn columnEnd;
            private DataColumn columnName;

            private DataColumn columnSheetID;
            private DataColumn columnSide;
            private DataColumn columnStart;
            private DataColumn columnStreetID;

            internal StreetDataTable() :
                base("Street")
            {
                InitClass();
            }

            internal StreetDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn StreetIDColumn
            {
                get { return columnStreetID; }
            }

            internal DataColumn NameColumn
            {
                get { return columnName; }
            }

            internal DataColumn StartColumn
            {
                get { return columnStart; }
            }

            internal DataColumn EndColumn
            {
                get { return columnEnd; }
            }

            internal DataColumn DescriptionColumn
            {
                get { return columnDescription; }
            }

            internal DataColumn DirectionColumn
            {
                get { return columnDirection; }
            }

            internal DataColumn SideColumn
            {
                get { return columnSide; }
            }

            internal DataColumn SheetIDColumn
            {
                get { return columnSheetID; }
            }

            public StreetRow this[int index]
            {
                get { return ((StreetRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event StreetRowChangeEventHandler StreetRowChanged;

            public event StreetRowChangeEventHandler StreetRowChanging;

            public event StreetRowChangeEventHandler StreetRowDeleted;

            public event StreetRowChangeEventHandler StreetRowDeleting;

            public void AddStreetRow(StreetRow row)
            {
                Rows.Add(row);
            }

            public StreetRow AddStreetRow(long StreetID, string Name, long Start, long End, string Description, string Direction, string Side, long SheetID)
            {
                StreetRow rowStreetRow = ((StreetRow) (NewRow()));
                rowStreetRow.ItemArray = new object[]
                                             {
                                                 StreetID,
                                                 Name,
                                                 Start,
                                                 End,
                                                 Description,
                                                 Direction,
                                                 Side,
                                                 SheetID
                                             };
                Rows.Add(rowStreetRow);
                return rowStreetRow;
            }

            public override DataTable Clone()
            {
                StreetDataTable cln = ((StreetDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new StreetDataTable();
            }

            internal void InitVars()
            {
                columnStreetID = Columns["StreetID"];
                columnName = Columns["Name"];
                columnStart = Columns["Start"];
                columnEnd = Columns["End"];
                columnDescription = Columns["Description"];
                columnDirection = Columns["Direction"];
                columnSide = Columns["Side"];
                columnSheetID = Columns["SheetID"];
            }

            private void InitClass()
            {
                columnStreetID = new DataColumn("StreetID", typeof (long), null, MappingType.Element);
                Columns.Add(columnStreetID);
                columnName = new DataColumn("Name", typeof (string), null, MappingType.Element);
                Columns.Add(columnName);
                columnStart = new DataColumn("Start", typeof (long), null, MappingType.Element);
                Columns.Add(columnStart);
                columnEnd = new DataColumn("End", typeof (long), null, MappingType.Element);
                Columns.Add(columnEnd);
                columnDescription = new DataColumn("Description", typeof (string), null, MappingType.Element);
                Columns.Add(columnDescription);
                columnDirection = new DataColumn("Direction", typeof (string), null, MappingType.Element);
                Columns.Add(columnDirection);
                columnSide = new DataColumn("Side", typeof (string), null, MappingType.Element);
                Columns.Add(columnSide);
                columnSheetID = new DataColumn("SheetID", typeof (long), null, MappingType.Element);
                Columns.Add(columnSheetID);
                columnStreetID.AllowDBNull = false;
            }

            public StreetRow NewStreetRow()
            {
                return ((StreetRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StreetRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (StreetRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((StreetRowChanged != null))
                {
                    StreetRowChanged(this, new StreetRowChangeEvent(((StreetRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((StreetRowChanging != null))
                {
                    StreetRowChanging(this, new StreetRowChangeEvent(((StreetRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((StreetRowDeleted != null))
                {
                    StreetRowDeleted(this, new StreetRowChangeEvent(((StreetRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((StreetRowDeleting != null))
                {
                    StreetRowDeleting(this, new StreetRowChangeEvent(((StreetRow) (e.Row)), e.Action));
                }
            }

            public void RemoveStreetRow(StreetRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: StreetRow

        [DebuggerStepThrough()]
        public class StreetRow : DataRow
        {
            private StreetDataTable tableStreet;

            internal StreetRow(DataRowBuilder rb) :
                base(rb)
            {
                tableStreet = ((StreetDataTable) (Table));
            }

            public long StreetID
            {
                get { return ((long) (this[tableStreet.StreetIDColumn])); }
                set { this[tableStreet.StreetIDColumn] = value; }
            }

            public string Name
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableStreet.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.NameColumn] = value; }
            }

            public long Start
            {
                get
                {
                    try
                    {
                        return ((long) (this[tableStreet.StartColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.StartColumn] = value; }
            }

            public long End
            {
                get
                {
                    try
                    {
                        return ((long) (this[tableStreet.EndColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.EndColumn] = value; }
            }

            public string Description
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableStreet.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.DescriptionColumn] = value; }
            }

            public string Direction
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableStreet.DirectionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.DirectionColumn] = value; }
            }

            public string Side
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableStreet.SideColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.SideColumn] = value; }
            }

            public long SheetID
            {
                get
                {
                    try
                    {
                        return ((long) (this[tableStreet.SheetIDColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableStreet.SheetIDColumn] = value; }
            }

            public bool IsNameNull()
            {
                return IsNull(tableStreet.NameColumn);
            }

            public void SetNameNull()
            {
                this[tableStreet.NameColumn] = Convert.DBNull;
            }

            public bool IsStartNull()
            {
                return IsNull(tableStreet.StartColumn);
            }

            public void SetStartNull()
            {
                this[tableStreet.StartColumn] = Convert.DBNull;
            }

            public bool IsEndNull()
            {
                return IsNull(tableStreet.EndColumn);
            }

            public void SetEndNull()
            {
                this[tableStreet.EndColumn] = Convert.DBNull;
            }

            public bool IsDescriptionNull()
            {
                return IsNull(tableStreet.DescriptionColumn);
            }

            public void SetDescriptionNull()
            {
                this[tableStreet.DescriptionColumn] = Convert.DBNull;
            }

            public bool IsDirectionNull()
            {
                return IsNull(tableStreet.DirectionColumn);
            }

            public void SetDirectionNull()
            {
                this[tableStreet.DirectionColumn] = Convert.DBNull;
            }

            public bool IsSideNull()
            {
                return IsNull(tableStreet.SideColumn);
            }

            public void SetSideNull()
            {
                this[tableStreet.SideColumn] = Convert.DBNull;
            }

            public bool IsSheetIDNull()
            {
                return IsNull(tableStreet.SheetIDColumn);
            }

            public void SetSheetIDNull()
            {
                this[tableStreet.SheetIDColumn] = Convert.DBNull;
            }
        }

        #endregion

        #region Nested type: StreetRowChangeEvent

        [DebuggerStepThrough()]
        public class StreetRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private StreetRow eventRow;

            public StreetRowChangeEvent(StreetRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public StreetRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion
    }
}

#pragma warning restore 1591